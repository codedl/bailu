#ifndef SYSSTRUCT_H_
#define SYSSTRUCT_H_

#define SELFCHECK       1

#define FORMCREATETIME  0                     //0ms
#define FORMCLOSETIME   1000 * 500            //500ms

#define PROMPTTIME      1                     //提示信息显示时间(s)

#define LISTENPORT      4060                  //监听端口
#define SOCKETBUFSIZE   1024 * 1024           //缓冲区大小

#define SCPIBUFSIZE     8192                  //SCPI缓冲区大小

#define LOGCOUNT        9                    //系统日志数目

#define SERIALNO        "00000000000000"     //序列号
#define DEVICETYPE      "SA2180"             //设备型号

#define SOCKETSERVERIP		  "192.168.1.138"  //服务器IP地址
#define SOCKETSEVERPORT      5025             //服务器端口   5025

#define SOCKETSERVERIP_ZC	  "192.168.1.137"   //直采校准服务器IP地址
#define SOCKETSEVERPORT_ZC   80               //直采校准服务器端口  优利德:4162

#define PASSWORD        203093                //系统服务口令
#define MINMACADDR      6785451               //最小MAC地址
#define MAXMACADDR      16777215              //最大MAC地址

#define MINGPIBADDR     1                     //最小GPIB地址
#define MAXGPIBADDR     31                    //最大GPIB地址

#define MAXINPUTLENGTH  20                    //最大输入长度
#define MAXFILECOUNT    1024                  //最大文件数量

#define MINFREQ         9e3                 //最小频率
#define MAXFREQ         (18e9 + MINFREQ)      //最大频率
#define ZCMINFREQ       1                     //直采最小频率
#define ZCMAXFREQ       10e6                  //直采最大频率
#define ZCMAXSPAN       (ZCMAXFREQ - ZCMINFREQ)//直采最大扫宽
//#define MAXZCFREQ       12e6                  //最大直采频率
#define MINFREQOFFSET   -MAXFREQ              //最小频率偏置
#define MAXFREQOFFSET   MAXFREQ               //最大频率偏置
#define MINSPAN         100                   //最小扫宽
#define MAXSPAN         (MAXFREQ - MINFREQ)   //最大扫宽
#define MINCFSTEP       0                     //最小频率步进
#define MAXCFSTEP       MAXSPAN               //最大频率步进



#define FREQ_START_HH_BAND1   8e9
#define FREQ_START_HH_BAND2		11e9
#define FREQ_START_HH_BAND3		14e9
#define FREQ_START_HH_BAND4		16e9

#define RFFREQOFFSET    0 //  15e-3           //频率偏移

#define MINDEMODFREQ    10e6                  //最小解调载波频率
#define MAXDEMODFREQ    3e9                   //最大解调载波频率
#define MAXDEMODCIC     10000                 //3e6
#define MINDEMODCIC     10                    //3kHz
#define PI              3.1415926536          //圆周率

#define MINSWEEPTIME    10                    //最小扫描时间（自动）ms
#define MAXSWEEPTIME    3000e3                //最大扫描时间  ms
#define MINSWEEPPOINTS  201                   //最小扫描点数
#define MAXSWEEPPOINTS  1601                  //最大扫描点数
#define MAXZCSEGS       20480                 //最大直采段数

#define MINREFLEVELDBM  -110.0                //最小参考电平
#define MAXREFLEVELDBM  20.0                  //最大参考电平
#define MINNETWORKREF   -200                  //最小跟踪源网络测量参考
#define MAXNETWORKREF   200                   //最大跟踪源网络测量参考
#define MINATT          0                     //衰减器最小值
#define MAXATT          31                    //衰减器最大值
#define MINSCALEDIV     1                     //最小参考刻度
#define MAXSCALEDIV     255                   //最大参考刻度
#define MINREFOFFSET    0                     //最小参考偏置
#define MAXREFOFFSET    120                   //最大参考偏置
#define MAXIF           30                    //最大增益
#define MINIF           0                     //最小增益

#define MINBWAVERAGE    1                     //最小视频平均次数
#define MAXBWAVERAGE    128                   //最大视频平均次数

#define COLORCOUNT      48                    //色板数目
#define USERCOUNT       10                    //用户数目

#define MAXDATASIZE     1601//1001                  //数据最大长度
#define MINDATASIZE     101                   //数据最小长度
#define TRACECOUNT      5                     //迹线数目
#define MARKERCOUNT     5                     //频标数目

#define MINPRINTNUMS    1                     //最小打印份数
#define MAXPRINTNUMS    5                     //最大打印份数

#define MINNDB          1.0                   //最小NDB
#define MAXNDB          60.0                  //最大NDB

#define MINADJCOUNT     1                     //最小邻道数目
#define MAXADJCOUNT     3                     //最大邻道数目
#define MINPOWERPERCENT 10.0                  //最小占用带宽百分比
#define MAXPOWERPERCENT 99.90                 //最大占用带宽百分比

#define TUNEMINPOWER    -80                   //自动搜索最小信号
#define TUNEBD1START    1e6                   //自动搜索波段1起始频率
#define TUNEBD1STOP     30e6                  //自动搜索波段1终止频率
#define TUNEBD2START    TUNEBD1STOP           //自动搜索波段2起始频率
#define TUNEBD2STOP     MAXFREQ               //自动搜索波段2终止频率
#define TUNEBD2SPAN     20e6                  //自动搜索波段2扫宽
#define TUNESPAN        10e6                  //自动搜索扫宽

#define MINBACKLIGHT    0                     //最小背光
#define MAXBACKLIGHT    100                   //最大背光

#define MINSOUND        0                     //最小音量
#define MAXSOUND        100                   //最大音量

#define MINTEMPERATURE  0.1                   //最小温度
#define MAXTEMPERATURE  90                    //最大温度

#define MAXLOGCOUNT     9                     //最大日志记录数

#define RESP9KHZ        26.3                  //9kHz频响数据
#define RESP20KHZ       18.5                  //20kHz频响数据

#define MINTRACKGENPOWER -30                  //跟踪源最小输出功率
#define MAXTRACKGENPOWER 0                    //跟踪源最大输出功率

#define MINDISCSCALEDIV  0.05                 //最小鉴频刻度
#define MAXDISCSCALEDIV  1.0                  //最大鉴频刻度
#define MINDISCTIME      1000000000.0         //最小鉴频扫描时间
#define MAXDISCTIME      6020000000.0         //最大鉴频扫描时间
#define MINDISCDCOFFSET  -5.0                 //最小直流偏置
#define MAXDISCDCOFFSET  5.0                  //最大直流偏置

#define DEMODFIRN          41

#define RAMDATASIZE			1601//801

#define MINTRACKFREQ       10e3              //最小标配跟踪源频率
#define MAXTRACKFREQ       1.5e9              //最大标配跟踪源频率
#define MINPRETRACKFREQ    10e3              //最小标配跟踪源频率(前放)
#define MAXPRETRACKFREQ    1.5e9              //最大标配跟踪源频率(前放)

#define MAXPASSFAILROWS        200            //PASS-FAIL最大行数
#define MINPASSFAILROWS        0              //PASS-FAIL最小行数
#define PASSFAILCOUNTPERPAGE   10             //PASS-FAIL每页显示行数

#define VIDEOTRIGPOWERMIN      -120           //视频触发下限功率

#define POWERMETER_FREQ_MAX		18e9						//USB功率计最大频率
#define POWERMETER_FREQ_MIN   10e6					//USB功率计最小频率

static double DEMODFIRH[DEMODFIRN] =          //解调滤波系数
{
  0.00035793757873924746, 0.00059956579206322505, 0.00097553336617692873, 0.0015427406678363408,
  0.0023725218267425939, 0.0035495794006802821, 0.0051682757956926133, 0.0073256301829015304,
  0.010110750756190603, 0.013591052640795675, 0.017796413462648295, 0.02270326681563356,
  0.028221328852196845, 0.034185967938133638, 0.040358967446402508, 0.046439503954746733,
  0.052085629939415144, 0.056944649252285151, 0.060688886430672356, 0.063051919365662831,
  0.063859757068767731, 0.063051919365662831, 0.060688886430672356, 0.056944649252285151,
  0.052085629939415144, 0.046439503954746733, 0.040358967446402508, 0.034185967938133638,
  0.028221328852196845, 0.02270326681563356, 0.017796413462648295, 0.013591052640795675,
  0.010110750756190603, 0.0073256301829015304, 0.0051682757956926133, 0.0035495794006802821,
  0.0023725218267425939, 0.0015427406678363408, 0.00097553336617692873, 0.00059956579206322505,
  0.00035793757873924746
};

static unsigned long FREQCOUNTBW[] = {1, 10, 100, 1000};
static unsigned long long LOGFREQLIST[] = {100,200,300,400,500,600,700,800,900,\
																				1e3, 2e3, 3e3, 4e3, 5e3, 6e3, 7e3, 8e3, 9e3,\
		                                   10e3, 20e3, 30e3, 40e3, 50e3, 60e3, 70e3, 80e3, 90e3,\
		                                   100e3, 200e3, 300e3, 400e3, 500e3, 600e3, 700e3, 800e3, 900e3,\
		                                   1e6, 2e6, 3e6, 4e6, 5e6, 6e6, 7e6, 8e6, 9e6,\
		                                   10e6, 20e6, 30e6, 40e6, 50e6, 60e6, 70e6, 80e6, 90e6,\
		                                   100e6, 200e6, 300e6, 400e6, 500e6, 600e6, 700e6, 800e6, 900e6,\
                                           1e9,2e9,3e9};

//*****直采通道FFT抽取*****
//直采通道补偿
static float ZC_COMPENSTATE_VALUE[1][2048] = {
  //RBW = 100Hz
  {19.611, 19.569, 19.526, 19.484, 19.442, 19.4, 19.358, 19.316, 19.274, 19.232, 19.19, 19.148, 19.107, 19.065, 19.023, 18.982, 18.94, 18.899, 18.858, 18.816, 18.775, 18.734, 18.693, 18.652, 18.611, 18.57, 18.529, 18.488, 18.447, 18.407, 18.366, 18.325, 18.285, 18.244, 18.204, 18.164, 18.123, 18.083, 18.043, 18.003, 17.963, 17.923, 17.883, 17.843, 17.803, 17.763, 17.723, 17.684, 17.644, 17.605, 17.565, 17.526, 17.486, 17.447, 17.408, 17.368, 17.329, 17.29, 17.251, 17.212, 17.173, 17.134, 17.096, 17.057, 17.018, 16.979, 16.941, 16.902, 16.864, 16.825, 16.787, 16.749, 16.71, 16.672, 16.634, 16.596, 16.558, 16.52, 16.482, 16.444, 16.406, 16.369, 16.331, 16.293, 16.256, 16.218, 16.181, 16.143, 16.106, 16.068, 16.031, 15.994, 15.957, 15.92, 15.883, 15.846, 15.809, 15.772, 15.735, 15.698, 15.662, 15.625, 15.588, 15.552, 15.515, 15.479, 15.442, 15.406, 15.37, 15.333, 15.297, 15.261, 15.225, 15.189, 15.153, 15.117, 15.081, 15.045, 15.01, 14.974, 14.938, 14.903, 14.867, 14.832, 14.796, 14.761, 14.725, 14.69, 14.655, 14.62, 14.584, 14.549, 14.514, 14.479, 14.444, 14.41, 14.375, 14.34, 14.305, 14.271, 14.236, 14.201, 14.167, 14.132, 14.098, 14.064, 14.029, 13.995, 13.961, 13.927, 13.893, 13.858, 13.824, 13.791, 13.757, 13.723, 13.689, 13.655, 13.621, 13.588, 13.554, 13.521, 13.487, 13.454, 13.42, 13.387, 13.354, 13.32, 13.287, 13.254, 13.221, 13.188, 13.155, 13.122, 13.089, 13.056, 13.023, 12.991, 12.958, 12.925, 12.893, 12.86, 12.828, 12.795, 12.763, 12.73, 12.698, 12.666, 12.634, 12.602, 12.569, 12.537, 12.505, 12.473, 12.441, 12.41, 12.378, 12.346, 12.314, 12.283, 12.251, 12.219, 12.188, 12.156, 12.125, 12.094, 12.062, 12.031, 12, 11.969, 11.937, 11.906, 11.875, 11.844, 11.813, 11.782, 11.752, 11.721, 11.69, 11.659, 11.629, 11.598, 11.567, 11.537, 11.506, 11.476, 11.446, 11.415, 11.385, 11.355, 11.325, 11.294, 11.264, 11.234, 11.204, 11.174, 11.144, 11.115, 11.085, 11.055, 11.025, 10.996, 10.966, 10.936, 10.907, 10.877, 10.848, 10.819, 10.789, 10.76, 10.731, 10.701, 10.672, 10.643, 10.614, 10.585, 10.556, 10.527, 10.498, 10.469, 10.441, 10.412, 10.383, 10.355, 10.326, 10.297, 10.269, 10.24, 10.212, 10.184, 10.155, 10.127, 10.099, 10.071, 10.042, 10.014, 9.9862, 9.9582, 9.9303, 9.9023, 9.8745, 9.8466, 9.8188, 9.7911, 9.7634, 9.7357, 9.7081, 9.6806, 9.653, 9.6256, 9.5981, 9.5707, 9.5434, 9.5161, 9.4889, 9.4617, 9.4345, 9.4074, 9.3803, 9.3533, 9.3263, 9.2993, 9.2725, 9.2456, 9.2188, 9.192, 9.1653, 9.1386, 9.112, 9.0854, 9.0589, 9.0324, 9.0059, 8.9795, 8.9532, 8.9268, 8.9006, 8.8743, 8.8481, 8.822, 8.7959, 8.7698, 8.7438, 8.7179, 8.6919, 8.6661, 8.6402, 8.6144, 8.5887, 8.563, 8.5373, 8.5117, 8.4861, 8.4606, 8.4351, 8.4096, 8.3842, 8.3588, 8.3335, 8.3083, 8.283, 8.2578, 8.2327, 8.2076, 8.1825, 8.1575, 8.1325, 8.1076, 8.0827, 8.0579, 8.0331, 8.0083, 7.9836, 7.9589, 7.9343, 7.9097, 7.8851, 7.8606, 7.8362, 7.8118, 7.7874, 7.7631, 7.7388, 7.7145, 7.6903, 7.6661, 7.642, 7.6179, 7.5939, 7.5699, 7.546, 7.522, 7.4982, 7.4744, 7.4506, 7.4268, 7.4031, 7.3795, 7.3559, 7.3323, 7.3087, 7.2853, 7.2618, 7.2384, 7.215, 7.1917, 7.1684, 7.1452, 7.122, 7.0988, 7.0757, 7.0527, 7.0296, 7.0066, 6.9837, 6.9608, 6.9379, 6.9151, 6.8923, 6.8696, 6.8469, 6.8242, 6.8016, 6.779, 6.7565, 6.734, 6.7115, 6.6891, 6.6668, 6.6444, 6.6222, 6.5999, 6.5777, 6.5555, 6.5334, 6.5113, 6.4893, 6.4673, 6.4453, 6.4234, 6.4015, 6.3797, 6.3579, 6.3362, 6.3144, 6.2928, 6.2711, 6.2495, 6.228, 6.2065, 6.185, 6.1636, 6.1422, 6.1208, 6.0995, 6.0783, 6.057, 6.0358, 6.0147, 5.9936, 5.9725, 5.9515, 5.9305, 5.9096, 5.8887, 5.8678, 5.847, 5.8262, 5.8055, 5.7847, 5.7641, 5.7435, 5.7229, 5.7023, 5.6818, 5.6614, 5.6409, 5.6206, 5.6002, 5.5799, 5.5596, 5.5394, 5.5192, 5.4991, 5.479, 5.4589, 5.4389, 5.4189, 5.399, 5.3791, 5.3592, 5.3394, 5.3196, 5.2998, 5.2801, 5.2605, 5.2408, 5.2212, 5.2017, 5.1822, 5.1627, 5.1433, 5.1239, 5.1045, 5.0852, 5.0659, 5.0467, 5.0275, 5.0083, 4.9892, 4.9701, 4.9511, 4.9321, 4.9131, 4.8942, 4.8753, 4.8565, 4.8377, 4.8189, 4.8002, 4.7815, 4.7629, 4.7443, 4.7257, 4.7071, 4.6887, 4.6702, 4.6518, 4.6334, 4.6151, 4.5968, 4.5785, 4.5603, 4.5421, 4.524, 4.5059, 4.4878, 4.4698, 4.4518, 4.4338, 4.4159, 4.398, 4.3802, 4.3624, 4.3446, 4.3269, 4.3092, 4.2916, 4.274, 4.2564, 4.2389, 4.2214, 4.204, 4.1865, 4.1692, 4.1518, 4.1345, 4.1173, 4.1001, 4.0829, 4.0657, 4.0486, 4.0316, 4.0145, 3.9975, 3.9806, 3.9637, 3.9468, 3.9299, 3.9131, 3.8964, 3.8796, 3.863, 3.8463, 3.8297, 3.8131, 3.7966, 3.7801, 3.7636, 3.7472, 3.7308, 3.7145, 3.6982, 3.6819, 3.6657, 3.6495, 3.6333, 3.6172, 3.6011, 3.585, 3.569, 3.5531, 3.5371, 3.5212, 3.5054, 3.4896, 3.4738, 3.458, 3.4423, 3.4267, 3.411, 3.3954, 3.3799, 3.3644, 3.3489, 3.3334, 3.318, 3.3027, 3.2873, 3.272, 3.2568, 3.2415, 3.2264, 3.2112, 3.1961, 3.181, 3.166, 3.151, 3.136, 3.1211, 3.1062, 3.0914, 3.0766, 3.0618, 3.0471, 3.0324, 3.0177, 3.0031, 2.9885, 2.9739, 2.9594, 2.9449, 2.9305, 2.9161, 2.9017, 2.8874, 2.8731, 2.8588, 2.8446, 2.8304, 2.8163, 2.8022, 2.7881, 2.7741, 2.7601, 2.7461, 2.7322, 2.7183, 2.7045, 2.6906, 2.6769, 2.6631, 2.6494, 2.6358, 2.6221, 2.6085, 2.595, 2.5815, 2.568, 2.5545, 2.5411, 2.5277, 2.5144, 2.5011, 2.4878, 2.4746, 2.4614, 2.4482, 2.4351, 2.422, 2.409, 2.396, 2.383, 2.3701, 2.3572, 2.3443, 2.3315, 2.3187, 2.3059, 2.2932, 2.2805, 2.2679, 2.2553, 2.2427, 2.2302, 2.2177, 2.2052, 2.1928, 2.1804, 2.168, 2.1557, 2.1434, 2.1312, 2.119, 2.1068, 2.0946, 2.0825, 2.0705, 2.0584, 2.0464, 2.0345, 2.0226, 2.0107, 1.9988, 1.987, 1.9752, 1.9635, 1.9518, 1.9401, 1.9285, 1.9169, 1.9053, 1.8938, 1.8823, 1.8708, 1.8594, 1.848, 1.8367, 1.8254, 1.8141, 1.8029, 1.7917, 1.7805, 1.7694, 1.7583, 1.7472, 1.7362, 1.7252, 1.7142, 1.7033, 1.6924, 1.6816, 1.6708, 1.66, 1.6492, 1.6385, 1.6279, 1.6172, 1.6066, 1.5961, 1.5856, 1.5751, 1.5646, 1.5542, 1.5438, 1.5335, 1.5231, 1.5129, 1.5026, 1.4924, 1.4822, 1.4721, 1.462, 1.4519, 1.4419, 1.4319, 1.422, 1.412, 1.4022, 1.3923, 1.3825, 1.3727, 1.363, 1.3533, 1.3436, 1.3339, 1.3243, 1.3148, 1.3052, 1.2957, 1.2863, 1.2768, 1.2675, 1.2581, 1.2488, 1.2395, 1.2302, 1.221, 1.2118, 1.2027, 1.1936, 1.1845, 1.1755, 1.1665, 1.1575, 1.1486, 1.1397, 1.1308, 1.122, 1.1132, 1.1044, 1.0957, 1.087, 1.0784, 1.0697, 1.0612, 1.0526, 1.0441, 1.0356, 1.0272, 1.0188, 1.0104, 1.0021, 0.99375, 0.98549, 0.97725, 0.96906, 0.96089, 0.95277, 0.94467, 0.93662, 0.92859, 0.92061, 0.91265, 0.90474, 0.89685, 0.88901, 0.88119, 0.87341, 0.86567, 0.85796, 0.85029, 0.84265, 0.83505, 0.82748, 0.81994, 0.81245, 0.80498, 0.79755, 0.79016, 0.7828, 0.77547, 0.76818, 0.76093, 0.75371, 0.74652, 0.73937, 0.73225, 0.72517, 0.71812, 0.71111, 0.70413, 0.69719, 0.69028, 0.68341, 0.67657, 0.66977, 0.663, 0.65627, 0.64957, 0.6429, 0.63627, 0.62968, 0.62311, 0.61659, 0.6101, 0.60364, 0.59722, 0.59083, 0.58448, 0.57816, 0.57187, 0.56563, 0.55941, 0.55323, 0.54709, 0.54097, 0.5349, 0.52886, 0.52285, 0.51688, 0.51094, 0.50504, 0.49917, 0.49333, 0.48753, 0.48177, 0.47604, 0.47034, 0.46468, 0.45905, 0.45346, 0.4479, 0.44238, 0.43689, 0.43143, 0.42601, 0.42062, 0.41527, 0.40996, 0.40467, 0.39943, 0.39421, 0.38903, 0.38389, 0.37878, 0.3737, 0.36866, 0.36365, 0.35868, 0.35374, 0.34884, 0.34397, 0.33913, 0.33433, 0.32957, 0.32483, 0.32014, 0.31547, 0.31084, 0.30625, 0.30169, 0.29716, 0.29267, 0.28822, 0.28379, 0.2794, 0.27505, 0.27073, 0.26644, 0.26219, 0.25798, 0.25379, 0.24965, 0.24553, 0.24145, 0.23741, 0.2334, 0.22942, 0.22548, 0.22157, 0.21769, 0.21385, 0.21005, 0.20628, 0.20254, 0.19884, 0.19517, 0.19154, 0.18794, 0.18437, 0.18084, 0.17734, 0.17388, 0.17045, 0.16705, 0.16369, 0.16037, 0.15708, 0.15382, 0.1506, 0.14741, 0.14425, 0.14113, 0.13804, 0.13499, 0.13197, 0.12899, 0.12604, 0.12312, 0.12024, 0.11739, 0.11458, 0.1118, 0.10906, 0.10635, 0.10367, 0.10103, 0.098419, 0.095845, 0.093305, 0.090799, 0.088327, 0.08589, 0.083487, 0.081117, 0.078782, 0.076481, 0.074215, 0.071982, 0.069784, 0.067619, 0.065489, 0.063393, 0.061331, 0.059303, 0.057309, 0.05535, 0.053424, 0.051533, 0.049675, 0.047852, 0.046063, 0.044308, 0.042587, 0.0409, 0.039248, 0.037629, 0.036045, 0.034494, 0.032978, 0.031496, 0.030048, 0.028634, 0.027254, 0.025908, 0.024596, 0.023319, 0.022075, 0.020866, 0.01969, 0.018549, 0.017442, 0.016369, 0.015329, 0.014324, 0.013354, 0.012417, 0.011514, 0.010645, 0.0098106, 0.0090101, 0.0082436, 0.0075112, 0.0068128, 0.0061486, 0.0055184, 0.0049222, 0.0043602, 0.0038322, 0.0033382, 0.0028784, 0.0024526, 0.0020608, 0.0017032, 0.0013796, 0.00109, 0.00083455, 0.00061314, 0.00042579, 0.0002725, 0.00015328, 6.8126E-5, 1.7032E-5, 0, 1.7032E-5, 6.8126E-5, 0.00015328, 0.0002725, 0.00042579, 0.00061314, 0.00083455, 0.00109, 0.0013796, 0.0017032, 0.0020608, 0.0024526, 0.0028784, 0.0033382, 0.0038322, 0.0043602, 0.0049222, 0.0055184, 0.0061486, 0.0068128, 0.0075112, 0.0082436, 0.0090101, 0.0098106, 0.010645, 0.011514, 0.012417, 0.013354, 0.014324, 0.015329, 0.016369, 0.017442, 0.018549, 0.01969, 0.020866, 0.022075, 0.023319, 0.024596, 0.025908, 0.027254, 0.028634, 0.030048, 0.031496, 0.032978, 0.034494, 0.036045, 0.037629, 0.039248, 0.0409, 0.042587, 0.044308, 0.046063, 0.047852, 0.049675, 0.051533, 0.053424, 0.05535, 0.057309, 0.059303, 0.061331, 0.063393, 0.065489, 0.067619, 0.069784, 0.071982, 0.074215, 0.076481, 0.078782, 0.081117, 0.083487, 0.08589, 0.088327, 0.090799, 0.093305, 0.095845, 0.098419, 0.10103, 0.10367, 0.10635, 0.10906, 0.1118, 0.11458, 0.11739, 0.12024, 0.12312, 0.12604, 0.12899, 0.13197, 0.13499, 0.13804, 0.14113, 0.14425, 0.14741, 0.1506, 0.15382, 0.15708, 0.16037, 0.16369, 0.16705, 0.17045, 0.17388, 0.17734, 0.18084, 0.18437, 0.18794, 0.19154, 0.19517, 0.19884, 0.20254, 0.20628, 0.21005, 0.21385, 0.21769, 0.22157, 0.22548, 0.22942, 0.2334, 0.23741, 0.24145, 0.24553, 0.24965, 0.25379, 0.25798, 0.26219, 0.26644, 0.27073, 0.27505, 0.2794, 0.28379, 0.28822, 0.29267, 0.29716, 0.30169, 0.30625, 0.31084, 0.31547, 0.32014, 0.32483, 0.32957, 0.33433, 0.33913, 0.34397, 0.34884, 0.35374, 0.35868, 0.36365, 0.36866, 0.3737, 0.37878, 0.38389, 0.38903, 0.39421, 0.39943, 0.40467, 0.40996, 0.41527, 0.42062, 0.42601, 0.43143, 0.43689, 0.44238, 0.4479, 0.45346, 0.45905, 0.46468, 0.47034, 0.47604, 0.48177, 0.48753, 0.49333, 0.49917, 0.50504, 0.51094, 0.51688, 0.52285, 0.52886, 0.5349, 0.54097, 0.54709, 0.55323, 0.55941, 0.56563, 0.57187, 0.57816, 0.58448, 0.59083, 0.59722, 0.60364, 0.6101, 0.61659, 0.62311, 0.62968, 0.63627, 0.6429, 0.64957, 0.65627, 0.663, 0.66977, 0.67657, 0.68341, 0.69028, 0.69719, 0.70413, 0.71111, 0.71812, 0.72517, 0.73225, 0.73937, 0.74652, 0.75371, 0.76093, 0.76818, 0.77547, 0.7828, 0.79016, 0.79755, 0.80498, 0.81245, 0.81994, 0.82748, 0.83505, 0.84265, 0.85029, 0.85796, 0.86567, 0.87341, 0.88119, 0.88901, 0.89685, 0.90474, 0.91265, 0.92061, 0.92859, 0.93662, 0.94467, 0.95277, 0.96089, 0.96906, 0.97725, 0.98549, 0.99375, 1.0021, 1.0104, 1.0188, 1.0272, 1.0356, 1.0441, 1.0526, 1.0612, 1.0697, 1.0784, 1.087, 1.0957, 1.1044, 1.1132, 1.122, 1.1308, 1.1397, 1.1486, 1.1575, 1.1665, 1.1755, 1.1845, 1.1936, 1.2027, 1.2118, 1.221, 1.2302, 1.2395, 1.2488, 1.2581, 1.2675, 1.2768, 1.2863, 1.2957, 1.3052, 1.3148, 1.3243, 1.3339, 1.3436, 1.3533, 1.363, 1.3727, 1.3825, 1.3923, 1.4022, 1.412, 1.422, 1.4319, 1.4419, 1.4519, 1.462, 1.4721, 1.4822, 1.4924, 1.5026, 1.5129, 1.5231, 1.5335, 1.5438, 1.5542, 1.5646, 1.5751, 1.5856, 1.5961, 1.6066, 1.6172, 1.6279, 1.6385, 1.6492, 1.66, 1.6708, 1.6816, 1.6924, 1.7033, 1.7142, 1.7252, 1.7362, 1.7472, 1.7583, 1.7694, 1.7805, 1.7917, 1.8029, 1.8141, 1.8254, 1.8367, 1.848, 1.8594, 1.8708, 1.8823, 1.8938, 1.9053, 1.9169, 1.9285, 1.9401, 1.9518, 1.9635, 1.9752, 1.987, 1.9988, 2.0107, 2.0226, 2.0345, 2.0464, 2.0584, 2.0705, 2.0825, 2.0946, 2.1068, 2.119, 2.1312, 2.1434, 2.1557, 2.168, 2.1804, 2.1928, 2.2052, 2.2177, 2.2302, 2.2427, 2.2553, 2.2679, 2.2805, 2.2932, 2.3059, 2.3187, 2.3315, 2.3443, 2.3572, 2.3701, 2.383, 2.396, 2.409, 2.422, 2.4351, 2.4482, 2.4614, 2.4746, 2.4878, 2.5011, 2.5144, 2.5277, 2.5411, 2.5545, 2.568, 2.5815, 2.595, 2.6085, 2.6221, 2.6358, 2.6494, 2.6631, 2.6769, 2.6906, 2.7045, 2.7183, 2.7322, 2.7461, 2.7601, 2.7741, 2.7881, 2.8022, 2.8163, 2.8304, 2.8446, 2.8588, 2.8731, 2.8874, 2.9017, 2.9161, 2.9305, 2.9449, 2.9594, 2.9739, 2.9885, 3.0031, 3.0177, 3.0324, 3.0471, 3.0618, 3.0766, 3.0914, 3.1062, 3.1211, 3.136, 3.151, 3.166, 3.181, 3.1961, 3.2112, 3.2264, 3.2415, 3.2568, 3.272, 3.2873, 3.3027, 3.318, 3.3334, 3.3489, 3.3644, 3.3799, 3.3954, 3.411, 3.4267, 3.4423, 3.458, 3.4738, 3.4896, 3.5054, 3.5212, 3.5371, 3.5531, 3.569, 3.585, 3.6011, 3.6172, 3.6333, 3.6495, 3.6657, 3.6819, 3.6982, 3.7145, 3.7308, 3.7472, 3.7636, 3.7801, 3.7966, 3.8131, 3.8297, 3.8463, 3.863, 3.8796, 3.8964, 3.9131, 3.9299, 3.9468, 3.9637, 3.9806, 3.9975, 4.0145, 4.0316, 4.0486, 4.0657, 4.0829, 4.1001, 4.1173, 4.1345, 4.1518, 4.1692, 4.1865, 4.204, 4.2214, 4.2389, 4.2564, 4.274, 4.2916, 4.3092, 4.3269, 4.3446, 4.3624, 4.3802, 4.398, 4.4159, 4.4338, 4.4518, 4.4698, 4.4878, 4.5059, 4.524, 4.5421, 4.5603, 4.5785, 4.5968, 4.6151, 4.6334, 4.6518, 4.6702, 4.6887, 4.7071, 4.7257, 4.7443, 4.7629, 4.7815, 4.8002, 4.8189, 4.8377, 4.8565, 4.8753, 4.8942, 4.9131, 4.9321, 4.9511, 4.9701, 4.9892, 5.0083, 5.0275, 5.0467, 5.0659, 5.0852, 5.1045, 5.1239, 5.1433, 5.1627, 5.1822, 5.2017, 5.2212, 5.2408, 5.2605, 5.2801, 5.2998, 5.3196, 5.3394, 5.3592, 5.3791, 5.399, 5.4189, 5.4389, 5.4589, 5.479, 5.4991, 5.5192, 5.5394, 5.5596, 5.5799, 5.6002, 5.6206, 5.6409, 5.6614, 5.6818, 5.7023, 5.7229, 5.7435, 5.7641, 5.7847, 5.8055, 5.8262, 5.847, 5.8678, 5.8887, 5.9096, 5.9305, 5.9515, 5.9725, 5.9936, 6.0147, 6.0358, 6.057, 6.0783, 6.0995, 6.1208, 6.1422, 6.1636, 6.185, 6.2065, 6.228, 6.2495, 6.2711, 6.2928, 6.3144, 6.3362, 6.3579, 6.3797, 6.4015, 6.4234, 6.4453, 6.4673, 6.4893, 6.5113, 6.5334, 6.5555, 6.5777, 6.5999, 6.6222, 6.6444, 6.6668, 6.6891, 6.7115, 6.734, 6.7565, 6.779, 6.8016, 6.8242, 6.8469, 6.8696, 6.8923, 6.9151, 6.9379, 6.9608, 6.9837, 7.0066, 7.0296, 7.0527, 7.0757, 7.0988, 7.122, 7.1452, 7.1684, 7.1917, 7.215, 7.2384, 7.2618, 7.2853, 7.3087, 7.3323, 7.3559, 7.3795, 7.4031, 7.4268, 7.4506, 7.4744, 7.4982, 7.522, 7.546, 7.5699, 7.5939, 7.6179, 7.642, 7.6661, 7.6903, 7.7145, 7.7388, 7.7631, 7.7874, 7.8118, 7.8362, 7.8606, 7.8851, 7.9097, 7.9343, 7.9589, 7.9836, 8.0083, 8.0331, 8.0579, 8.0827, 8.1076, 8.1325, 8.1575, 8.1825, 8.2076, 8.2327, 8.2578, 8.283, 8.3083, 8.3335, 8.3588, 8.3842, 8.4096, 8.4351, 8.4606, 8.4861, 8.5117, 8.5373, 8.563, 8.5887, 8.6144, 8.6402, 8.6661, 8.6919, 8.7179, 8.7438, 8.7698, 8.7959, 8.822, 8.8481, 8.8743, 8.9006, 8.9268, 8.9532, 8.9795, 9.0059, 9.0324, 9.0589, 9.0854, 9.112, 9.1386, 9.1653, 9.192, 9.2188, 9.2456, 9.2725, 9.2993, 9.3263, 9.3533, 9.3803, 9.4074, 9.4345, 9.4617, 9.4889, 9.5161, 9.5434, 9.5707, 9.5981, 9.6256, 9.653, 9.6806, 9.7081, 9.7357, 9.7634, 9.7911, 9.8188, 9.8466, 9.8745, 9.9023, 9.9303, 9.9582, 9.9862, 10.014, 10.042, 10.071, 10.099, 10.127, 10.155, 10.184, 10.212, 10.24, 10.269, 10.297, 10.326, 10.355, 10.383, 10.412, 10.441, 10.469, 10.498, 10.527, 10.556, 10.585, 10.614, 10.643, 10.672, 10.701, 10.731, 10.76, 10.789, 10.819, 10.848, 10.877, 10.907, 10.936, 10.966, 10.996, 11.025, 11.055, 11.085, 11.115, 11.144, 11.174, 11.204, 11.234, 11.264, 11.294, 11.325, 11.355, 11.385, 11.415, 11.446, 11.476, 11.506, 11.537, 11.567, 11.598, 11.629, 11.659, 11.69, 11.721, 11.752, 11.782, 11.813, 11.844, 11.875, 11.906, 11.937, 11.969, 12, 12.031, 12.062, 12.094, 12.125, 12.156, 12.188, 12.219, 12.251, 12.283, 12.314, 12.346, 12.378, 12.41, 12.441, 12.473, 12.505, 12.537, 12.569, 12.602, 12.634, 12.666, 12.698, 12.73, 12.763, 12.795, 12.828, 12.86, 12.893, 12.925, 12.958, 12.991, 13.023, 13.056, 13.089, 13.122, 13.155, 13.188, 13.221, 13.254, 13.287, 13.32, 13.354, 13.387, 13.42, 13.454, 13.487, 13.521, 13.554, 13.588, 13.621, 13.655, 13.689, 13.723, 13.757, 13.791, 13.824, 13.858, 13.893, 13.927, 13.961, 13.995, 14.029, 14.064, 14.098, 14.132, 14.167, 14.201, 14.236, 14.271, 14.305, 14.34, 14.375, 14.41, 14.444, 14.479, 14.514, 14.549, 14.584, 14.62, 14.655, 14.69, 14.725, 14.761, 14.796, 14.832, 14.867, 14.903, 14.938, 14.974, 15.01, 15.045, 15.081, 15.117, 15.153, 15.189, 15.225, 15.261, 15.297, 15.333, 15.37, 15.406, 15.442, 15.479, 15.515, 15.552, 15.588, 15.625, 15.662, 15.698, 15.735, 15.772, 15.809, 15.846, 15.883, 15.92, 15.957, 15.994, 16.031, 16.068, 16.106, 16.143, 16.181, 16.218, 16.256, 16.293, 16.331, 16.369, 16.406, 16.444, 16.482, 16.52, 16.558, 16.596, 16.634, 16.672, 16.71, 16.749, 16.787, 16.825, 16.864, 16.902, 16.941, 16.979, 17.018, 17.057, 17.096, 17.134, 17.173, 17.212, 17.251, 17.29, 17.329, 17.368, 17.408, 17.447, 17.486, 17.526, 17.565, 17.605, 17.644, 17.684, 17.723, 17.763, 17.803, 17.843, 17.883, 17.923, 17.963, 18.003, 18.043, 18.083, 18.123, 18.164, 18.204, 18.244, 18.285, 18.325, 18.366, 18.407, 18.447, 18.488, 18.529, 18.57, 18.611, 18.652, 18.693, 18.734, 18.775, 18.816, 18.858, 18.899, 18.94, 18.982, 19.023, 19.065, 19.107, 19.148, 19.19, 19.232, 19.274, 19.316, 19.358, 19.4, 19.442, 19.484, 19.526, 19.569},
};
//直采通道RBW                          10kHz  5kHz  2kHz  1kHz	500Hz  200Hz  100Hz  50Hz  20Hz  10Hz  5Hz  2Hz  1Hz
static unsigned long RAMCIC_ZC_HZ[] = {10e3,  5e3,  2e3,  1e3,  500,   200,   100,   50,   20,   10,   5,   2,   1};
//直采通道CIC抽取率
static unsigned long RAMCIC_ZC[]    = {2,     3,    10,   15,   30,    75,    150,   300,  750,  1500, 3000,7500,15000};
//static unsigned long RAMCIC_ZC[]    = {2,     3,    7,    15,   29,    73,    146,   293,  732,  1465, 2930,7324,14648};
//************************

/*
static unsigned long RAMCIC_ZC[] = {
  //3MHz,  1MHz,  500kHz,  400kHz,  300kHz,  200kHz,  100kHz,  90kHz,  80kHz,  70kHz
  2,       3,     4,       5,       6,       7,       8,       9,      10,     11,
  //60kHz, 50kHz, 40kHz,   30kHz,   20kHz,   10kHz,   9kHz,    8kHz,   7kHz,   6kHz
  12,      13,    14,      15,      16,      20,      22,      24,     26,     28,
  //5kHz,  4kHz,  3kHz,    2kHz,    1kHz,    900Hz,   800Hz,   700Hz,   600Hz,  500Hz
  30,      32,    34,      36,      40,      100,     110,     120,     130,    140,
  //400Hz, 300Hz, 200Hz,   100Hz,   90Hz,    80Hz,    70Hz,    60Hz,    50Hz,   40Hz
  150,     160,   180,     200,     1000,    2000,    3000,    4000,    5000,   6000,
  //30Hz,  20Hz,  10Hz,    9Hz,     8Hz,     7Hz,     6Hz,     5Hz,     4Hz,    3Hz
  7000,    8000,  10000,   11000,   12000,   13000,   14000,   15000,   16000,  17000,
  //2Hz,   1Hz
  18000,   20000
  //2, 3, 4, 10, 21, 31, 61, 67, 76, 86, 101, 121, 151, 201, 301, 64, 72, 81, 93, 108, 130, 162, 216, 325,  648, 16 * 2, 18 * 2,  20 * 2,  24 * 2,  29 * 2,  36 * 2,  48 * 2, 73 * 2, 146 * 2, 162 * 2, 183 * 2, 209 * 2,  244 * 2,  292 * 2,   366 * 2,  488 * 2,  732 * 2,  1464 * 2, 1627 * 2, 1831 * 2, 2092 * 2, 2441 * 2, 2929 * 2, 3662 * 2, 4882 * 2, 7324 * 2, 14648 * 2};
};
*/

static unsigned long RAMCIC[] = {4, 12, 13, 16, 21, 31, 61, 67, 76, 86, 101, 121, 151, 201, 301, 64, 72, 81, 93, 108, 130, 162, 216, 325,  648, 16 * 2, 18 * 2,  20 * 2,  24 * 2,  29 * 2,  36 * 2,  48 * 2, 73 * 2, 146 * 2, 162 * 2, 183 * 2, 209 * 2,  244 * 2,  292 * 2,   366 * 2,  488 * 2,  732 * 2,  1464 * 2, 1627 * 2, 1831 * 2, 2092 * 2, 2441 * 2, 2929 * 2, 3662 * 2, 4882 * 2, 7324 * 2, 14648 * 2};
static unsigned long RAMCIC_NOFFT[] =
                                {4, 12, 13, 16, 21, 31, 61, 67, 76, 86, 101, 121, 151, 201, 301, 64, 72, 81, 93, 108, 130, 162, 216, 325,  648, 721, 94, 107, 125, 150, 187, 250, 375, 750, 833, 938, 1072, 1250, 1500, 1875, 2500, 3750, 7500, 1627 * 2, 1831 * 2, 2092 * 2, 2441 * 2, 2929 * 2, 3662 * 2, 4882 * 2, 7324 * 2, 14648 * 2};

//static unsigned long RAMCIC[] = {4, 12, 13, 16, 21, 31, 61, 67, 76, 86, 101, 121, 151, 201, 301, 64, 72, 81, 93, 108, 130, 162, 216, 325, 648, 721, 94, 107, 125, 150, 187, 250, 375, 750, 833, 938, 1072, 1250, 1500, 1875, 2500, 3750, 7500};//, 8333, 9375, 10714, 12500, 15000};
								//  0      1       2       3      4        5       6       7       8         9         10       11      12     13      14       15     16     17
static unsigned long RAMCVC[] = {0x7fff, 0x6fff, 0x5fff, 0x43ff, 0x28ff, 0x19ff, 0x0fff, 0x07ff , 0x04ff , 0x0355,  0x01ff,  0x0133, 0x00cc, 0x007f, 0x005f, 0x003f, 0x003f};
//static unsigned long VBWMINCVC[] = {0x003f, 0x0005f, 0x006c, 0x00ef, 0x01c0, 0x0365, 0x0446, 0x0570 , 0x0570 , 0x0570,  0x0570,  0x0570, 0x0570, 0x0570, 0x0570, 0x0570, 0x0570};
static unsigned long VBWMINCVC[] = {0x001f, 0x002f, 0x003f, 0x005f, 0x007f, 0x007f, 0x007f, 0x007f , 0x007f , 0x007f, 0x007f, 0x007f, 0x007f, 0x007f, 0x007f, 0x007f, 0x007f};
//static unsigned long RAMCVC[] = {0xbe, 0x92, 0x70, 0x56, 0x42, 0x32, 0x26, 0x1e , 0x17 , 0x14, 0x11, 0x0f, 0x0d, 0x0b, 0x09, 0x06, 0x03};
//static unsigned long RAMCVC[] = {0x5f, 0x49, 0x38, 0x2B, 0x21, 0x19, 0x13, 0x0f};
                                  // 0    1     2     3      4      5      6      7    8      9     10   11    12     13    14    15   16   17   18   19    20   21  22    23      24   25   26   27   28   29    30   31    32  33   34   35    36    37    38    39    40    41  42
//static unsigned long RAMCIC_HZ[] = {3e6, 1e6, 500e3, 400e3, 300e3, 200e3, 100e3, 90e3, 80e3, 70e3, 60e3, 50e3, 40e3, 30e3, 20e3, 10e3, 9e3, 8e3, 7e3, 6e3, 5e3, 4e3, 3e3,  2e3,   1e3,  900, 800, 700, 600, 500, 400, 300, 200, 100,  90,  80,   70,   60,   50,   40,   30,   20, 10} ; //, 9, 8, 7, 6, 5};
//FFT
//static unsigned long RAMCIC_HZ[] = {3e6, 1e6, 500e3, 400e3, 300e3, 200e3, 100e3, 90e3, 80e3, 70e3, 60e3, 50e3, 40e3, 30e3, 20e3, 10e3, 9e3, 8e3, 7e3, 6e3, 5e3, 4e3, 3e3,  2e3,   1e3,  900, 800, 700, 600, 500, 400, 300, 200, 100,  90,  80,   70,   60,   50,   40,   30,   20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
const static unsigned long RAMCIC_HZ[] = {5e6, 3e6,  1e6, 500e3, 300e3,  100e3, 50e3, 30e3,  10e3, 5e3, 3e3,  1e3, 500, 300,  100, 50, 30,  10};

static unsigned long EMC_BW[] = {1e6, 120e3, 100e3, 30e3, 10e3, 9e3,1e3, 200, 100, 10};


//EMI带宽抽取率
static unsigned long EMC_CIC[] = {16,  69,  82, 272,  89,   98,    885,   511,  1021, 10201};
                               // 1e6  120e3  100e3 30e3 10e3   9e3    1e3    200   100    10
//EMI 带宽修正                                              1e6   120e3 100e3  30e3   10e3   9e3   1e3    200   100   10
static double EMC_ERROR[] = {-5.48, -4.48, 0.83,  1.3,  2.28, -5.36, 1.45,  0.89, 1.32, 13.31};
//static unsigned long RAMCIC_VBWHZ[] = {3e6, 1e6, 500e3, 300e3, 100e3, 50e3, 30e3, 10e3, 5e3, 3e3, 1e3, 500, 300, 100, 50, 30, 10, 0};
//FFT
static unsigned long RAMCIC_VBWHZ[] = {3e6, 1e6, 500e3, 300e3, 100e3, 50e3, 30e3, 10e3, 5e3, 3e3, 1e3, 500, 300, 100, 50, 30, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};

static double BUCDELAY[] = {1.42, 1.6, 1.83, 2.13, 2.56, 3.2, 4.27, 6.4, 12.8, 14.22, 16, 18.33, 21.33, 25.6, 32, 42.67, 64, 128, 142.22, 160, 183.33, 213.33, 256};

                         // 0      1     2     3    4      5     6     7      8     9      10    11  12      13    14    15
static double BWRESP[] = {3.53, -1.76, 8.08, 11.4, 5.62, 6.79, 7.52, 9.47, 10.01, 10.67, 9.73, 7.9, 10.32, 9.96, 10.48, 0,\
                           // 16      17    18    19     20     21    22     23
                          -5.11, -4.2, -4.18, -4.65, -0.66, -4.2, -4.65, -4.33,\
                         //24  25   26     27    28     29    30     31     32      33    34    35      36     37     38    39     40    41       42
                          0, 1.4, -9.09, -8.9, -9.63, -5.5, -9.06, -9.63, -9.17, -9.17, -7.68, -6.81, -6.61, -7.24, -9.18, -6.8, -7.23, -6.78, -6.73, \
                           //43  44  45  46  47  48  49  50  51
                              0,   0,  0,  0,  0,  0,  0,  0,  0\
                       };
						//, -10.22, -15.43, -21.19, -27.84, -35.45};

static double BWRESP_ZC[]={
    0,          //10k 19.73	    //  0,     //10k  19.99
    -5.63,	//5k  14.16    //  -5.56,  //5k   14.43
    -3.67,       //2k  16.06    //  -3.66,  //2k   16.33
    -3.22,	 //1k 16.51   //  -3.21,  //1k   16.78
    -3.19,       //500 16.54   //  -3.18,  //500  16.81
    -0.85,       //200 18.88 //2.21,       //200 17.52   //   2.22,              //200  17.51	    //  -2.20,  //200  17.79
    -2.21,	//100 17.52   //  -2.20,  //100  17.79
    -2.21,	//50  17.52   //  -2.20,  //50   17.79
    -5.89,	 //20 13.84   //  -5.87,  //20   14.12
    -5.90,       //10 13.83   //  -5.87,  //10   14.12
    -5.90,       //5  13.83	    //  -5.87,  //5    14.12
    -3.55,	//2  16.18   //  -3.52,  //2    16.47
    -3.55,     //1 16.18   //  -3.51,   //1    16.48
};

static double BWRESP_FFT[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
                            //10~19
                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
                             //20~24   1kHz
                              0, 0, 0, 0, 0, \
                             //25~29   900Hz ~ 500Hz
                              0, -5.12, -3.40, -5.16, -1.74, \
                             //30~39   400Hz ~ 40 Hz
                             -5.12 , -5.56, -5.71 , -5.71, -4.2, -3.45, -2.40, -2.8, -5.70, -3.44, \
                             //40~49   30Hz ~ 3Hz
                             -3.91, -3.46, -3.46, -2.03, -1.15, -0.89, -1.58, -3.47, -1.12, -1.57, \
                            //50~51   2Hz ~ 1Hz
                             -1.12, -25.17,
                            };

/*                                   // 0    1     2      3      4    5     6    7      8      9     10     11      12    13     14     15     16     17     18     19     20     21     22      23    24     25    26     27       28     29     30     31     32        33      34     35     3 6       37
static unsigned long FREQRESPHZ[] = { 9e3, 20e3, 120e3, 500e3, 3e6,10e6, 30e6, 50e6, 100e6, 150e6, 200e6, 250e6, 300e6, 350e6, 400e6, 450e6, 500e6, 550e6, 600e6, 650e6, 700e6, 750e6, 800e6, 850e6, 900e6, 950e6, 1.e9, 1.05e9, 1.1e9, 1.15e9, 1.2e9, 1.25e9, 1.30e9, 1.35e9, 1.40e9, 1.45e9, 1.50e9, 1.505e9, \
  							      //  38      39      40     41      42       43      44     45      46     47       48     49     50      51     52     53     54       55       56
								   1.495e9,1.50e9, 1.55e9 ,1.60e9, 1.65e9, 1.70e9, 1.75e9, 1.8e9, 1.85e9, 1.9e9, 1.95e9, 2.0e9, 2.05e9, 2.1e9, 2.15e9 ,2.2e9, 2.25e9,  2.30e9, 2.305e9,\
								 //   57      58      59       60     61      62       63      64      65      66      67       68      69       70     71      72      73        74      75
								  2.295e9, 2.30e9,  2.35e9, 2.40e9,  2.45e9, 2.50e9, 2.55e9, 2.60e9, 2.65e9, 2.70e9, 2.75e9, 2.80e9, 2.85e9,  2.90e9, 2.95e9, 3.0e9, 3.05e9, 3.10e9, 3.105e9, \
								//   76      77      78     79      80        81       82      83     84       85      86      87      88
								   3.095e9, 3.1e9, 3.15e9, 3.2e9, 3.25e9, 3.3e9,  3.35e9, 3.40e9,  3.45e9, 3.50e9, 3.55e9,  3.6e9 , MAXFREQ
};
*/
/*
static unsigned long FREQRESPHZ_ZC[]={
								//0    1     2    3     4     5     6     7
								1e3,  5e3,  9e3, 15e3, 30e3, 50e3, 70e3, 90e3,\
		                        //8     9     10      11     12     13     14    15     16     17
		                        100e3, 200e3, 300e3, 400e3, 500e3, 600e3, 700e3, 800e3, 900e3, 950e3,\
                               //18    19      20       21      22     23       24      25      26     27       28     29      30     31      32      33
		                        1e6,  1.25e6,  1.5e6,  1.75e6,  2e6,  2.25e6,  2.5e6,  2.75e6,  3e6,  3.25e6,  3.5e6,  3.75e6, 4e6,  4.25e6, 4.5e6, 4.75e6,\
		                       //34    35     36     37     38    39      40     41     42    43      44     45    46    47       48     49     50    51     52       53    54
		                        5e6, 5.25e6, 5.5e6, 5.75e6, 6e6, 6.25e6, 6.5e6, 6.75e6, 7e6, 7.25e6, 7.5e6, 7.75e6, 8e6, 8.25e6, 8.5e6, 8.75e6, 9e6, 9.25e6, 9.5e6, 9.75e6, 10e6
};
*/
static unsigned long FREQRESPHZ_ZC[]={
								//0   1   2     3    4      5    6     7     8
								1e3, 3e3, 5e3, 7e3, 10e3, 30e3, 50e3, 70e3, 90e3,\
		                        //9     10      11     12    13     14     15     16     17     18     19     20      21    22     23      24     25    26
		                        100e3, 150e3, 200e3, 250e3, 300e3, 350e3, 400e3, 450e3, 500e3, 550e3, 600e3, 650e3, 700e3, 750e3, 800e3, 850e3, 900e3, 950e3,\
                               //27     28      29       30      31      32      33     34      35      36       37     38     39      40     41      42
		                        1e6,  1.25e6,  1.5e6,  1.75e6,  2e6,  2.25e6,  2.5e6,  2.75e6,  3e6,  3.25e6,  3.5e6,  3.75e6, 4e6,  4.25e6, 4.5e6, 4.75e6,\
		                       //43     44     45      46    47     48      49     50    51     52     53     54     55     56     57     58    59      60     61     62     63
		                        5e6, 5.25e6, 5.5e6, 5.75e6, 6e6, 6.25e6, 6.5e6, 6.75e6, 7e6, 7.25e6, 7.5e6, 7.75e6, 8e6, 8.25e6, 8.5e6, 8.75e6, 9e6, 9.25e6, 9.5e6, 9.75e6, 10e6
};

#define FREQRESPCOUNT_ZC   64       // FREQRESPHZ_ZC元素个数

static unsigned long long FREQRESPHZ[] = {
							20e6, 50e6, 100e6, 150e6, 200e6, 250e6, 300e6, 350e6, 400e6, 450e6, 500e6, 550e6, 600e6, 650e6, 700e6, 750e6, 800e6, 850e6, 900e6, 950e6,    //0~19
							1e9, 1.05e9, 1.1e9, 1.15e9, 1.2e9, 1.25e9, 1.3e9, 1.35e9, 1.4e9, 1.45e9, 1.5e9, 1.55e9, 1.6e9, 1.65e9, 1.7e9, 1.75e9, 1.8e9, 1.85e9, 1.9e9, 1.95e9, //20~39
							2e9, 2.05e9, 2.1e9, 2.15e9, 2.2e9, 2.25e9, 2.3e9, 2.35e9, 2.4e9, 2.45e9, 2.5e9, 2.55e9, 2.6e9, 2.65e9, 2.7e9, 2.75e9, 2.8e9, 2.85e9, 2.9e9, 2.95e9, //40~59
							3e9, 3.05e9, 3.1e9, 3.15e9, 3.2e9, 3.25e9, 3.3e9, 3.35e9, 3.4e9, 3.45e9, 3.5e9, 3.55e9, 3.6e9, 3.65e9, 3.7e9, 3.75e9, 3.8e9, 3.85e9, 3.9e9, 3.95e9, //60~79
							4e9, 4.05e9, 4.1e9, 4.15e9, 4.2e9, 4.25e9, 4.3e9, 4.35e9, 4.4e9, 4.45e9, 4.5e9, 4.55e9, 4.6e9, 4.65e9, 4.7e9, 4.75e9, 4.8e9, 4.85e9, 4.9e9, 4.95e9, //80~99
							5e9, 5.05e9, 5.1e9, 5.15e9, 5.2e9, 5.25e9, 5.3e9, 5.35e9, 5.4e9, 5.45e9, 5.5e9, 5.55e9, 5.6e9, 5.65e9, 5.7e9, 5.75e9, 5.8e9, 5.85e9, 5.9e9, 5.95e9, //100~119
							6e9, 6.05e9, 6.1e9, 6.15e9, 6.2e9, 6.25e9, 6.3e9, 6.35e9, 6.4e9, 6.45e9, 6.5e9, 6.55e9, 6.6e9, 6.65e9, 6.7e9, 6.75e9, 6.8e9, 6.85e9, 6.9e9, 6.95e9, //120~139
							7e9, 7.05e9, 7.1e9, 7.15e9, 7.2e9, 7.25e9, 7.3e9, 7.35e9, 7.4e9, 7.45e9, 7.5e9, 7.55e9, 7.6e9, 7.65e9, 7.7e9, 7.75e9, 7.8e9, 7.85e9, 7.9e9, 7.95e9, 8e9, 8.01e9, //140~161
							7.99e9, 8e9, 8.05e9, 8.1e9, 8.15e9, 8.2e9, 8.25e9, 8.3e9, 8.35e9, 8.4e9, 8.45e9, 8.5e9, 8.55e9, 8.6e9, 8.65e9, 8.7e9, 8.75e9, 8.8e9, 8.85e9, 8.9e9, 8.95e9, //162~182
							9e9, 9.05e9, 9.1e9, 9.15e9, 9.2e9, 9.25e9, 9.3e9, 9.35e9, 9.4e9, 9.45e9, 9.5e9, 9.55e9, 9.6e9, 9.65e9, 9.7e9, 9.75e9, 9.8e9, 9.85e9, 9.9e9, 9.95e9, //183~202
							10e9, 10.05e9, 10.1e9, 10.15e9, 10.2e9, 10.25e9, 10.3e9, 10.35e9, 10.4e9, 10.45e9, 10.5e9, 10.51e9, //203~214
							10.49e9, 10.5e9, 10.55e9, 10.6e9, 10.65e9, 10.7e9, 10.75e9, 10.8e9, 10.85e9, 10.9e9, 10.95e9, //215~225
							11e9, 11.05e9, 11.1e9, 11.15e9, 11.2e9, 11.25e9, 11.3e9, 11.35e9, 11.4e9, 11.45e9, 11.5e9, 11.55e9, 11.6e9, 11.65e9, 11.7e9, 11.75e9, 11.8e9, 11.85e9, 11.9e9, 11.95e9, //226~245
							12e9, 12.05e9, 12.1e9, 12.15e9, 12.2e9, 12.25e9, 12.3e9, 12.35e9, 12.4e9, 12.45e9, 12.5e9, 12.55e9, 12.6e9, 12.65e9, 12.7e9, 12.75e9, 12.8e9, 12.85e9, 12.9e9, 12.95e9, 13e9, 13.01e9,//246~267
							12.99e9, 13e9, 13.05e9, 13.1e9, 13.15e9, 13.2e9, 13.25e9, 13.3e9, 13.35e9, 13.4e9, 13.45e9, 13.5e9, 13.55e9, 13.6e9, 13.65e9, 13.7e9, 13.75e9, 13.8e9, 13.85e9, 13.9e9, 13.95e9,//268~288
							14e9, 14.05e9, 14.1e9, 14.15e9, 14.2e9, 14.25e9, 14.3e9, 14.35e9, 14.4e9, 14.45e9, 14.5e9, 14.55e9, 14.6e9, 14.65e9, 14.7e9, 14.75e9, 14.8e9, 14.85e9, 14.9e9, 14.95e9,//289~308
							15e9, 15.05e9, 15.1e9, 15.15e9, 15.2e9, 15.25e9, 15.3e9, 15.35e9, 15.4e9, 15.45e9, 15.5e9, 15.51e9, //309~320
							14.49e9, 15e9, 15.55e9, 15.6e9, 15.65e9, 15.7e9, 15.75e9, 15.8e9, 15.85e9, 15.9e9, 15.95e9, //321~331
							16e9, 16.05e9, 16.1e9, 16.15e9, 16.2e9, 16.25e9, 16.3e9, 16.35e9, 16.4e9, 16.45e9, 16.5e9, 16.55e9, 16.6e9, 16.65e9, 16.7e9, 16.75e9, 16.8e9, 16.85e9, 16.9e9, 16.95e9,//332~351
							17e9, 17.05e9, 17.1e9, 17.15e9, 17.2e9, 17.25e9, 17.3e9, 17.35e9, 17.4e9, 17.45e9, 17.5e9, 17.55e9, 17.6e9, 17.65e9, 17.7e9, 17.75e9, 17.8e9, 17.85e9, 17.9e9, 17.95e9, 18e9, //352~372

};
#define FREQRESPCOUNT   373

const unsigned char logoBits[] = {0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x12, 0x10, 0x06, 0x00, 0x00, 0x00, 0x95, 0xFA, 0x25, 0xF3, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x2E, 0x23, 0x00, 0x00, 0x2E, 0x23, 0x01, 0x78, 0xA5, 0x3F, 0x76, 0x00, 0x00, 0x0A, 0x4D, 0x69, 0x43, 0x43, 0x50, 0x50, 0x68, 0x6F, 0x74, 0x6F, 0x73, 0x68, 0x6F, 0x70, 0x20, 0x49, 0x43, 0x43, 0x20, 0x70, 0x72, 0x6F, 0x66, 0x69, 0x6C, 0x65, 0x00, 0x00, 0x78, 0xDA, 0x9D, 0x53, 0x77, 0x58, 0x93, 0xF7, 0x16, 0x3E, 0xDF, 0xF7, 0x65, 0x0F, 0x56, 0x42, 0xD8, 0xF0, 0xB1, 0x97, 0x6C, 0x81, 0x00, 0x22, 0x23, 0xAC, 0x08, 0xC8, 0x10, 0x59, 0xA2, 0x10, 0x92, 0x00, 0x61, 0x84, 0x10, 0x12, 0x40, 0xC5, 0x85, 0x88, 0x0A, 0x56, 0x14, 0x15, 0x11, 0x9C, 0x48, 0x55, 0xC4, 0x82, 0xD5, 0x0A, 0x48, 0x9D, 0x88, 0xE2, 0xA0, 0x28, 0xB8, 0x67, 0x41, 0x8A, 0x88, 0x5A, 0x8B, 0x55, 0x5C, 0x38, 0xEE, 0x1F, 0xDC, 0xA7, 0xB5, 0x7D, 0x7A, 0xEF, 0xED, 0xED, 0xFB, 0xD7, 0xFB, 0xBC, 0xE7, 0x9C, 0xE7, 0xFC, 0xCE, 0x79, 0xCF, 0x0F, 0x80, 0x11, 0x12, 0x26, 0x91, 0xE6, 0xA2, 0x6A, 0x00, 0x39, 0x52, 0x85, 0x3C, 0x3A, 0xD8, 0x1F, 0x8F, 0x4F, 0x48, 0xC4, 0xC9, 0xBD, 0x80, 0x02, 0x15, 0x48, 0xE0, 0x04, 0x20, 0x10, 0xE6, 0xCB, 0xC2, 0x67, 0x05, 0xC5, 0x00, 0x00, 0xF0, 0x03, 0x79, 0x78, 0x7E, 0x74, 0xB0, 0x3F, 0xFC, 0x01, 0xAF, 0x6F, 0x00, 0x02, 0x00, 0x70, 0xD5, 0x2E, 0x24, 0x12, 0xC7, 0xE1, 0xFF, 0x83, 0xBA, 0x50, 0x26, 0x57, 0x00, 0x20, 0x91, 0x00, 0xE0, 0x22, 0x12, 0xE7, 0x0B, 0x01, 0x90, 0x52, 0x00, 0xC8, 0x2E, 0x54, 0xC8, 0x14, 0x00, 0xC8, 0x18, 0x00, 0xB0, 0x53, 0xB3, 0x64, 0x0A, 0x00, 0x94, 0x00, 0x00, 0x6C, 0x79, 0x7C, 0x42, 0x22, 0x00, 0xAA, 0x0D, 0x00, 0xEC, 0xF4, 0x49, 0x3E, 0x05, 0x00, 0xD8, 0xA9, 0x93, 0xDC, 0x17, 0x00, 0xD8, 0xA2, 0x1C, 0xA9, 0x08, 0x00, 0x8D, 0x01, 0x00, 0x99, 0x28, 0x47, 0x24, 0x02, 0x40, 0xBB, 0x00, 0x60, 0x55, 0x81, 0x52, 0x2C, 0x02, 0xC0, 0xC2, 0x00, 0xA0, 0xAC, 0x40, 0x22, 0x2E, 0x04, 0xC0, 0xAE, 0x01, 0x80, 0x59, 0xB6, 0x32, 0x47, 0x02, 0x80, 0xBD, 0x05, 0x00, 0x76, 0x8E, 0x58, 0x90, 0x0F, 0x40, 0x60, 0x00, 0x80, 0x99, 0x42, 0x2C, 0xCC, 0x00, 0x20, 0x38, 0x02, 0x00, 0x43, 0x1E, 0x13, 0xCD, 0x03, 0x20, 0x4C, 0x03, 0xA0, 0x30, 0xD2, 0xBF, 0xE0, 0xA9, 0x5F, 0x70, 0x85, 0xB8, 0x48, 0x01, 0x00, 0xC0, 0xCB, 0x95, 0xCD, 0x97, 0x4B, 0xD2, 0x33, 0x14, 0xB8, 0x95, 0xD0, 0x1A, 0x77, 0xF2, 0xF0, 0xE0, 0xE2, 0x21, 0xE2, 0xC2, 0x6C, 0xB1, 0x42, 0x61, 0x17, 0x29, 0x10, 0x66, 0x09, 0xE4, 0x22, 0x9C, 0x97, 0x9B, 0x23, 0x13, 0x48, 0xE7, 0x03, 0x4C, 0xCE, 0x0C, 0x00, 0x00, 0x1A, 0xF9, 0xD1, 0xC1, 0xFE, 0x38, 0x3F, 0x90, 0xE7, 0xE6, 0xE4, 0xE1, 0xE6, 0x66, 0xE7, 0x6C, 0xEF, 0xF4, 0xC5, 0xA2, 0xFE, 0x6B, 0xF0, 0x6F, 0x22, 0x3E, 0x21, 0xF1, 0xDF, 0xFE, 0xBC, 0x8C, 0x02, 0x04, 0x00, 0x10, 0x4E, 0xCF, 0xEF, 0xDA, 0x5F, 0xE5, 0xE5, 0xD6, 0x03, 0x70, 0xC7, 0x01, 0xB0, 0x75, 0xBF, 0x6B, 0xA9, 0x5B, 0x00, 0xDA, 0x56, 0x00, 0x68, 0xDF, 0xF9, 0x5D, 0x33, 0xDB, 0x09, 0xA0, 0x5A, 0x0A, 0xD0, 0x7A, 0xF9, 0x8B, 0x79, 0x38, 0xFC, 0x40, 0x1E, 0x9E, 0xA1, 0x50, 0xC8, 0x3C, 0x1D, 0x1C, 0x0A, 0x0B, 0x0B, 0xED, 0x25, 0x62, 0xA1, 0xBD, 0x30, 0xE3, 0x8B, 0x3E, 0xFF, 0x33, 0xE1, 0x6F, 0xE0, 0x8B, 0x7E, 0xF6, 0xFC, 0x40, 0x1E, 0xFE, 0xDB, 0x7A, 0xF0, 0x00, 0x71, 0x9A, 0x40, 0x99, 0xAD, 0xC0, 0xA3, 0x83, 0xFD, 0x71, 0x61, 0x6E, 0x76, 0xAE, 0x52, 0x8E, 0xE7, 0xCB, 0x04, 0x42, 0x31, 0x6E, 0xF7, 0xE7, 0x23, 0xFE, 0xC7, 0x85, 0x7F, 0xFD, 0x8E, 0x29, 0xD1, 0xE2, 0x34, 0xB1, 0x5C, 0x2C, 0x15, 0x8A, 0xF1, 0x58, 0x89, 0xB8, 0x50, 0x22, 0x4D, 0xC7, 0x79, 0xB9, 0x52, 0x91, 0x44, 0x21, 0xC9, 0x95, 0xE2, 0x12, 0xE9, 0x7F, 0x32, 0xF1, 0x1F, 0x96, 0xFD, 0x09, 0x93, 0x77, 0x0D, 0x00, 0xAC, 0x86, 0x4F, 0xC0, 0x4E, 0xB6, 0x07, 0xB5, 0xCB, 0x6C, 0xC0, 0x7E, 0xEE, 0x01, 0x02, 0x8B, 0x0E, 0x58, 0xD2, 0x76, 0x00, 0x40, 0x7E, 0xF3, 0x2D, 0x8C, 0x1A, 0x0B, 0x91, 0x00, 0x10, 0x67, 0x34, 0x32, 0x79, 0xF7, 0x00, 0x00, 0x93, 0xBF, 0xF9, 0x8F, 0x40, 0x2B, 0x01, 0x00, 0xCD, 0x97, 0xA4, 0xE3, 0x00, 0x00, 0xBC, 0xE8, 0x18, 0x5C, 0xA8, 0x94, 0x17, 0x4C, 0xC6, 0x08, 0x00, 0x00, 0x44, 0xA0, 0x81, 0x2A, 0xB0, 0x41, 0x07, 0x0C, 0xC1, 0x14, 0xAC, 0xC0, 0x0E, 0x9C, 0xC1, 0x1D, 0xBC, 0xC0, 0x17, 0x02, 0x61, 0x06, 0x44, 0x40, 0x0C, 0x24, 0xC0, 0x3C, 0x10, 0x42, 0x06, 0xE4, 0x80, 0x1C, 0x0A, 0xA1, 0x18, 0x96, 0x41, 0x19, 0x54, 0xC0, 0x3A, 0xD8, 0x04, 0xB5, 0xB0, 0x03, 0x1A, 0xA0, 0x11, 0x9A, 0xE1, 0x10, 0xB4, 0xC1, 0x31, 0x38, 0x0D, 0xE7, 0xE0, 0x12, 0x5C, 0x81, 0xEB, 0x70, 0x17, 0x06, 0x60, 0x18, 0x9E, 0xC2, 0x18, 0xBC, 0x86, 0x09, 0x04, 0x41, 0xC8, 0x08, 0x13, 0x61, 0x21, 0x3A, 0x88, 0x11, 0x62, 0x8E, 0xD8, 0x22, 0xCE, 0x08, 0x17, 0x99, 0x8E, 0x04, 0x22, 0x61, 0x48, 0x34, 0x92, 0x80, 0xA4, 0x20, 0xE9, 0x88, 0x14, 0x51, 0x22, 0xC5, 0xC8, 0x72, 0xA4, 0x02, 0xA9, 0x42, 0x6A, 0x91, 0x5D, 0x48, 0x23, 0xF2, 0x2D, 0x72, 0x14, 0x39, 0x8D, 0x5C, 0x40, 0xFA, 0x90, 0xDB, 0xC8, 0x20, 0x32, 0x8A, 0xFC, 0x8A, 0xBC, 0x47, 0x31, 0x94, 0x81, 0xB2, 0x51, 0x03, 0xD4, 0x02, 0x75, 0x40, 0xB9, 0xA8, 0x1F, 0x1A, 0x8A, 0xC6, 0xA0, 0x73, 0xD1, 0x74, 0x34, 0x0F, 0x5D, 0x80, 0x96, 0xA2, 0x6B, 0xD1, 0x1A, 0xB4, 0x1E, 0x3D, 0x80, 0xB6, 0xA2, 0xA7, 0xD1, 0x4B, 0xE8, 0x75, 0x74, 0x00, 0x7D, 0x8A, 0x8E, 0x63, 0x80, 0xD1, 0x31, 0x0E, 0x66, 0x8C, 0xD9, 0x61, 0x5C, 0x8C, 0x87, 0x45, 0x60, 0x89, 0x58, 0x1A, 0x26, 0xC7, 0x16, 0x63, 0xE5, 0x58, 0x35, 0x56, 0x8F, 0x35, 0x63, 0x1D, 0x58, 0x37, 0x76, 0x15, 0x1B, 0xC0, 0x9E, 0x61, 0xEF, 0x08, 0x24, 0x02, 0x8B, 0x80, 0x13, 0xEC, 0x08, 0x5E, 0x84, 0x10, 0xC2, 0x6C, 0x82, 0x90, 0x90, 0x47, 0x58, 0x4C, 0x58, 0x43, 0xA8, 0x25, 0xEC, 0x23, 0xB4, 0x12, 0xBA, 0x08, 0x57, 0x09, 0x83, 0x84, 0x31, 0xC2, 0x27, 0x22, 0x93, 0xA8, 0x4F, 0xB4, 0x25, 0x7A, 0x12, 0xF9, 0xC4, 0x78, 0x62, 0x3A, 0xB1, 0x90, 0x58, 0x46, 0xAC, 0x26, 0xEE, 0x21, 0x1E, 0x21, 0x9E, 0x25, 0x5E, 0x27, 0x0E, 0x13, 0x5F, 0x93, 0x48, 0x24, 0x0E, 0xC9, 0x92, 0xE4, 0x4E, 0x0A, 0x21, 0x25, 0x90, 0x32, 0x49, 0x0B, 0x49, 0x6B, 0x48, 0xDB, 0x48, 0x2D, 0xA4, 0x53, 0xA4, 0x3E, 0xD2, 0x10, 0x69, 0x9C, 0x4C, 0x26, 0xEB, 0x90, 0x6D, 0xC9, 0xDE, 0xE4, 0x08, 0xB2, 0x80, 0xAC, 0x20, 0x97, 0x91, 0xB7, 0x90, 0x0F, 0x90, 0x4F, 0x92, 0xFB, 0xC9, 0xC3, 0xE4, 0xB7, 0x14, 0x3A, 0xC5, 0x88, 0xE2, 0x4C, 0x09, 0xA2, 0x24, 0x52, 0xA4, 0x94, 0x12, 0x4A, 0x35, 0x65, 0x3F, 0xE5, 0x04, 0xA5, 0x9F, 0x32, 0x42, 0x99, 0xA0, 0xAA, 0x51, 0xCD, 0xA9, 0x9E, 0xD4, 0x08, 0xAA, 0x88, 0x3A, 0x9F, 0x5A, 0x49, 0x6D, 0xA0, 0x76, 0x50, 0x2F, 0x53, 0x87, 0xA9, 0x13, 0x34, 0x75, 0x9A, 0x25, 0xCD, 0x9B, 0x16, 0x43, 0xCB, 0xA4, 0x2D, 0xA3, 0xD5, 0xD0, 0x9A, 0x69, 0x67, 0x69, 0xF7, 0x68, 0x2F, 0xE9, 0x74, 0xBA, 0x09, 0xDD, 0x83, 0x1E, 0x45, 0x97, 0xD0, 0x97, 0xD2, 0x6B, 0xE8, 0x07, 0xE9, 0xE7, 0xE9, 0x83, 0xF4, 0x77, 0x0C, 0x0D, 0x86, 0x0D, 0x83, 0xC7, 0x48, 0x62, 0x28, 0x19, 0x6B, 0x19, 0x7B, 0x19, 0xA7, 0x18, 0xB7, 0x19, 0x2F, 0x99, 0x4C, 0xA6, 0x05, 0xD3, 0x97, 0x99, 0xC8, 0x54, 0x30, 0xD7, 0x32, 0x1B, 0x99, 0x67, 0x98, 0x0F, 0x98, 0x6F, 0x55, 0x58, 0x2A, 0xF6, 0x2A, 0x7C, 0x15, 0x91, 0xCA, 0x12, 0x95, 0x3A, 0x95, 0x56, 0x95, 0x7E, 0x95, 0xE7, 0xAA, 0x54, 0x55, 0x73, 0x55, 0x3F, 0xD5, 0x79, 0xAA, 0x0B, 0x54, 0xAB, 0x55, 0x0F, 0xAB, 0x5E, 0x56, 0x7D, 0xA6, 0x46, 0x55, 0xB3, 0x50, 0xE3, 0xA9, 0x09, 0xD4, 0x16, 0xAB, 0xD5, 0xA9, 0x1D, 0x55, 0xBB, 0xA9, 0x36, 0xAE, 0xCE, 0x52, 0x77, 0x52, 0x8F, 0x50, 0xCF, 0x51, 0x5F, 0xA3, 0xBE, 0x5F, 0xFD, 0x82, 0xFA, 0x63, 0x0D, 0xB2, 0x86, 0x85, 0x46, 0xA0, 0x86, 0x48, 0xA3, 0x54, 0x63, 0xB7, 0xC6, 0x19, 0x8D, 0x21, 0x16, 0xC6, 0x32, 0x65, 0xF1, 0x58, 0x42, 0xD6, 0x72, 0x56, 0x03, 0xEB, 0x2C, 0x6B, 0x98, 0x4D, 0x62, 0x5B, 0xB2, 0xF9, 0xEC, 0x4C, 0x76, 0x05, 0xFB, 0x1B, 0x76, 0x2F, 0x7B, 0x4C, 0x53, 0x43, 0x73, 0xAA, 0x66, 0xAC, 0x66, 0x91, 0x66, 0x9D, 0xE6, 0x71, 0xCD, 0x01, 0x0E, 0xC6, 0xB1, 0xE0, 0xF0, 0x39, 0xD9, 0x9C, 0x4A, 0xCE, 0x21, 0xCE, 0x0D, 0xCE, 0x7B, 0x2D, 0x03, 0x2D, 0x3F, 0x2D, 0xB1, 0xD6, 0x6A, 0xAD, 0x66, 0xAD, 0x7E, 0xAD, 0x37, 0xDA, 0x7A, 0xDA, 0xBE, 0xDA, 0x62, 0xED, 0x72, 0xED, 0x16, 0xED, 0xEB, 0xDA, 0xEF, 0x75, 0x70, 0x9D, 0x40, 0x9D, 0x2C, 0x9D, 0xF5, 0x3A, 0x6D, 0x3A, 0xF7, 0x75, 0x09, 0xBA, 0x36, 0xBA, 0x51, 0xBA, 0x85, 0xBA, 0xDB, 0x75, 0xCF, 0xEA, 0x3E, 0xD3, 0x63, 0xEB, 0x79, 0xE9, 0x09, 0xF5, 0xCA, 0xF5, 0x0E, 0xE9, 0xDD, 0xD1, 0x47, 0xF5, 0x6D, 0xF4, 0xA3, 0xF5, 0x17, 0xEA, 0xEF, 0xD6, 0xEF, 0xD1, 0x1F, 0x37, 0x30, 0x34, 0x08, 0x36, 0x90, 0x19, 0x6C, 0x31, 0x38, 0x63, 0xF0, 0xCC, 0x90, 0x63, 0xE8, 0x6B, 0x98, 0x69, 0xB8, 0xD1, 0xF0, 0x84, 0xE1, 0xA8, 0x11, 0xCB, 0x68, 0xBA, 0x91, 0xC4, 0x68, 0xA3, 0xD1, 0x49, 0xA3, 0x27, 0xB8, 0x26, 0xEE, 0x87, 0x67, 0xE3, 0x35, 0x78, 0x17, 0x3E, 0x66, 0xAC, 0x6F, 0x1C, 0x62, 0xAC, 0x34, 0xDE, 0x65, 0xDC, 0x6B, 0x3C, 0x61, 0x62, 0x69, 0x32, 0xDB, 0xA4, 0xC4, 0xA4, 0xC5, 0xE4, 0xBE, 0x29, 0xCD, 0x94, 0x6B, 0x9A, 0x66, 0xBA, 0xD1, 0xB4, 0xD3, 0x74, 0xCC, 0xCC, 0xC8, 0x2C, 0xDC, 0xAC, 0xD8, 0xAC, 0xC9, 0xEC, 0x8E, 0x39, 0xD5, 0x9C, 0x6B, 0x9E, 0x61, 0xBE, 0xD9, 0xBC, 0xDB, 0xFC, 0x8D, 0x85, 0xA5, 0x45, 0x9C, 0xC5, 0x4A, 0x8B, 0x36, 0x8B, 0xC7, 0x96, 0xDA, 0x96, 0x7C, 0xCB, 0x05, 0x96, 0x4D, 0x96, 0xF7, 0xAC, 0x98, 0x56, 0x3E, 0x56, 0x79, 0x56, 0xF5, 0x56, 0xD7, 0xAC, 0x49, 0xD6, 0x5C, 0xEB, 0x2C, 0xEB, 0x6D, 0xD6, 0x57, 0x6C, 0x50, 0x1B, 0x57, 0x9B, 0x0C, 0x9B, 0x3A, 0x9B, 0xCB, 0xB6, 0xA8, 0xAD, 0x9B, 0xAD, 0xC4, 0x76, 0x9B, 0x6D, 0xDF, 0x14, 0xE2, 0x14, 0x8F, 0x29, 0xD2, 0x29, 0xF5, 0x53, 0x6E, 0xDA, 0x31, 0xEC, 0xFC, 0xEC, 0x0A, 0xEC, 0x9A, 0xEC, 0x06, 0xED, 0x39, 0xF6, 0x61, 0xF6, 0x25, 0xF6, 0x6D, 0xF6, 0xCF, 0x1D, 0xCC, 0x1C, 0x12, 0x1D, 0xD6, 0x3B, 0x74, 0x3B, 0x7C, 0x72, 0x74, 0x75, 0xCC, 0x76, 0x6C, 0x70, 0xBC, 0xEB, 0xA4, 0xE1, 0x34, 0xC3, 0xA9, 0xC4, 0xA9, 0xC3, 0xE9, 0x57, 0x67, 0x1B, 0x67, 0xA1, 0x73, 0x9D, 0xF3, 0x35, 0x17, 0xA6, 0x4B, 0x90, 0xCB, 0x12, 0x97, 0x76, 0x97, 0x17, 0x53, 0x6D, 0xA7, 0x8A, 0xA7, 0x6E, 0x9F, 0x7A, 0xCB, 0x95, 0xE5, 0x1A, 0xEE, 0xBA, 0xD2, 0xB5, 0xD3, 0xF5, 0xA3, 0x9B, 0xBB, 0x9B, 0xDC, 0xAD, 0xD9, 0x6D, 0xD4, 0xDD, 0xCC, 0x3D, 0xC5, 0x7D, 0xAB, 0xFB, 0x4D, 0x2E, 0x9B, 0x1B, 0xC9, 0x5D, 0xC3, 0x3D, 0xEF, 0x41, 0xF4, 0xF0, 0xF7, 0x58, 0xE2, 0x71, 0xCC, 0xE3, 0x9D, 0xA7, 0x9B, 0xA7, 0xC2, 0xF3, 0x90, 0xE7, 0x2F, 0x5E, 0x76, 0x5E, 0x59, 0x5E, 0xFB, 0xBD, 0x1E, 0x4F, 0xB3, 0x9C, 0x26, 0x9E, 0xD6, 0x30, 0x6D, 0xC8, 0xDB, 0xC4, 0x5B, 0xE0, 0xBD, 0xCB, 0x7B, 0x60, 0x3A, 0x3E, 0x3D, 0x65, 0xFA, 0xCE, 0xE9, 0x03, 0x3E, 0xC6, 0x3E, 0x02, 0x9F, 0x7A, 0x9F, 0x87, 0xBE, 0xA6, 0xBE, 0x22, 0xDF, 0x3D, 0xBE, 0x23, 0x7E, 0xD6, 0x7E, 0x99, 0x7E, 0x07, 0xFC, 0x9E, 0xFB, 0x3B, 0xFA, 0xCB, 0xFD, 0x8F, 0xF8, 0xBF, 0xE1, 0x79, 0xF2, 0x16, 0xF1, 0x4E, 0x05, 0x60, 0x01, 0xC1, 0x01, 0xE5, 0x01, 0xBD, 0x81, 0x1A, 0x81, 0xB3, 0x03, 0x6B, 0x03, 0x1F, 0x04, 0x99, 0x04, 0xA5, 0x07, 0x35, 0x05, 0x8D, 0x05, 0xBB, 0x06, 0x2F, 0x0C, 0x3E, 0x15, 0x42, 0x0C, 0x09, 0x0D, 0x59, 0x1F, 0x72, 0x93, 0x6F, 0xC0, 0x17, 0xF2, 0x1B, 0xF9, 0x63, 0x33, 0xDC, 0x67, 0x2C, 0x9A, 0xD1, 0x15, 0xCA, 0x08, 0x9D, 0x15, 0x5A, 0x1B, 0xFA, 0x30, 0xCC, 0x26, 0x4C, 0x1E, 0xD6, 0x11, 0x8E, 0x86, 0xCF, 0x08, 0xDF, 0x10, 0x7E, 0x6F, 0xA6, 0xF9, 0x4C, 0xE9, 0xCC, 0xB6, 0x08, 0x88, 0xE0, 0x47, 0x6C, 0x88, 0xB8, 0x1F, 0x69, 0x19, 0x99, 0x17, 0xF9, 0x7D, 0x14, 0x29, 0x2A, 0x32, 0xAA, 0x2E, 0xEA, 0x51, 0xB4, 0x53, 0x74, 0x71, 0x74, 0xF7, 0x2C, 0xD6, 0xAC, 0xE4, 0x59, 0xFB, 0x67, 0xBD, 0x8E, 0xF1, 0x8F, 0xA9, 0x8C, 0xB9, 0x3B, 0xDB, 0x6A, 0xB6, 0x72, 0x76, 0x67, 0xAC, 0x6A, 0x6C, 0x52, 0x6C, 0x63, 0xEC, 0x9B, 0xB8, 0x80, 0xB8, 0xAA, 0xB8, 0x81, 0x78, 0x87, 0xF8, 0x45, 0xF1, 0x97, 0x12, 0x74, 0x13, 0x24, 0x09, 0xED, 0x89, 0xE4, 0xC4, 0xD8, 0xC4, 0x3D, 0x89, 0xE3, 0x73, 0x02, 0xE7, 0x6C, 0x9A, 0x33, 0x9C, 0xE4, 0x9A, 0x54, 0x96, 0x74, 0x63, 0xAE, 0xE5, 0xDC, 0xA2, 0xB9, 0x17, 0xE6, 0xE9, 0xCE, 0xCB, 0x9E, 0x77, 0x3C, 0x59, 0x35, 0x59, 0x90, 0x7C, 0x38, 0x85, 0x98, 0x12, 0x97, 0xB2, 0x3F, 0xE5, 0x83, 0x20, 0x42, 0x50, 0x2F, 0x18, 0x4F, 0xE5, 0xA7, 0x6E, 0x4D, 0x1D, 0x13, 0xF2, 0x84, 0x9B, 0x85, 0x4F, 0x45, 0xBE, 0xA2, 0x8D, 0xA2, 0x51, 0xB1, 0xB7, 0xB8, 0x4A, 0x3C, 0x92, 0xE6, 0x9D, 0x56, 0x95, 0xF6, 0x38, 0xDD, 0x3B, 0x7D, 0x43, 0xFA, 0x68, 0x86, 0x4F, 0x46, 0x75, 0xC6, 0x33, 0x09, 0x4F, 0x52, 0x2B, 0x79, 0x91, 0x19, 0x92, 0xB9, 0x23, 0xF3, 0x4D, 0x56, 0x44, 0xD6, 0xDE, 0xAC, 0xCF, 0xD9, 0x71, 0xD9, 0x2D, 0x39, 0x94, 0x9C, 0x94, 0x9C, 0xA3, 0x52, 0x0D, 0x69, 0x96, 0xB4, 0x2B, 0xD7, 0x30, 0xB7, 0x28, 0xB7, 0x4F, 0x66, 0x2B, 0x2B, 0x93, 0x0D, 0xE4, 0x79, 0xE6, 0x6D, 0xCA, 0x1B, 0x93, 0x87, 0xCA, 0xF7, 0xE4, 0x23, 0xF9, 0x73, 0xF3, 0xDB, 0x15, 0x6C, 0x85, 0x4C, 0xD1, 0xA3, 0xB4, 0x52, 0xAE, 0x50, 0x0E, 0x16, 0x4C, 0x2F, 0xA8, 0x2B, 0x78, 0x5B, 0x18, 0x5B, 0x78, 0xB8, 0x48, 0xBD, 0x48, 0x5A, 0xD4, 0x33, 0xDF, 0x66, 0xFE, 0xEA, 0xF9, 0x23, 0x0B, 0x82, 0x16, 0x7C, 0xBD, 0x90, 0xB0, 0x50, 0xB8, 0xB0, 0xB3, 0xD8, 0xB8, 0x78, 0x59, 0xF1, 0xE0, 0x22, 0xBF, 0x45, 0xBB, 0x16, 0x23, 0x8B, 0x53, 0x17, 0x77, 0x2E, 0x31, 0x5D, 0x52, 0xBA, 0x64, 0x78, 0x69, 0xF0, 0xD2, 0x7D, 0xCB, 0x68, 0xCB, 0xB2, 0x96, 0xFD, 0x50, 0xE2, 0x58, 0x52, 0x55, 0xF2, 0x6A, 0x79, 0xDC, 0xF2, 0x8E, 0x52, 0x83, 0xD2, 0xA5, 0xA5, 0x43, 0x2B, 0x82, 0x57, 0x34, 0x95, 0xA9, 0x94, 0xC9, 0xCB, 0x6E, 0xAE, 0xF4, 0x5A, 0xB9, 0x63, 0x15, 0x61, 0x95, 0x64, 0x55, 0xEF, 0x6A, 0x97, 0xD5, 0x5B, 0x56, 0x7F, 0x2A, 0x17, 0x95, 0x5F, 0xAC, 0x70, 0xAC, 0xA8, 0xAE, 0xF8, 0xB0, 0x46, 0xB8, 0xE6, 0xE2, 0x57, 0x4E, 0x5F, 0xD5, 0x7C, 0xF5, 0x79, 0x6D, 0xDA, 0xDA, 0xDE, 0x4A, 0xB7, 0xCA, 0xED, 0xEB, 0x48, 0xEB, 0xA4, 0xEB, 0x6E, 0xAC, 0xF7, 0x59, 0xBF, 0xAF, 0x4A, 0xBD, 0x6A, 0x41, 0xD5, 0xD0, 0x86, 0xF0, 0x0D, 0xAD, 0x1B, 0xF1, 0x8D, 0xE5, 0x1B, 0x5F, 0x6D, 0x4A, 0xDE, 0x74, 0xA1, 0x7A, 0x6A, 0xF5, 0x8E, 0xCD, 0xB4, 0xCD, 0xCA, 0xCD, 0x03, 0x35, 0x61, 0x35, 0xED, 0x5B, 0xCC, 0xB6, 0xAC, 0xDB, 0xF2, 0xA1, 0x36, 0xA3, 0xF6, 0x7A, 0x9D, 0x7F, 0x5D, 0xCB, 0x56, 0xFD, 0xAD, 0xAB, 0xB7, 0xBE, 0xD9, 0x26, 0xDA, 0xD6, 0xBF, 0xDD, 0x77, 0x7B, 0xF3, 0x0E, 0x83, 0x1D, 0x15, 0x3B, 0xDE, 0xEF, 0x94, 0xEC, 0xBC, 0xB5, 0x2B, 0x78, 0x57, 0x6B, 0xBD, 0x45, 0x7D, 0xF5, 0x6E, 0xD2, 0xEE, 0x82, 0xDD, 0x8F, 0x1A, 0x62, 0x1B, 0xBA, 0xBF, 0xE6, 0x7E, 0xDD, 0xB8, 0x47, 0x77, 0x4F, 0xC5, 0x9E, 0x8F, 0x7B, 0xA5, 0x7B, 0x07, 0xF6, 0x45, 0xEF, 0xEB, 0x6A, 0x74, 0x6F, 0x6C, 0xDC, 0xAF, 0xBF, 0xBF, 0xB2, 0x09, 0x6D, 0x52, 0x36, 0x8D, 0x1E, 0x48, 0x3A, 0x70, 0xE5, 0x9B, 0x80, 0x6F, 0xDA, 0x9B, 0xED, 0x9A, 0x77, 0xB5, 0x70, 0x5A, 0x2A, 0x0E, 0xC2, 0x41, 0xE5, 0xC1, 0x27, 0xDF, 0xA6, 0x7C, 0x7B, 0xE3, 0x50, 0xE8, 0xA1, 0xCE, 0xC3, 0xDC, 0xC3, 0xCD, 0xDF, 0x99, 0x7F, 0xB7, 0xF5, 0x08, 0xEB, 0x48, 0x79, 0x2B, 0xD2, 0x3A, 0xBF, 0x75, 0xAC, 0x2D, 0xA3, 0x6D, 0xA0, 0x3D, 0xA1, 0xBD, 0xEF, 0xE8, 0x8C, 0xA3, 0x9D, 0x1D, 0x5E, 0x1D, 0x47, 0xBE, 0xB7, 0xFF, 0x7E, 0xEF, 0x31, 0xE3, 0x63, 0x75, 0xC7, 0x35, 0x8F, 0x57, 0x9E, 0xA0, 0x9D, 0x28, 0x3D, 0xF1, 0xF9, 0xE4, 0x82, 0x93, 0xE3, 0xA7, 0x64, 0xA7, 0x9E, 0x9D, 0x4E, 0x3F, 0x3D, 0xD4, 0x99, 0xDC, 0x79, 0xF7, 0x4C, 0xFC, 0x99, 0x6B, 0x5D, 0x51, 0x5D, 0xBD, 0x67, 0x43, 0xCF, 0x9E, 0x3F, 0x17, 0x74, 0xEE, 0x4C, 0xB7, 0x5F, 0xF7, 0xC9, 0xF3, 0xDE, 0xE7, 0x8F, 0x5D, 0xF0, 0xBC, 0x70, 0xF4, 0x22, 0xF7, 0x62, 0xDB, 0x25, 0xB7, 0x4B, 0xAD, 0x3D, 0xAE, 0x3D, 0x47, 0x7E, 0x70, 0xFD, 0xE1, 0x48, 0xAF, 0x5B, 0x6F, 0xEB, 0x65, 0xF7, 0xCB, 0xED, 0x57, 0x3C, 0xAE, 0x74, 0xF4, 0x4D, 0xEB, 0x3B, 0xD1, 0xEF, 0xD3, 0x7F, 0xFA, 0x6A, 0xC0, 0xD5, 0x73, 0xD7, 0xF8, 0xD7, 0x2E, 0x5D, 0x9F, 0x79, 0xBD, 0xEF, 0xC6, 0xEC, 0x1B, 0xB7, 0x6E, 0x26, 0xDD, 0x1C, 0xB8, 0x25, 0xBA, 0xF5, 0xF8, 0x76, 0xF6, 0xED, 0x17, 0x77, 0x0A, 0xEE, 0x4C, 0xDC, 0x5D, 0x7A, 0x8F, 0x78, 0xAF, 0xFC, 0xBE, 0xDA, 0xFD, 0xEA, 0x07, 0xFA, 0x0F, 0xEA, 0x7F, 0xB4, 0xFE, 0xB1, 0x65, 0xC0, 0x6D, 0xE0, 0xF8, 0x60, 0xC0, 0x60, 0xCF, 0xC3, 0x59, 0x0F, 0xEF, 0x0E, 0x09, 0x87, 0x9E, 0xFE, 0x94, 0xFF, 0xD3, 0x87, 0xE1, 0xD2, 0x47, 0xCC, 0x47, 0xD5, 0x23, 0x46, 0x23, 0x8D, 0x8F, 0x9D, 0x1F, 0x1F, 0x1B, 0x0D, 0x1A, 0xBD, 0xF2, 0x64, 0xCE, 0x93, 0xE1, 0xA7, 0xB2, 0xA7, 0x13, 0xCF, 0xCA, 0x7E, 0x56, 0xFF, 0x79, 0xEB, 0x73, 0xAB, 0xE7, 0xDF, 0xFD, 0xE2, 0xFB, 0x4B, 0xCF, 0x58, 0xFC, 0xD8, 0xF0, 0x0B, 0xF9, 0x8B, 0xCF, 0xBF, 0xAE, 0x79, 0xA9, 0xF3, 0x72, 0xEF, 0xAB, 0xA9, 0xAF, 0x3A, 0xC7, 0x23, 0xC7, 0x1F, 0xBC, 0xCE, 0x79, 0x3D, 0xF1, 0xA6, 0xFC, 0xAD, 0xCE, 0xDB, 0x7D, 0xEF, 0xB8, 0xEF, 0xBA, 0xDF, 0xC7, 0xBD, 0x1F, 0x99, 0x28, 0xFC, 0x40, 0xFE, 0x50, 0xF3, 0xD1, 0xFA, 0x63, 0xC7, 0xA7, 0xD0, 0x4F, 0xF7, 0x3E, 0xE7, 0x7C, 0xFE, 0xFC, 0x2F, 0xF7, 0x84, 0xF3, 0xFB, 0x25, 0xD2, 0x9F, 0x33, 0x00, 0x00, 0x00, 0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00, 0xB1, 0x8E, 0x7C, 0xFB, 0x51, 0x93, 0x00, 0x00, 0x00, 0x20, 0x63, 0x48, 0x52, 0x4D, 0x00, 0x00, 0x7A, 0x25, 0x00, 0x00, 0x80, 0x83, 0x00, 0x00, 0xF9, 0xFF, 0x00, 0x00, 0x80, 0xE9, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0xEA, 0x60, 0x00, 0x00, 0x3A, 0x98, 0x00, 0x00, 0x17, 0x6F, 0x92, 0x5F, 0xC5, 0x46, 0x00, 0x00, 0x26, 0xF3, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x5C, 0x99, 0x7F, 0x5C, 0x55, 0xD7, 0x99, 0xEE, 0xBF, 0x6B, 0xEF, 0x7D, 0x36, 0x87, 0xC3, 0xF1, 0x88, 0x88, 0x04, 0x91, 0x10, 0x24, 0x84, 0x10, 0x4A, 0x0C, 0x21, 0x94, 0x3A, 0x96, 0x5A, 0x4B, 0x29, 0x43, 0xAD, 0x43, 0xA9, 0xB5, 0x8E, 0xB5, 0x5E, 0x6B, 0x2D, 0xA5, 0xC6, 0x1A, 0x42, 0x19, 0x6B, 0x28, 0xB5, 0xC4, 0x18, 0x4A, 0x19, 0x4A, 0x1D, 0x4B, 0x8D, 0x75, 0xA8, 0x63, 0x1D, 0x6A, 0xB9, 0x0C, 0xA5, 0x8E, 0x65, 0x18, 0x4B, 0xAD, 0xA1, 0x94, 0x18, 0x87, 0x18, 0x4A, 0x0D, 0x25, 0x04, 0x09, 0x21, 0x04, 0x11, 0x09, 0x12, 0x04, 0x84, 0xC3, 0xF9, 0xB1, 0xF7, 0x5A, 0xF7, 0x8F, 0x78, 0xE7, 0xCE, 0xE7, 0xBE, 0x7F, 0xAE, 0xFF, 0xD6, 0x5A, 0xDF, 0xCF, 0xFB, 0xBE, 0xCF, 0xF3, 0x88, 0x9C, 0xC9, 0x6F, 0x35, 0xB5, 0xBE, 0x01, 0x7A, 0xBE, 0xB6, 0x4F, 0x0C, 0x10, 0x37, 0x77, 0x64, 0x29, 0x35, 0x78, 0x45, 0x3F, 0xF3, 0x8E, 0xF3, 0xCE, 0xD0, 0xBD, 0x62, 0xE3, 0xB2, 0xB3, 0xD7, 0x11, 0xAF, 0x3B, 0xD5, 0xB8, 0xBF, 0x22, 0xD0, 0x61, 0x4F, 0x88, 0xC1, 0x87, 0x76, 0xAE, 0xDC, 0x19, 0x76, 0x45, 0xC6, 0x7B, 0x26, 0x9C, 0x9B, 0x1D, 0x13, 0xC1, 0x2D, 0xF1, 0x53, 0xD1, 0x2F, 0x2C, 0xDB, 0xCE, 0x1E, 0xB3, 0xD4, 0x38, 0xA1, 0x9F, 0x06, 0x6F, 0xBD, 0x3F, 0xCC, 0x82, 0xFA, 0xCE, 0x86, 0x81, 0xB4, 0xC9, 0x61, 0xC7, 0x6C, 0xB0, 0xD0, 0xBE, 0x24, 0x13, 0x45, 0x81, 0x88, 0x16, 0x09, 0xE2, 0x1C, 0xDD, 0x7A, 0xAF, 0x98, 0xA4, 0x9A, 0x4D, 0xE1, 0x13, 0x61, 0xFB, 0x4D, 0x97, 0x65, 0x89, 0x69, 0xCD, 0x2B, 0x52, 0x64, 0x42, 0x5A, 0xF2, 0x6A, 0xC3, 0x93, 0x08, 0x61, 0x91, 0x66, 0xC0, 0xD8, 0x0B, 0x5E, 0x23, 0x90, 0x69, 0x5D, 0xE4, 0xEA, 0xEF, 0x2A, 0x06, 0x8C, 0xF7, 0x5D, 0x66, 0xAA, 0xB9, 0xC5, 0x71, 0x45, 0x6B, 0xA7, 0xC2, 0x7F, 0x31, 0x38, 0x28, 0x4F, 0x51, 0x13, 0xB1, 0xD9, 0x75, 0xD8, 0x51, 0xAE, 0x45, 0x45, 0xCE, 0xB8, 0xB3, 0x42, 0x62, 0x03, 0x15, 0xF6, 0x35, 0x99, 0xA8, 0xA6, 0x65, 0x29, 0x55, 0x54, 0x71, 0x09, 0xC2, 0x93, 0x97, 0x9D, 0x72, 0x5E, 0x01, 0xDF, 0x25, 0x2B, 0xCB, 0xCE, 0x00, 0x57, 0xB2, 0xA1, 0xE9, 0x07, 0x21, 0xB1, 0x76, 0xD5, 0x33, 0xEE, 0x3A, 0xE8, 0x09, 0xBC, 0xF7, 0xD2, 0xCC, 0xA0, 0x66, 0xBE, 0x57, 0x36, 0x13, 0xB1, 0x58, 0xE4, 0x38, 0x75, 0x37, 0xDA, 0xEB, 0x0C, 0x66, 0x68, 0xDD, 0x49, 0x5A, 0x54, 0xD4, 0xB2, 0xE8, 0x60, 0xC5, 0x03, 0xF5, 0x1E, 0xC3, 0x99, 0x29, 0xAE, 0xF6, 0x6A, 0xEF, 0x1D, 0x9C, 0x71, 0x1A, 0xBD, 0xC4, 0x6A, 0x17, 0x05, 0xEA, 0x1C, 0xD9, 0xAA, 0x92, 0x0B, 0xCC, 0xFA, 0x1B, 0x82, 0x43, 0xB6, 0xA4, 0xE6, 0xF1, 0xDD, 0xB1, 0xC3, 0xE1, 0xA6, 0x5D, 0xFE, 0xA9, 0x9A, 0xE4, 0x5F, 0x45, 0x5D, 0x0C, 0xCE, 0xDE, 0x29, 0x9F, 0x7D, 0x64, 0xA9, 0x19, 0xB4, 0x0E, 0xF1, 0x6D, 0x31, 0x0C, 0xA2, 0x50, 0x5C, 0x60, 0x27, 0xDC, 0x19, 0xF3, 0xFE, 0x3C, 0xD8, 0x0A, 0xCE, 0x04, 0xC7, 0xB4, 0x7E, 0x01, 0x42, 0x35, 0xE3, 0xCF, 0xDA, 0x04, 0x38, 0x8B, 0x74, 0xAF, 0x56, 0x07, 0xFE, 0x66, 0xCB, 0x96, 0x27, 0xE1, 0x7A, 0xD4, 0xC4, 0xC2, 0xDC, 0xB4, 0x96, 0xFE, 0x4E, 0xF5, 0x54, 0xFF, 0xBD, 0x0D, 0x8E, 0x0E, 0x7F, 0x8C, 0x9D, 0x21, 0xF7, 0x89, 0xB3, 0x46, 0x8B, 0x16, 0x27, 0x32, 0x38, 0x2E, 0x8F, 0xAB, 0x02, 0x75, 0x9E, 0xB4, 0x85, 0xBD, 0xFE, 0x16, 0x46, 0x8D, 0xF8, 0xBC, 0xA8, 0xC7, 0x9A, 0xDC, 0xA6, 0xFF, 0x74, 0xF3, 0x0B, 0x5B, 0xBF, 0xF2, 0xD3, 0x95, 0xF6, 0x6C, 0xC8, 0x4E, 0xBF, 0xE7, 0x95, 0xC2, 0x90, 0x1D, 0x81, 0x0B, 0xB2, 0x39, 0x6C, 0xB7, 0x1A, 0x32, 0xBA, 0x44, 0xAA, 0x9C, 0xA5, 0xCE, 0x68, 0x5A, 0x7E, 0x65, 0xF1, 0xBA, 0x38, 0xF8, 0xD2, 0xFE, 0x57, 0xE2, 0x3F, 0x9F, 0x16, 0x5C, 0xF7, 0xDD, 0x5F, 0xFF, 0xF1, 0x23, 0xDB, 0xFF, 0xA2, 0x77, 0xD1, 0xA6, 0x9F, 0x50, 0x07, 0x45, 0xBA, 0xF3, 0xA8, 0x3E, 0x25, 0x4D, 0xCE, 0x6B, 0xE9, 0x22, 0x5C, 0x0C, 0xA9, 0x71, 0xB5, 0x8D, 0x7A, 0xD5, 0x22, 0x0A, 0x7C, 0xD7, 0x83, 0xA9, 0x9E, 0x7C, 0x75, 0xF5, 0x85, 0xCF, 0x65, 0xFF, 0xC7, 0xEB, 0x2F, 0xFA, 0xB5, 0x92, 0xC8, 0xDC, 0x9A, 0xF6, 0x4B, 0x0F, 0x47, 0x06, 0x99, 0x3A, 0x30, 0x9B, 0xF0, 0xC2, 0xD3, 0xF2, 0x42, 0x70, 0x6A, 0x6E, 0xEC, 0x91, 0x6B, 0x6C, 0x14, 0xE7, 0x34, 0xAF, 0x1F, 0xA3, 0x58, 0x64, 0x05, 0x37, 0x3B, 0x35, 0xAD, 0x28, 0xAC, 0x25, 0xBC, 0xF4, 0xCD, 0xA3, 0x2F, 0xED, 0xBA, 0xD6, 0x94, 0xEB, 0x2D, 0xBD, 0xF1, 0xCC, 0xCD, 0xDF, 0x3E, 0xFA, 0xA9, 0x17, 0xBD, 0x65, 0x2B, 0x4D, 0xCF, 0x5E, 0xFF, 0x49, 0x21, 0xA5, 0x47, 0x25, 0x50, 0x8C, 0x47, 0x58, 0xA4, 0xE1, 0x64, 0x41, 0xA6, 0xAA, 0x56, 0x36, 0xB1, 0xD3, 0xBD, 0x23, 0x24, 0xCE, 0x48, 0x51, 0xBB, 0x3C, 0x6E, 0x67, 0x92, 0xD1, 0x6D, 0x27, 0x1A, 0xFE, 0x76, 0xAB, 0x57, 0x56, 0x82, 0x7E, 0x48, 0x4B, 0x13, 0xE1, 0x21, 0x3B, 0xED, 0x2D, 0x76, 0xB3, 0x3A, 0xB7, 0x7D, 0x3A, 0xD8, 0x69, 0x57, 0xA9, 0xF1, 0x8D, 0xAF, 0x68, 0xFB, 0xB5, 0x3C, 0x15, 0x73, 0xEF, 0x52, 0x60, 0xBB, 0x2C, 0x50, 0x3D, 0x6E, 0x8F, 0xBD, 0x43, 0x66, 0xAB, 0xBC, 0x3F, 0x67, 0xDB, 0x25, 0xEA, 0x94, 0x4A, 0xFA, 0x65, 0x16, 0x25, 0xAA, 0x8F, 0x69, 0x2F, 0xE4, 0xD3, 0x43, 0x38, 0xD8, 0x9B, 0x54, 0x9D, 0x4A, 0x78, 0xF0, 0xB0, 0x7F, 0xD0, 0xAA, 0xB0, 0x0F, 0x7E, 0xFB, 0x6B, 0xB6, 0x4B, 0x8D, 0x53, 0x60, 0xFC, 0x50, 0x34, 0x89, 0x6A, 0x55, 0x2E, 0xAB, 0xE4, 0x46, 0x11, 0x29, 0x4E, 0xB8, 0xCE, 0x06, 0xD2, 0xEC, 0x2C, 0x35, 0xD2, 0xFC, 0x0B, 0x11, 0x2B, 0xB7, 0xAA, 0x6B, 0x97, 0x31, 0x32, 0xF4, 0xD3, 0xDA, 0x04, 0x10, 0x25, 0xEE, 0x71, 0x91, 0xCE, 0xA5, 0xEB, 0xC1, 0xAD, 0x72, 0xEB, 0xC6, 0xE6, 0xA0, 0xCB, 0x9E, 0x90, 0xBB, 0xFE, 0xFE, 0x69, 0x9A, 0xB4, 0x5D, 0xE2, 0x64, 0x60, 0xC1, 0xEF, 0xB3, 0xF3, 0xE4, 0xA0, 0xFB, 0x51, 0x91, 0x23, 0xB6, 0x8B, 0x86, 0x89, 0x45, 0xD7, 0x31, 0x73, 0xA7, 0x11, 0x77, 0xEA, 0x42, 0x30, 0xDD, 0x36, 0x64, 0xDE, 0x6D, 0x18, 0xA4, 0x81, 0x75, 0x20, 0xFA, 0x44, 0x19, 0x1E, 0xA0, 0x8F, 0x12, 0xD6, 0x81, 0xF2, 0xAA, 0x6D, 0x6A, 0xD8, 0xEC, 0xBA, 0x7B, 0xC0, 0xBB, 0x37, 0xD0, 0xF6, 0xC4, 0xD8, 0xC2, 0x79, 0xFF, 0x26, 0xCB, 0xF5, 0x89, 0x6B, 0x81, 0x46, 0x3B, 0x51, 0x95, 0x24, 0xFD, 0xCA, 0x3E, 0x24, 0xD7, 0xA9, 0x98, 0xF0, 0x33, 0xC1, 0x23, 0x76, 0xB7, 0xDC, 0xDA, 0x71, 0xDA, 0x91, 0xA0, 0x0F, 0x8B, 0xDA, 0xBE, 0x52, 0x79, 0x8D, 0x6D, 0x6A, 0xA6, 0xF0, 0x86, 0x2D, 0xED, 0x7A, 0xD5, 0xC3, 0x6F, 0xC5, 0x55, 0x91, 0xC0, 0x09, 0x19, 0xB0, 0xEA, 0x55, 0x8A, 0x4A, 0x0B, 0xC9, 0xF0, 0xCA, 0xC0, 0x7E, 0xEB, 0xD0, 0xC0, 0x76, 0xDF, 0xB9, 0xE0, 0xB8, 0xED, 0xFA, 0x59, 0xB9, 0xDE, 0x20, 0x4E, 0x8A, 0xBE, 0xF9, 0x7A, 0x65, 0xD2, 0x44, 0x3F, 0x60, 0xD0, 0x41, 0x2A, 0xA0, 0xE1, 0xC3, 0x02, 0x34, 0x0C, 0x0C, 0x60, 0x88, 0x69, 0x16, 0x40, 0x3B, 0x24, 0xC6, 0xA8, 0x00, 0x2D, 0x5A, 0xC4, 0x92, 0xAC, 0x8D, 0xFA, 0xDB, 0xAD, 0x83, 0x76, 0xFB, 0xE7, 0xD3, 0x83, 0xF1, 0xF2, 0xA2, 0xDC, 0xF2, 0xF9, 0x2F, 0xD8, 0xF9, 0x6A, 0x8A, 0x42, 0x19, 0x43, 0xAA, 0x2A, 0x57, 0x33, 0xD6, 0x5F, 0x2C, 0xA7, 0x55, 0x2C, 0xAB, 0x42, 0x7B, 0x42, 0x6A, 0x1D, 0x11, 0x66, 0x81, 0x7F, 0xC4, 0xEC, 0x31, 0x4E, 0xEB, 0x27, 0xFF, 0x29, 0x56, 0x7C, 0x8E, 0xF6, 0xE0, 0x9D, 0x94, 0x58, 0x8E, 0xC8, 0x06, 0x75, 0xE5, 0x0B, 0x3F, 0x11, 0x51, 0x2A, 0xC3, 0xAE, 0xF0, 0x4E, 0x1A, 0x19, 0x8E, 0x23, 0x81, 0x29, 0xF3, 0xD7, 0x10, 0x18, 0xA2, 0x6E, 0xEE, 0xE3, 0x77, 0x5E, 0x5F, 0xF8, 0xDD, 0x32, 0xCF, 0xD8, 0xFB, 0xC1, 0x09, 0x95, 0x43, 0xF3, 0x43, 0xDF, 0xD3, 0x33, 0x54, 0xB8, 0xAA, 0x73, 0xEE, 0xB0, 0xA2, 0x64, 0x81, 0x3A, 0x20, 0x3F, 0xA6, 0x1D, 0x17, 0xA3, 0x5C, 0x57, 0xEF, 0xC9, 0xDD, 0xAA, 0x54, 0x95, 0x9B, 0x7E, 0x3B, 0x59, 0x16, 0x72, 0xEE, 0xEE, 0xE7, 0xB4, 0x58, 0x65, 0xFA, 0xEE, 0xD4, 0xC6, 0xE3, 0xB3, 0x0E, 0xCD, 0x9C, 0x58, 0xBB, 0x91, 0x94, 0xC0, 0xDE, 0x0F, 0x8A, 0xF2, 0x8E, 0xA9, 0x83, 0xFE, 0x33, 0xF3, 0x87, 0x57, 0x2E, 0x38, 0xB7, 0x9B, 0x07, 0x00, 0xB8, 0xEC, 0x9A, 0x8C, 0x2A, 0xBA, 0xB6, 0xAF, 0xED, 0xC2, 0x4D, 0xEF, 0x9E, 0xEF, 0xB6, 0x7C, 0xFE, 0xF9, 0x7F, 0xEB, 0x7C, 0xF6, 0x09, 0x9E, 0x29, 0x34, 0x92, 0xCD, 0x96, 0xBB, 0xC9, 0x8F, 0xD8, 0x56, 0xB9, 0xDC, 0x29, 0xD6, 0xFB, 0x9C, 0xB2, 0x94, 0x2D, 0xC4, 0xF1, 0x35, 0xD1, 0x43, 0x1A, 0x1E, 0x1A, 0x65, 0xA2, 0xDC, 0xA1, 0xA6, 0x8D, 0x5F, 0xA8, 0x0A, 0x8E, 0xAA, 0xC0, 0xD4, 0x13, 0x9A, 0x57, 0xBB, 0x2A, 0xDA, 0xAE, 0x9C, 0x30, 0x54, 0x93, 0x8C, 0x90, 0x67, 0x21, 0x50, 0x69, 0xB7, 0xD0, 0xE4, 0x49, 0x9D, 0x3C, 0x7E, 0x6F, 0xC7, 0x52, 0xC5, 0xD7, 0x3E, 0x37, 0xBB, 0x71, 0x71, 0xAF, 0x3F, 0xFA, 0x53, 0x7F, 0x0F, 0x8E, 0x5C, 0x23, 0x1E, 0x0B, 0x02, 0xC3, 0x56, 0x36, 0x96, 0xEF, 0xD8, 0xF2, 0x2E, 0xE7, 0x81, 0xB0, 0x49, 0xB7, 0x5B, 0x19, 0xC6, 0xC4, 0xFF, 0xBE, 0x21, 0x8A, 0xC4, 0x66, 0xD6, 0x81, 0x1E, 0x2F, 0x52, 0xC8, 0x35, 0xCF, 0xDE, 0x88, 0xB8, 0x5D, 0x33, 0x5F, 0x72, 0xF4, 0x9F, 0x26, 0x87, 0x66, 0x6B, 0x97, 0x9A, 0xF6, 0x54, 0x83, 0x59, 0xA8, 0xF7, 0x03, 0xC8, 0x12, 0x35, 0x0B, 0x46, 0xAA, 0x9E, 0xA2, 0xB5, 0x50, 0x16, 0x38, 0xA3, 0x8E, 0xAA, 0xA1, 0xF7, 0x56, 0x79, 0xBB, 0x83, 0xE3, 0x76, 0xEC, 0xE5, 0xC2, 0xCF, 0x0D, 0x3F, 0xFE, 0xF1, 0x98, 0x16, 0x08, 0x94, 0xCA, 0x33, 0xAA, 0x20, 0x7C, 0xEC, 0x95, 0xD3, 0x7F, 0x5D, 0x77, 0x7B, 0xEF, 0x4F, 0x3E, 0x33, 0xB3, 0xC1, 0x9B, 0x14, 0x88, 0x4F, 0xFB, 0x27, 0xD0, 0x07, 0xB5, 0xB3, 0x00, 0x81, 0xA3, 0xD6, 0x45, 0x48, 0xBE, 0xB6, 0xDA, 0xF2, 0xCC, 0x9C, 0x21, 0xA9, 0x23, 0xE6, 0x6F, 0x3D, 0xA9, 0xD3, 0xCF, 0x06, 0xAB, 0xED, 0x1D, 0xAA, 0x1C, 0xEC, 0x70, 0x5A, 0x38, 0x0E, 0xEF, 0xA7, 0xCC, 0x3D, 0xBF, 0x34, 0x03, 0x46, 0x85, 0x36, 0xA3, 0x45, 0x87, 0x97, 0x8F, 0x46, 0x7D, 0x70, 0x66, 0xB1, 0xE6, 0xF9, 0x87, 0x5E, 0xDE, 0x77, 0x63, 0xE4, 0xFD, 0xE4, 0xA7, 0x1F, 0xF7, 0x9B, 0xC1, 0x74, 0x79, 0x30, 0xE4, 0x2B, 0xA0, 0x5F, 0x14, 0xF5, 0x58, 0x60, 0x95, 0x48, 0x37, 0xC6, 0xFB, 0x3B, 0xE7, 0x52, 0x96, 0x52, 0xC3, 0x7F, 0xFC, 0xF1, 0x8B, 0x09, 0xC5, 0x2B, 0xDB, 0xFE, 0x90, 0xBC, 0xAA, 0xC6, 0xB3, 0xC9, 0x99, 0x9E, 0x50, 0xF9, 0x56, 0xE6, 0xF8, 0xE8, 0xEC, 0x86, 0x4F, 0x1D, 0x06, 0xC7, 0x15, 0x23, 0x06, 0xD8, 0xAB, 0x92, 0xE5, 0x0C, 0xF4, 0x76, 0x8F, 0x9D, 0xBF, 0xBB, 0x87, 0x4F, 0x3A, 0x27, 0x8D, 0x09, 0xCD, 0x6D, 0x3C, 0x9C, 0x71, 0xE5, 0xA1, 0xBD, 0x11, 0xAE, 0x1F, 0x60, 0x1D, 0x94, 0x5B, 0xD4, 0x66, 0x60, 0x5E, 0x4C, 0xB2, 0x1E, 0xB0, 0xC8, 0xC6, 0x04, 0xC6, 0x39, 0xAD, 0x9A, 0x40, 0x1B, 0x11, 0xE1, 0xA2, 0x12, 0x44, 0x8C, 0xE8, 0x10, 0x18, 0x17, 0xDE, 0x39, 0x3D, 0xFD, 0xF5, 0x85, 0x84, 0x6F, 0x4D, 0x0E, 0x1C, 0x9A, 0x68, 0x9C, 0x4B, 0xAE, 0xB2, 0xFD, 0x07, 0xEC, 0x69, 0xD9, 0xE7, 0xEA, 0xE0, 0x9C, 0x16, 0xD0, 0x2C, 0x00, 0x7B, 0x8B, 0x4C, 0x01, 0x77, 0x6F, 0x48, 0xA7, 0x91, 0xB5, 0x30, 0x13, 0xB9, 0x7E, 0x59, 0xF1, 0x03, 0x31, 0x95, 0xAF, 0xEE, 0x9A, 0xCB, 0xF8, 0xC8, 0x8D, 0xC9, 0xF1, 0x5D, 0xFA, 0x31, 0xB9, 0xEF, 0xD6, 0x4F, 0x8E, 0xAD, 0xB5, 0xCC, 0x40, 0x93, 0xAA, 0xCD, 0xDD, 0x1E, 0xB2, 0xD9, 0xE5, 0xF5, 0x02, 0x4B, 0xD3, 0x56, 0x93, 0xE3, 0xAC, 0x9D, 0x54, 0xFD, 0xBD, 0x8E, 0x7F, 0xD9, 0xD6, 0x7D, 0x3B, 0xFD, 0x47, 0xFD, 0xAF, 0x45, 0x7E, 0xFA, 0xB1, 0x15, 0xE1, 0x3E, 0x53, 0xE5, 0x07, 0xCF, 0x84, 0xED, 0x01, 0xFD, 0xAA, 0xB5, 0x1E, 0x6B, 0x11, 0x75, 0x04, 0x2F, 0xC5, 0xC0, 0x3A, 0x36, 0x61, 0x90, 0x64, 0x6F, 0x93, 0x9D, 0xF4, 0xEA, 0x7D, 0x7A, 0x89, 0x1D, 0x37, 0x3C, 0xE4, 0x28, 0x75, 0xEC, 0x73, 0x7C, 0xEF, 0xC4, 0xB7, 0xC0, 0x3A, 0xBD, 0xD4, 0xEE, 0x1A, 0x52, 0xE7, 0xE5, 0xBE, 0xE0, 0xE9, 0x50, 0xAF, 0xB3, 0xC6, 0x3C, 0x07, 0x70, 0x67, 0xBD, 0xB1, 0xF1, 0xB1, 0xF4, 0x5F, 0x5F, 0x68, 0x73, 0xBF, 0x73, 0xE0, 0xE9, 0x4F, 0x9E, 0xF8, 0xFE, 0x77, 0xFF, 0xF8, 0x1F, 0xB7, 0xE2, 0xEB, 0x0E, 0x34, 0xCE, 0x64, 0xCE, 0x3D, 0x38, 0xB5, 0xED, 0x4B, 0x2F, 0x80, 0x69, 0x12, 0xCD, 0xF7, 0xE7, 0xF0, 0x6F, 0xE5, 0x34, 0x06, 0xA7, 0x88, 0xA0, 0x0F, 0x0B, 0x48, 0x26, 0x8D, 0x43, 0x60, 0x8D, 0xC8, 0x06, 0x88, 0xA8, 0x0B, 0xCB, 0x0E, 0x39, 0xF3, 0x7A, 0x59, 0x54, 0xA9, 0x3B, 0x27, 0xA4, 0xF5, 0xCD, 0x4E, 0x63, 0x5D, 0xCA, 0xEA, 0xE6, 0xE5, 0xBB, 0x61, 0xBE, 0xCC, 0xB7, 0xD9, 0x6A, 0x75, 0x0D, 0xBC, 0x99, 0xF5, 0x7E, 0xE1, 0xBC, 0x2F, 0xEE, 0x6D, 0xD0, 0x4F, 0x6A, 0xD5, 0x1C, 0x01, 0x11, 0xCF, 0x41, 0x00, 0x31, 0xCE, 0x56, 0x08, 0x9F, 0x71, 0xED, 0x08, 0x89, 0x1E, 0x5D, 0x88, 0x5C, 0x17, 0xD6, 0x19, 0x52, 0xBE, 0x98, 0xA1, 0x2A, 0xD4, 0x2B, 0x1C, 0x84, 0x5B, 0xB9, 0x77, 0x3F, 0xBD, 0x34, 0xBF, 0x25, 0xE1, 0xCF, 0x47, 0x46, 0x23, 0x3F, 0x68, 0xFB, 0x6A, 0x05, 0x49, 0xE6, 0x80, 0xDE, 0x09, 0x20, 0x12, 0x45, 0x33, 0x12, 0xB4, 0x34, 0x2C, 0x34, 0x71, 0x48, 0xEC, 0xA3, 0x0F, 0xCC, 0x66, 0x2D, 0x57, 0x9C, 0x78, 0x3F, 0xEB, 0xB1, 0x86, 0xD8, 0xB8, 0xF0, 0xF5, 0xB0, 0x6C, 0x29, 0xE4, 0x19, 0x23, 0x02, 0xDE, 0x90, 0xB7, 0x9E, 0x99, 0xBD, 0xFE, 0xD5, 0xAC, 0x89, 0x4D, 0x77, 0xF7, 0x79, 0x8B, 0xD2, 0xD6, 0x82, 0xE3, 0x98, 0x6E, 0x02, 0x04, 0x0F, 0xD9, 0x5E, 0x88, 0x35, 0x56, 0x79, 0xDC, 0xBD, 0xD7, 0x0F, 0x7D, 0xA4, 0x3A, 0xA6, 0x65, 0x79, 0x56, 0xCD, 0xD7, 0xD5, 0x39, 0x15, 0x4B, 0x6D, 0x30, 0x60, 0xD4, 0x19, 0x5D, 0x5A, 0x12, 0x04, 0x7D, 0xC1, 0x51, 0x7B, 0x37, 0x18, 0xCD, 0x7A, 0x9B, 0x76, 0x22, 0x2C, 0x6D, 0x22, 0xF7, 0xCE, 0x99, 0x85, 0xBD, 0xD5, 0xDF, 0x1B, 0x18, 0xBB, 0xD5, 0x3E, 0x57, 0xF1, 0x4D, 0x17, 0xE8, 0x55, 0x62, 0x18, 0xC0, 0x98, 0xFD, 0x10, 0x78, 0x3A, 0x19, 0x44, 0x82, 0x76, 0x59, 0xA4, 0x01, 0x8D, 0xA4, 0xE3, 0x54, 0x39, 0xA3, 0xE5, 0xD3, 0x6D, 0x8B, 0xCC, 0xC9, 0xB5, 0x85, 0x2B, 0x2B, 0xC3, 0xC2, 0xBF, 0xFE, 0x85, 0xDB, 0x8D, 0xB3, 0xE3, 0x4B, 0x13, 0x9D, 0x31, 0xB3, 0x3B, 0xBD, 0x87, 0x83, 0x56, 0xDC, 0x04, 0x38, 0x5A, 0xF4, 0x78, 0x24, 0xEB, 0x65, 0xAD, 0x0D, 0xFD, 0xD7, 0x87, 0xC6, 0xF2, 0xEF, 0xA6, 0x96, 0x0E, 0xC6, 0x6C, 0x8C, 0x88, 0x0C, 0x9B, 0xED, 0x1F, 0x7A, 0xB0, 0x32, 0x32, 0x34, 0xEC, 0xF4, 0x6F, 0x07, 0xFD, 0x59, 0xD6, 0x36, 0x79, 0x1C, 0x38, 0x22, 0x9E, 0x67, 0x3F, 0x88, 0x14, 0x8E, 0x89, 0x02, 0x30, 0x52, 0xF5, 0xE3, 0xA2, 0xD5, 0x4C, 0xFE, 0x73, 0xCA, 0xCD, 0xB9, 0xBB, 0xD5, 0xDF, 0x5D, 0xF8, 0xD3, 0x9E, 0xA1, 0xAE, 0xA9, 0x98, 0xEF, 0xBF, 0xC5, 0x26, 0xED, 0x92, 0x88, 0xD4, 0x67, 0x41, 0x3F, 0xA3, 0x8D, 0x12, 0x00, 0x6B, 0xB3, 0x3D, 0x81, 0x19, 0x96, 0x1F, 0xD2, 0x6C, 0x8C, 0xBC, 0x5B, 0x9F, 0x92, 0x12, 0x73, 0x72, 0x55, 0xF7, 0x77, 0xBE, 0x9D, 0xDB, 0xF5, 0xD8, 0x6F, 0xDE, 0x59, 0xF7, 0x1B, 0xEF, 0xE7, 0xBF, 0xF3, 0x54, 0xD6, 0x9F, 0xFE, 0x12, 0xDE, 0xA1, 0x4E, 0xBD, 0x17, 0x98, 0x2F, 0x4B, 0x7C, 0x56, 0xF7, 0xBA, 0xE6, 0xA9, 0x65, 0x6A, 0x66, 0xA7, 0x6F, 0x3E, 0x6C, 0xEA, 0xDD, 0xC1, 0xE7, 0xEC, 0xCB, 0xCB, 0xBE, 0x9C, 0xA7, 0x2E, 0x9E, 0x2E, 0xEF, 0x19, 0xCD, 0x15, 0x71, 0x27, 0xA8, 0x72, 0x94, 0xF9, 0x8B, 0x8C, 0xE3, 0x62, 0x93, 0xD9, 0xE4, 0xCB, 0x03, 0xA4, 0xDA, 0x2B, 0xA6, 0x01, 0xC4, 0x79, 0x5C, 0xC0, 0x34, 0x83, 0x0C, 0x81, 0x1A, 0xA0, 0x8B, 0x83, 0x10, 0xDA, 0x13, 0x12, 0x2E, 0xFA, 0xEF, 0xEC, 0xD5, 0x66, 0x8D, 0x4F, 0x44, 0xFE, 0xAF, 0x91, 0x57, 0xC1, 0x1F, 0x61, 0xD4, 0x7F, 0xA1, 0xD3, 0x4C, 0x0E, 0x2D, 0x59, 0x3A, 0xED, 0xFA, 0xE4, 0x68, 0xC7, 0x62, 0xC1, 0x47, 0x8F, 0xD5, 0xEE, 0xFE, 0x76, 0x58, 0xFB, 0x23, 0x07, 0xDE, 0xB9, 0xFC, 0xDC, 0x7F, 0xAE, 0xBE, 0xF1, 0xE6, 0xB2, 0xBC, 0x13, 0x3F, 0x0D, 0x66, 0x2E, 0xC5, 0x4E, 0x1E, 0x78, 0x7C, 0x9E, 0x56, 0xA7, 0x4F, 0x3B, 0x0A, 0x8C, 0xAA, 0x16, 0x51, 0x0B, 0x58, 0xCC, 0xA8, 0x74, 0x60, 0x06, 0x27, 0x4E, 0x60, 0x81, 0x75, 0x22, 0x0E, 0x38, 0x4E, 0x29, 0xDB, 0x21, 0xB2, 0xD0, 0xB5, 0xDB, 0xF4, 0x76, 0xF4, 0x3F, 0xB0, 0xDD, 0x7D, 0x36, 0xA4, 0xFF, 0xE5, 0xDD, 0x86, 0xB5, 0x5D, 0x95, 0xD0, 0x0F, 0x81, 0x51, 0x69, 0xC9, 0x79, 0x4F, 0xEC, 0x52, 0xB3, 0x55, 0x27, 0x8B, 0x62, 0x5E, 0x03, 0xB1, 0x4B, 0x4C, 0x02, 0xA8, 0x3E, 0x55, 0x87, 0x01, 0xFA, 0x15, 0xED, 0x24, 0xD8, 0xBD, 0x72, 0xB7, 0x32, 0x6E, 0xFF, 0x2C, 0xA6, 0x2A, 0xE2, 0x27, 0xAE, 0x12, 0xFB, 0x98, 0xED, 0x54, 0x67, 0xC9, 0x88, 0x48, 0x7A, 0x25, 0xE5, 0xED, 0x67, 0xA7, 0x0A, 0x5E, 0x5C, 0x23, 0x93, 0xD4, 0x65, 0x62, 0xC4, 0x27, 0x40, 0x73, 0x8A, 0x3E, 0x24, 0xA8, 0x4E, 0x9A, 0x90, 0xA0, 0x1A, 0x99, 0x42, 0x13, 0x31, 0x2A, 0x05, 0xA7, 0x1D, 0xEF, 0xDE, 0x68, 0x2E, 0x18, 0x97, 0xEF, 0x3D, 0xBA, 0xA1, 0x26, 0x41, 0x8F, 0x8C, 0x02, 0xDF, 0xBA, 0xA0, 0xC7, 0x4E, 0x8F, 0x2A, 0xEC, 0xB8, 0x32, 0xF8, 0xE5, 0xA9, 0xC4, 0x67, 0xBF, 0x4C, 0x8C, 0x5E, 0x23, 0xA6, 0xE8, 0x06, 0x55, 0xA6, 0x1A, 0x01, 0x98, 0xA4, 0xDA, 0x1E, 0x49, 0x49, 0x5A, 0x93, 0x16, 0x5E, 0xFD, 0xAF, 0xDF, 0x8E, 0x5F, 0xB6, 0xF2, 0x1F, 0xC2, 0xC6, 0x6E, 0xC4, 0x2C, 0xF4, 0x06, 0x32, 0xED, 0x46, 0x58, 0x1A, 0xB3, 0x92, 0xED, 0x36, 0x30, 0x31, 0x5C, 0xDA, 0x7A, 0xED, 0xC0, 0xE8, 0x8E, 0xE9, 0xA6, 0x85, 0xA9, 0xCA, 0x27, 0x07, 0x22, 0x27, 0x0A, 0xE6, 0x7A, 0xBF, 0x79, 0x88, 0x31, 0x47, 0xBB, 0x76, 0x89, 0x13, 0x80, 0x47, 0x44, 0x00, 0xA8, 0x6B, 0x6A, 0x14, 0x40, 0xEC, 0x16, 0x26, 0x00, 0x9B, 0xE8, 0x02, 0xB3, 0xCD, 0xC8, 0xD7, 0x72, 0xE9, 0xB8, 0xD1, 0x34, 0x59, 0x34, 0xBF, 0x51, 0x7B, 0x2A, 0xF3, 0xE0, 0x23, 0xCE, 0x55, 0x9D, 0xEF, 0x36, 0xE5, 0xF4, 0xA4, 0x64, 0xAC, 0xAE, 0x3B, 0x34, 0x79, 0x3E, 0xBF, 0x27, 0x7B, 0x6C, 0xDB, 0x2F, 0xA7, 0x64, 0xAB, 0x8C, 0x90, 0xA9, 0x8E, 0x28, 0x70, 0x94, 0x69, 0xC5, 0x78, 0xBD, 0x49, 0xBE, 0x72, 0x6B, 0x73, 0x44, 0xF2, 0x6B, 0x25, 0xEF, 0xF4, 0xDD, 0x39, 0xF8, 0xFC, 0x97, 0xC2, 0x4F, 0x84, 0xBD, 0x60, 0x5E, 0x18, 0x70, 0x84, 0xF7, 0xBB, 0x8A, 0xCD, 0xB8, 0xB7, 0x2B, 0xC4, 0x14, 0x41, 0x91, 0x07, 0x8E, 0x54, 0x3D, 0x41, 0x5B, 0x70, 0x9E, 0xEC, 0xD9, 0xFD, 0x5E, 0xF8, 0x5D, 0xE3, 0xE8, 0x37, 0xBA, 0x17, 0x46, 0x8E, 0xDD, 0x19, 0xF9, 0xCE, 0x34, 0xB3, 0x7A, 0x9A, 0x88, 0x23, 0x1A, 0xB4, 0x8D, 0xDA, 0x16, 0x24, 0x04, 0x72, 0xED, 0x11, 0xCC, 0x07, 0xD6, 0x85, 0xEF, 0x09, 0xAD, 0x79, 0x43, 0xAE, 0x3E, 0x16, 0xBE, 0x31, 0x24, 0x66, 0xFF, 0x2B, 0x77, 0xCE, 0x2D, 0x64, 0x2D, 0xF3, 0x5C, 0xF5, 0x3E, 0x7B, 0xFB, 0x33, 0xE6, 0x6B, 0x5F, 0x02, 0xAD, 0xCB, 0xBF, 0x59, 0xB5, 0x47, 0x6E, 0x00, 0xC7, 0xA1, 0xBB, 0x91, 0xAB, 0xBB, 0xC6, 0x26, 0x3E, 0x38, 0x1D, 0x51, 0xF6, 0x96, 0xF5, 0xAD, 0xC7, 0x7E, 0x7F, 0x6B, 0x6F, 0x8A, 0x77, 0x43, 0x5B, 0xC5, 0xDB, 0x3B, 0x3F, 0xF1, 0xAD, 0x60, 0x51, 0xD8, 0xFC, 0x8A, 0xB6, 0xA5, 0xBB, 0x57, 0x76, 0x39, 0x27, 0x8C, 0x22, 0x59, 0xA9, 0xDA, 0x28, 0x57, 0x45, 0x21, 0x12, 0x03, 0x89, 0x0B, 0x17, 0x89, 0x14, 0x89, 0xA3, 0x6C, 0x66, 0x33, 0x31, 0xF8, 0x18, 0xE5, 0xA4, 0x4C, 0xB0, 0x3B, 0xD9, 0x1D, 0x72, 0x25, 0x74, 0xD0, 0x71, 0xC9, 0x59, 0xFA, 0xC7, 0x2F, 0x3A, 0x37, 0xE8, 0x5F, 0x99, 0xFA, 0xB1, 0xF6, 0x43, 0xF0, 0x6C, 0x98, 0x24, 0xE6, 0xB3, 0x8B, 0x81, 0x85, 0xF0, 0x4F, 0x67, 0xBD, 0x98, 0x7C, 0xF8, 0xCE, 0xA5, 0xEF, 0xEC, 0xFD, 0xFB, 0xBE, 0xB7, 0x2F, 0xBC, 0xF7, 0xC6, 0x4E, 0x57, 0x65, 0x55, 0x6C, 0xD8, 0xF9, 0xD0, 0xFE, 0xB9, 0x4B, 0x63, 0xA7, 0xCD, 0x23, 0xCB, 0x70, 0xB4, 0x5E, 0x6B, 0xC7, 0x60, 0x9D, 0xD8, 0xC9, 0x11, 0x22, 0xD4, 0x0E, 0xD5, 0x4B, 0x34, 0xB5, 0x98, 0x18, 0xC4, 0xAB, 0x14, 0x26, 0x09, 0xE0, 0x52, 0x87, 0x19, 0x66, 0x40, 0x5C, 0xB2, 0x8E, 0x68, 0xFD, 0x68, 0xCE, 0x4B, 0x9E, 0x7C, 0xE7, 0x76, 0xC3, 0xF3, 0x1F, 0x9F, 0xD3, 0x0E, 0x8A, 0xDD, 0xA2, 0xE5, 0xD6, 0x7E, 0xC3, 0xDF, 0x64, 0x8F, 0xC8, 0x34, 0xF0, 0x75, 0xDA, 0xC7, 0xE4, 0x54, 0x44, 0x72, 0x60, 0xC6, 0xCE, 0x90, 0xBB, 0x43, 0x9F, 0x06, 0x91, 0x40, 0x06, 0x80, 0x2A, 0xC2, 0x0D, 0xE6, 0x79, 0x7D, 0x44, 0x6B, 0x5C, 0xAA, 0x0B, 0x1D, 0x73, 0x74, 0x6B, 0xBD, 0x6F, 0x9F, 0x88, 0xFD, 0xD2, 0xCA, 0xB8, 0xB0, 0x59, 0xF8, 0xFD, 0x4B, 0x6F, 0x3E, 0x3E, 0x39, 0xF5, 0xBD, 0x2F, 0x4D, 0x97, 0xCE, 0x47, 0xF8, 0xE6, 0x1F, 0xAB, 0xE4, 0xB0, 0xA3, 0x46, 0x6F, 0xE0, 0x0C, 0xA8, 0x93, 0x1C, 0x47, 0x03, 0x22, 0x49, 0x02, 0xE0, 0x10, 0x27, 0x41, 0xC4, 0x8B, 0x0A, 0xD1, 0xE9, 0x4B, 0x09, 0xDB, 0xE6, 0xEC, 0x73, 0x38, 0x67, 0x6F, 0xF9, 0xF7, 0xDA, 0x6F, 0xC8, 0x2C, 0xE8, 0xB9, 0xF2, 0xAE, 0xBA, 0xBB, 0xAF, 0xF4, 0x93, 0x73, 0x75, 0x8B, 0x2B, 0xFD, 0x35, 0x0F, 0xAD, 0x02, 0x47, 0xAD, 0x5E, 0x0E, 0x60, 0xF5, 0xCB, 0x53, 0x10, 0x7B, 0x38, 0xA2, 0x3F, 0x4C, 0xBE, 0xD2, 0xF0, 0xE0, 0x98, 0xA7, 0xCF, 0x39, 0x76, 0x5A, 0xDC, 0x7B, 0xCC, 0xF7, 0x8E, 0x95, 0x0F, 0x21, 0x39, 0xCE, 0x6D, 0x46, 0x34, 0x88, 0xD3, 0x7A, 0x87, 0xE8, 0x82, 0xEE, 0x0B, 0x6F, 0xFF, 0xF3, 0x9D, 0xC0, 0xF3, 0x7F, 0x7D, 0xA3, 0xFC, 0xBD, 0x17, 0xEF, 0x36, 0x1E, 0x58, 0xA6, 0xD2, 0xF5, 0x74, 0x91, 0xC3, 0x09, 0x20, 0x99, 0x61, 0x10, 0x87, 0x64, 0x86, 0xBC, 0x22, 0xB7, 0x68, 0x8D, 0x46, 0x81, 0xBE, 0xD5, 0x9E, 0xB6, 0xC7, 0x55, 0x91, 0x8A, 0x75, 0x74, 0x03, 0x0B, 0x44, 0x02, 0xBB, 0xC8, 0x13, 0x29, 0x6A, 0xDA, 0x91, 0x6F, 0xD4, 0x6B, 0xA3, 0xFC, 0xE0, 0xA1, 0xD6, 0xC8, 0x9F, 0xBB, 0x0B, 0xC1, 0x61, 0xE8, 0x9B, 0xC5, 0xF0, 0x6F, 0x8C, 0x4D, 0xC5, 0x8F, 0xB5, 0x3C, 0x70, 0xF9, 0x63, 0xFF, 0xDC, 0xD1, 0xFA, 0xD7, 0x8D, 0x13, 0xF3, 0xDF, 0x2E, 0x07, 0x67, 0x99, 0xA3, 0x15, 0x13, 0x42, 0x2E, 0x19, 0xD9, 0x70, 0xF3, 0xF8, 0xFB, 0xBE, 0x7B, 0xDA, 0x93, 0x47, 0xFF, 0x52, 0x31, 0x9A, 0x30, 0x53, 0xF7, 0x82, 0x3B, 0xA6, 0x37, 0xE2, 0xB6, 0xEB, 0xD0, 0xD3, 0x07, 0x5D, 0x2D, 0x46, 0x84, 0x1E, 0xB1, 0x18, 0xDE, 0xDB, 0x3E, 0x36, 0x3C, 0x53, 0x74, 0xFC, 0x85, 0xDE, 0xF1, 0xF7, 0x0A, 0x67, 0xD2, 0xBE, 0xF9, 0x34, 0xE8, 0x99, 0xDA, 0x29, 0xA2, 0x41, 0xCB, 0x11, 0x97, 0x00, 0xFC, 0xA7, 0xAC, 0xED, 0x68, 0x6B, 0x07, 0x1E, 0xE8, 0x5A, 0x76, 0xE4, 0x4A, 0x4E, 0x4A, 0x4A, 0xF4, 0xAC, 0xA7, 0xBA, 0xE8, 0xA9, 0x91, 0xAA, 0x19, 0xA7, 0x4C, 0x7C, 0xEB, 0xDC, 0x91, 0xCF, 0xE4, 0xFC, 0xF8, 0xDF, 0xBE, 0x0E, 0x2B, 0x93, 0xB5, 0xAC, 0x81, 0x16, 0x00, 0xA2, 0x7D, 0x7B, 0x1F, 0x48, 0xED, 0x3B, 0x3C, 0xB1, 0xED, 0xA1, 0x2B, 0x37, 0xBE, 0xF9, 0xF4, 0x1B, 0x6D, 0x4F, 0x7D, 0xD5, 0x47, 0xCF, 0xD5, 0xB6, 0xB1, 0xEC, 0x27, 0x7E, 0xF9, 0x08, 0x8F, 0x8F, 0x3D, 0x7C, 0x5A, 0x1E, 0xFE, 0x87, 0x0F, 0x1E, 0x3C, 0xBB, 0x2C, 0x3A, 0x74, 0xF6, 0x74, 0xAE, 0x7F, 0x4B, 0x50, 0x73, 0x96, 0x1A, 0x49, 0x9C, 0x16, 0x25, 0x38, 0xA9, 0x41, 0xC3, 0x44, 0xF2, 0xA6, 0xD8, 0x44, 0x01, 0x63, 0x7C, 0x51, 0xE5, 0xAB, 0x6A, 0xAE, 0xF0, 0x17, 0x2D, 0x5A, 0x4B, 0x12, 0xA7, 0x58, 0xEB, 0x38, 0x60, 0x74, 0x88, 0x0C, 0x6B, 0xCF, 0x2B, 0x39, 0xA3, 0xDF, 0x48, 0xDC, 0xA7, 0x4F, 0xAC, 0x3E, 0x19, 0xFE, 0xC9, 0xEF, 0x7C, 0xFD, 0x64, 0xE8, 0xBF, 0xDF, 0x1E, 0xDC, 0x9C, 0xFA, 0xD9, 0xCF, 0x7C, 0xF1, 0x57, 0x9D, 0xFF, 0xF5, 0x2B, 0x23, 0xFE, 0xE4, 0x47, 0x1E, 0x28, 0x5D, 0x51, 0x7D, 0xAF, 0xEE, 0x4E, 0x6B, 0x5A, 0x65, 0x4C, 0xFC, 0x8A, 0xCD, 0xBB, 0x16, 0x17, 0xB3, 0xFC, 0x17, 0x6C, 0x39, 0xF7, 0x59, 0x51, 0x2F, 0x2C, 0x31, 0xA2, 0xFD, 0x92, 0x71, 0x15, 0xA3, 0x5C, 0x98, 0xEA, 0x0A, 0x12, 0x70, 0x71, 0x8D, 0x04, 0x11, 0x8E, 0x29, 0xDB, 0x88, 0x54, 0xD5, 0xC4, 0x99, 0xC3, 0x5A, 0x96, 0x88, 0xE5, 0xCB, 0x61, 0x7B, 0xCD, 0x2C, 0xA3, 0xC9, 0x1E, 0x91, 0x1E, 0xB5, 0x4D, 0x75, 0x83, 0x31, 0xB3, 0xCB, 0x7B, 0x3E, 0x30, 0x03, 0x73, 0x87, 0x7C, 0x04, 0x5B, 0x57, 0x65, 0x11, 0xA3, 0xCE, 0xA8, 0xDD, 0x00, 0x5A, 0xA4, 0x56, 0x0A, 0x20, 0xD7, 0xC9, 0x4A, 0xD0, 0xCF, 0x68, 0x3B, 0xB5, 0xD1, 0xBB, 0x33, 0xAB, 0x09, 0x2F, 0x0C, 0xCD, 0x1B, 0x3B, 0xF1, 0x6E, 0xFB, 0x9D, 0xFC, 0x85, 0xEE, 0x8C, 0x8B, 0xAF, 0xE5, 0xBD, 0xB3, 0xEE, 0xCE, 0x8E, 0xAF, 0x5D, 0xC3, 0xA5, 0x47, 0x6A, 0xED, 0xE2, 0x12, 0x48, 0xA7, 0x8A, 0x03, 0x34, 0x76, 0xE0, 0x02, 0x34, 0xBD, 0x48, 0x6C, 0x46, 0xC3, 0x52, 0x27, 0x54, 0x36, 0xA8, 0x3C, 0xE6, 0x29, 0x5D, 0x4A, 0x89, 0x49, 0x0E, 0x97, 0xA1, 0x49, 0x77, 0x5E, 0xBF, 0xD7, 0xE5, 0x0B, 0xB1, 0xB2, 0x1E, 0x3C, 0xDA, 0x7F, 0x61, 0xBC, 0x72, 0x36, 0x7B, 0x57, 0xA1, 0x9A, 0xD6, 0x0F, 0x6B, 0x25, 0x9A, 0x0F, 0x64, 0xB9, 0xDA, 0x0C, 0xA1, 0xA3, 0x46, 0xBE, 0x56, 0x31, 0x9B, 0xF0, 0xE4, 0xFA, 0xB8, 0xEC, 0x15, 0x65, 0x27, 0x7E, 0xBD, 0x72, 0x8B, 0x7B, 0x79, 0x48, 0xDA, 0x42, 0x46, 0xF8, 0x3F, 0xBA, 0x0F, 0x9A, 0x47, 0x41, 0xFB, 0x98, 0xE1, 0xD2, 0xF2, 0xA0, 0x23, 0x7C, 0xE0, 0x3B, 0xEF, 0xAF, 0x2B, 0x1F, 0x7D, 0x75, 0xE4, 0xED, 0xDD, 0x77, 0xBC, 0x65, 0x7F, 0x23, 0xD3, 0xB5, 0x09, 0x26, 0x8D, 0x4E, 0x50, 0x99, 0x24, 0x80, 0xBB, 0xCF, 0x18, 0xD5, 0x36, 0xDE, 0xE9, 0xFF, 0xA8, 0xF6, 0xC8, 0x78, 0xE4, 0xEC, 0xE9, 0x73, 0x6F, 0x26, 0xDC, 0x0A, 0x9F, 0xBD, 0x94, 0x93, 0x3A, 0xB5, 0xEF, 0x5E, 0x86, 0x3F, 0xF5, 0xA3, 0x80, 0x48, 0xA7, 0x1A, 0x70, 0xE1, 0xE4, 0xB2, 0x30, 0xF5, 0x48, 0xCD, 0xD4, 0x52, 0x78, 0xE1, 0xD5, 0x82, 0x1B, 0x2F, 0x4D, 0x05, 0xE0, 0x6F, 0xF6, 0x3D, 0xE2, 0x5F, 0x95, 0x67, 0x45, 0x26, 0xEF, 0x5E, 0xDD, 0xBA, 0x7C, 0xF8, 0x47, 0x43, 0x6F, 0x9F, 0x98, 0x5C, 0x3F, 0xDF, 0xF9, 0xD1, 0xFE, 0x9B, 0x07, 0xA6, 0x73, 0x16, 0xB7, 0x65, 0xA5, 0x42, 0x68, 0x9F, 0x23, 0x1E, 0xC0, 0x59, 0xED, 0xE8, 0x85, 0xEB, 0xC7, 0xC6, 0x9B, 0xEE, 0x1E, 0xFD, 0xF2, 0xC2, 0x52, 0x91, 0x75, 0xCC, 0xCE, 0x18, 0x6F, 0xB4, 0x4D, 0x35, 0x48, 0x73, 0x74, 0xC3, 0xDB, 0x3B, 0x6F, 0x47, 0xCC, 0xC5, 0xEC, 0x2C, 0x00, 0xDD, 0xA7, 0x75, 0x00, 0x88, 0x42, 0xD6, 0x03, 0x04, 0x32, 0xAC, 0x9D, 0xF0, 0x58, 0x4D, 0x6C, 0x66, 0xF8, 0xD9, 0xDF, 0x1C, 0xC8, 0x8C, 0x8E, 0x0F, 0x5F, 0x99, 0xFD, 0xCC, 0x4F, 0x67, 0xB3, 0xBC, 0xFD, 0xFE, 0xFE, 0xDB, 0x29, 0x96, 0x69, 0xCF, 0xD8, 0x83, 0x20, 0x7C, 0xEA, 0x6F, 0x1D, 0x85, 0xF0, 0xBB, 0x92, 0xEB, 0x45, 0x69, 0x45, 0x30, 0x5B, 0xB5, 0x14, 0x30, 0x36, 0xBB, 0x67, 0xFE, 0xF1, 0xAB, 0x7F, 0x58, 0xBB, 0xE6, 0x05, 0x57, 0x6E, 0x5F, 0xDB, 0xF8, 0x86, 0x84, 0xDD, 0x49, 0x07, 0xC3, 0xF6, 0x2F, 0x3F, 0x7E, 0xEF, 0xA9, 0x5B, 0xA7, 0x1E, 0x8A, 0xF2, 0x1C, 0x88, 0xD8, 0x3A, 0x94, 0xB9, 0x7A, 0xD8, 0xD5, 0x10, 0x52, 0x06, 0x4B, 0x03, 0xC1, 0x29, 0x69, 0x5A, 0x43, 0x5C, 0x17, 0x06, 0x79, 0x14, 0x60, 0xE1, 0xC5, 0x02, 0x6A, 0xD5, 0x69, 0x1A, 0x41, 0x75, 0x93, 0xA1, 0x1A, 0xC0, 0xE8, 0xD4, 0xA3, 0x44, 0x3D, 0x68, 0x55, 0x8E, 0x0B, 0x46, 0x1B, 0xBC, 0xBD, 0x79, 0x3E, 0xF0, 0xC4, 0x36, 0x99, 0xF4, 0x6C, 0xC3, 0x7F, 0xAE, 0x79, 0xF8, 0x83, 0xCF, 0x5D, 0x1F, 0x39, 0x7B, 0xEB, 0xFB, 0x37, 0xCD, 0xCA, 0x5B, 0x64, 0xCA, 0x03, 0x0B, 0x89, 0xCB, 0x36, 0x7A, 0xAE, 0x3A, 0x1B, 0x3D, 0x11, 0xED, 0x3B, 0x56, 0x95, 0x85, 0x36, 0x85, 0x94, 0x7B, 0xC7, 0x22, 0x86, 0x43, 0x32, 0x94, 0x57, 0x45, 0xB1, 0x4F, 0x6C, 0xA0, 0xDA, 0x86, 0x49, 0x76, 0x73, 0x06, 0xB8, 0x80, 0x06, 0x20, 0x8E, 0x90, 0xCC, 0x59, 0xB0, 0x93, 0x54, 0x06, 0xC5, 0x10, 0xEA, 0x32, 0xD2, 0xB5, 0x78, 0xB0, 0x0C, 0xD5, 0xA4, 0x3C, 0x20, 0x66, 0xD5, 0x19, 0xAE, 0x80, 0x31, 0xB5, 0x63, 0xE1, 0xA0, 0x3F, 0x5B, 0x9B, 0x5A, 0x3C, 0x12, 0xF0, 0x59, 0xFB, 0x13, 0x46, 0x41, 0x6D, 0x62, 0x84, 0x47, 0x00, 0x93, 0x2C, 0x00, 0xD9, 0xA0, 0x86, 0x60, 0x59, 0x5E, 0xC8, 0x6E, 0xA3, 0x70, 0xFC, 0x6A, 0x78, 0x51, 0xD8, 0xFF, 0x32, 0xA5, 0xEF, 0xC5, 0x97, 0x87, 0x06, 0x7F, 0x39, 0xB5, 0xEF, 0x47, 0x1F, 0xF5, 0xA6, 0x06, 0xB6, 0xD8, 0x33, 0x2B, 0xD2, 0x40, 0x8F, 0x10, 0xBD, 0xE0, 0x2E, 0x0B, 0x39, 0x6A, 0xC8, 0x29, 0xB7, 0xEB, 0x9C, 0x23, 0x52, 0xF7, 0x4E, 0x9F, 0x9F, 0x1A, 0xBF, 0x67, 0xF9, 0xB3, 0x53, 0x72, 0x81, 0x5C, 0xF2, 0xC1, 0x4C, 0xD6, 0x6B, 0x45, 0xE3, 0xFC, 0x7C, 0x64, 0x6C, 0xD8, 0x71, 0xD3, 0x3D, 0x3D, 0xD8, 0xD7, 0x7A, 0xAB, 0x73, 0xF6, 0xF2, 0x3F, 0x3C, 0x39, 0x17, 0xB3, 0xB4, 0x39, 0xD8, 0xBC, 0xC6, 0xC7, 0xB4, 0x9E, 0x7E, 0x5F, 0x14, 0xD4, 0xCB, 0x4B, 0xF0, 0xC8, 0xE5, 0x18, 0xF7, 0xF2, 0x99, 0xDF, 0x5F, 0x7A, 0xB2, 0x31, 0xF6, 0xCD, 0xF0, 0xD6, 0xDF, 0x3C, 0x62, 0xBC, 0xA1, 0x8F, 0x6B, 0x5B, 0x21, 0xFC, 0xB7, 0x61, 0x9B, 0xCD, 0x69, 0xB8, 0xFC, 0xAD, 0x81, 0x1F, 0xBE, 0x1F, 0x5F, 0x6C, 0xFC, 0x31, 0xBE, 0x3F, 0x7E, 0xA2, 0xF7, 0xF0, 0xAF, 0xAC, 0x5E, 0xBC, 0xD4, 0x9B, 0x13, 0xA0, 0xD5, 0x89, 0x49, 0x70, 0xEC, 0x53, 0x35, 0x4C, 0x07, 0x9C, 0x9B, 0xCE, 0x3F, 0x36, 0x12, 0x4D, 0xC5, 0x6D, 0x67, 0x85, 0x7E, 0x4C, 0xEB, 0xFE, 0xCF, 0x17, 0x55, 0xB7, 0x9C, 0x55, 0x63, 0x39, 0x03, 0x40, 0xB7, 0x1A, 0x04, 0x20, 0x47, 0x5C, 0x04, 0x66, 0x59, 0xC0, 0xA7, 0xA4, 0x08, 0x17, 0xAD, 0x94, 0xF0, 0xE2, 0x54, 0xED, 0xDC, 0xE5, 0xA5, 0x18, 0xB0, 0x36, 0xCA, 0x30, 0x99, 0x04, 0x61, 0xEB, 0xCC, 0x5A, 0xDD, 0x7D, 0x3B, 0x69, 0xE3, 0xE1, 0x47, 0x1F, 0x7F, 0x60, 0xB0, 0xFC, 0xF8, 0x85, 0xAB, 0x8B, 0xC5, 0x37, 0xCF, 0xFF, 0x7B, 0xD5, 0xE2, 0x86, 0xC0, 0x51, 0x3B, 0x7D, 0x65, 0x23, 0x38, 0x34, 0xDD, 0x02, 0x7B, 0xC1, 0x3E, 0x24, 0xA3, 0xE0, 0x9D, 0x85, 0xF7, 0xDD, 0xF7, 0x7C, 0xCF, 0xE6, 0x04, 0x3A, 0xE5, 0x7E, 0x95, 0xEA, 0xF0, 0x29, 0xB4, 0x2E, 0xB1, 0x41, 0xEC, 0x05, 0xCA, 0x89, 0x03, 0xAD, 0x5D, 0x59, 0x6C, 0xB7, 0x76, 0x67, 0x9E, 0x48, 0xA8, 0x89, 0xEC, 0x3E, 0xD5, 0x92, 0x59, 0xB8, 0xF6, 0x46, 0x64, 0xD3, 0xF7, 0x96, 0x2F, 0x54, 0xF8, 0x7F, 0x17, 0xBC, 0x3A, 0xFF, 0x52, 0x70, 0xDA, 0xBE, 0x6E, 0x47, 0x40, 0x68, 0x9D, 0x39, 0xEF, 0x38, 0x01, 0xC7, 0xD3, 0xFE, 0xEB, 0x89, 0xDC, 0xBF, 0x01, 0xFD, 0xCF, 0xDA, 0x1F, 0xF8, 0x3E, 0xD3, 0xD6, 0x66, 0xAB, 0x50, 0x96, 0x67, 0x74, 0xF7, 0x95, 0xBC, 0x5F, 0xF7, 0x41, 0x72, 0xD2, 0x3A, 0x70, 0x8F, 0x2F, 0x66, 0x81, 0x6F, 0x3B, 0xC3, 0x98, 0x2B, 0xCB, 0x5E, 0x3B, 0x35, 0x9E, 0x39, 0xB7, 0x50, 0xB3, 0xC5, 0x1C, 0xD1, 0x4A, 0xC5, 0x99, 0x99, 0x27, 0xEC, 0x79, 0x35, 0xAF, 0x7C, 0x46, 0xBB, 0x48, 0xA4, 0x5D, 0x44, 0xE0, 0xFC, 0x10, 0x17, 0x02, 0x78, 0x18, 0xC6, 0xC9, 0xA8, 0x5D, 0xAB, 0x02, 0x6A, 0x93, 0x23, 0x2F, 0xAC, 0xD7, 0x31, 0xAF, 0x1D, 0xF3, 0x85, 0x3F, 0xB8, 0x2F, 0x62, 0xD8, 0x1D, 0xFF, 0xC3, 0x77, 0xE7, 0xD6, 0xF9, 0xF6, 0x2C, 0xCA, 0x77, 0x2E, 0x4E, 0x33, 0x53, 0x7B, 0x6F, 0xFA, 0x6B, 0xDF, 0x0A, 0xE4, 0xCB, 0xBA, 0x40, 0xFB, 0xB2, 0x76, 0x08, 0x3D, 0xAD, 0x9F, 0x81, 0x5B, 0x19, 0xF7, 0xF6, 0xFB, 0x4B, 0xB3, 0xE3, 0x5E, 0xEE, 0x7F, 0xB7, 0x7B, 0x5A, 0x6B, 0xF3, 0xAB, 0x79, 0x75, 0x98, 0x36, 0x96, 0xB8, 0xCE, 0x1E, 0x1A, 0x45, 0x3E, 0x16, 0x01, 0x24, 0x16, 0x60, 0x21, 0xD1, 0xC8, 0x16, 0x7B, 0x59, 0xAF, 0xCA, 0xAD, 0xAB, 0x56, 0xAF, 0xDC, 0xE9, 0x9A, 0x8E, 0x9A, 0x0C, 0x1B, 0x37, 0xB3, 0xDE, 0xDC, 0x1F, 0x9A, 0xEB, 0xC8, 0xD3, 0xC7, 0xBE, 0x7B, 0x43, 0x9A, 0xAA, 0x59, 0x65, 0xCD, 0x44, 0x1A, 0x3E, 0xD3, 0xAA, 0xB6, 0xB7, 0x99, 0x9B, 0x02, 0xCD, 0x56, 0xA3, 0xBC, 0xFC, 0xC8, 0x37, 0x40, 0x8D, 0x70, 0x88, 0x12, 0x20, 0x9D, 0x32, 0x00, 0x8E, 0x72, 0x19, 0xA2, 0x0E, 0x2C, 0x73, 0x3B, 0x1B, 0xDE, 0xBC, 0x36, 0xD0, 0x3E, 0xF1, 0xD2, 0xBC, 0xB1, 0xA3, 0x77, 0x6C, 0x78, 0xBA, 0x79, 0x21, 0xE7, 0xE3, 0x6B, 0x40, 0xF3, 0x88, 0x61, 0xD2, 0x1C, 0x51, 0x34, 0xD2, 0xB1, 0x54, 0xBC, 0xA1, 0x38, 0xBE, 0x66, 0xE5, 0x58, 0xD5, 0x17, 0xDE, 0x2D, 0xBC, 0x93, 0xB1, 0x10, 0xFE, 0x54, 0xE7, 0x54, 0xA2, 0x9D, 0xBD, 0x74, 0x2C, 0x25, 0x17, 0x88, 0xC3, 0x03, 0xCB, 0x0F, 0x3B, 0x9B, 0x1D, 0x75, 0x37, 0x73, 0xEF, 0x8E, 0x2D, 0x75, 0x05, 0xA3, 0x3E, 0xD1, 0xF4, 0xEE, 0xE8, 0x9D, 0xEE, 0x85, 0xC1, 0xCF, 0xB6, 0x30, 0xAF, 0x95, 0x70, 0x06, 0x40, 0x75, 0xA8, 0x70, 0x70, 0x1D, 0x34, 0x4B, 0xF4, 0xDD, 0x77, 0x32, 0x33, 0xC7, 0xE3, 0x8F, 0x46, 0xCC, 0xFF, 0xF8, 0x0D, 0xCF, 0xF3, 0x61, 0x15, 0x66, 0x0F, 0xAC, 0xEC, 0xF4, 0x34, 0x39, 0x0F, 0xC2, 0xE5, 0xF7, 0xFB, 0x9F, 0xB9, 0x5D, 0x5B, 0x38, 0xD5, 0x16, 0xF8, 0xCB, 0xE5, 0x9B, 0x1D, 0x55, 0x76, 0x30, 0x55, 0x39, 0xD9, 0x1A, 0x1A, 0x0D, 0xFA, 0xB0, 0x36, 0x09, 0xE2, 0xBA, 0x7D, 0x49, 0xB6, 0xCA, 0xB1, 0x0D, 0xD7, 0x1F, 0x2B, 0x7C, 0xE0, 0xC2, 0x0F, 0x9E, 0x12, 0xF1, 0xA2, 0x0D, 0xF7, 0xA9, 0x88, 0x37, 0xD3, 0x6F, 0x45, 0xCD, 0x16, 0x3C, 0xBC, 0x51, 0x8B, 0xD4, 0xCA, 0x45, 0xAF, 0xB3, 0x13, 0xD8, 0x23, 0x76, 0x90, 0x0F, 0x0C, 0xDD, 0xBF, 0xAF, 0x85, 0x85, 0x45, 0x1F, 0x23, 0x4C, 0x23, 0xF5, 0x62, 0x3D, 0x4B, 0xEC, 0x01, 0x69, 0xCA, 0x29, 0x72, 0x40, 0xA6, 0x69, 0x3D, 0x64, 0x40, 0x5C, 0xF5, 0xCA, 0xCF, 0x86, 0x4D, 0xBD, 0x52, 0x92, 0x9D, 0xF7, 0xD8, 0xBD, 0xE8, 0xDC, 0xA3, 0xB5, 0xFF, 0xC1, 0x5F, 0x0A, 0xC7, 0xF9, 0x09, 0x60, 0x07, 0xE4, 0x1E, 0x00, 0x7D, 0x83, 0xC8, 0x65, 0xDE, 0x5F, 0x2F, 0x77, 0x28, 0xB7, 0x19, 0x41, 0xBD, 0x76, 0x41, 0x9C, 0x67, 0x2F, 0xC8, 0x05, 0xE5, 0x06, 0xED, 0x38, 0xF1, 0xF4, 0xF9, 0x8D, 0x94, 0x53, 0xD1, 0xB9, 0x9E, 0x84, 0x1F, 0x3C, 0x95, 0x9E, 0x15, 0xF7, 0x5A, 0x44, 0x61, 0xD5, 0xD3, 0xBA, 0x5B, 0xEB, 0x12, 0x5E, 0xFB, 0x58, 0xB0, 0xC5, 0x7E, 0x58, 0x65, 0x83, 0x73, 0x46, 0x3F, 0x62, 0x24, 0xC0, 0x43, 0xBD, 0xCB, 0xD7, 0xAB, 0x02, 0x90, 0x3B, 0x54, 0x82, 0x56, 0x0B, 0xEA, 0x9A, 0x6A, 0x20, 0x4A, 0xDB, 0x3B, 0x34, 0xF4, 0x41, 0xA1, 0xF7, 0xDA, 0x23, 0xBF, 0x04, 0x23, 0x33, 0xD8, 0x03, 0xA0, 0x55, 0x69, 0x80, 0xBD, 0x49, 0xE6, 0x72, 0xDE, 0x39, 0x7B, 0x87, 0x85, 0x3D, 0xFE, 0xA4, 0x8F, 0x59, 0x40, 0x03, 0xE7, 0xB9, 0x8E, 0x49, 0x32, 0x5D, 0x58, 0x80, 0x64, 0x2B, 0x06, 0x00, 0x1A, 0x16, 0x60, 0x62, 0x12, 0x41, 0xAE, 0xCA, 0x52, 0x49, 0xCC, 0xB8, 0xB6, 0x3B, 0x46, 0xF4, 0xAE, 0x0F, 0xF2, 0x5C, 0xE7, 0x43, 0x12, 0x1D, 0xA5, 0x86, 0x3F, 0x90, 0x64, 0xF5, 0xD8, 0xA5, 0x91, 0xE7, 0x02, 0x35, 0x58, 0x56, 0xD5, 0xAA, 0x22, 0x8E, 0x1B, 0xAE, 0x0F, 0xC5, 0x15, 0xF3, 0xE2, 0x0A, 0x96, 0xD7, 0x0C, 0x5C, 0xB3, 0xCE, 0xAF, 0x19, 0xF4, 0xE2, 0xDF, 0x63, 0xED, 0x58, 0x63, 0x01, 0x71, 0xEC, 0x01, 0xA6, 0x30, 0x30, 0xB8, 0x04, 0xF8, 0x08, 0x60, 0x01, 0xE3, 0xCC, 0x63, 0xD0, 0x22, 0x32, 0xC8, 0xC7, 0x82, 0x60, 0x96, 0x1D, 0xC0, 0x70, 0xD5, 0x3A, 0xCE, 0xEB, 0x87, 0x7C, 0xFB, 0xC5, 0x46, 0xBD, 0x5A, 0x93, 0xDA, 0x84, 0x1C, 0x94, 0x4D, 0xAA, 0x1B, 0x0C, 0xE1, 0x52, 0x3D, 0xF4, 0xEB, 0xF5, 0x76, 0xAF, 0xDC, 0xA5, 0xAA, 0x56, 0xDF, 0x05, 0xC6, 0x55, 0x1B, 0x00, 0xBB, 0xA8, 0x03, 0x30, 0x22, 0xB5, 0x9D, 0x30, 0x37, 0x11, 0xA8, 0xB6, 0x46, 0x1E, 0x8D, 0xBF, 0x95, 0x3C, 0x31, 0xB9, 0x54, 0x9B, 0x1D, 0xE2, 0x9B, 0x97, 0xA5, 0xAA, 0x3C, 0x3C, 0x1F, 0xEC, 0x4A, 0xE9, 0x81, 0xA4, 0x84, 0xD8, 0x94, 0x70, 0xCF, 0xA5, 0xDD, 0x0F, 0x0C, 0x7A, 0x46, 0x9D, 0xC9, 0xCD, 0x6F, 0x5D, 0xCF, 0xBE, 0x99, 0x7B, 0xF7, 0xCA, 0x17, 0xFE, 0x04, 0xA2, 0x4F, 0x5C, 0x00, 0xD0, 0xD6, 0x8B, 0xAB, 0x10, 0xCC, 0x51, 0xB5, 0x6A, 0x22, 0x22, 0xA1, 0x77, 0xE1, 0xE6, 0xF4, 0xDD, 0xD6, 0x67, 0x2E, 0xDE, 0xAD, 0xF6, 0xED, 0x0A, 0x1E, 0x5F, 0xFB, 0x24, 0xFB, 0xB5, 0x33, 0x5A, 0x12, 0x88, 0x4D, 0xD6, 0x90, 0x74, 0xAB, 0x4D, 0x49, 0xB1, 0xD1, 0xF1, 0x9E, 0x6D, 0x0D, 0x6E, 0x77, 0x8A, 0xF3, 0x2B, 0x8E, 0xAA, 0xD7, 0x03, 0x0F, 0x3F, 0x17, 0xBD, 0x7E, 0x59, 0x03, 0xFC, 0xFE, 0xF9, 0xFE, 0xBE, 0xC9, 0xA4, 0x2F, 0xB7, 0xFD, 0x66, 0xEC, 0x5A, 0xFF, 0x7B, 0xEE, 0x1F, 0xFD, 0x29, 0x50, 0x6D, 0x37, 0x48, 0x2D, 0x6C, 0x1B, 0x38, 0x62, 0x75, 0x2F, 0x30, 0x6C, 0xED, 0x95, 0x05, 0x90, 0x51, 0xB6, 0x36, 0x63, 0xA5, 0xB7, 0xD6, 0xE9, 0xDA, 0x1A, 0x72, 0xCC, 0x18, 0xAB, 0x2C, 0xF6, 0x27, 0x5A, 0x6D, 0xF2, 0x2C, 0x57, 0x95, 0xC4, 0x47, 0x2A, 0xDB, 0xB5, 0x68, 0x71, 0x56, 0x78, 0x18, 0x04, 0xDA, 0x19, 0x27, 0x1F, 0xF0, 0xF0, 0x3F, 0x4B, 0xFB, 0xB0, 0xB7, 0x28, 0x43, 0xED, 0xA2, 0x01, 0xFE, 0xB4, 0xE3, 0xAD, 0x67, 0x26, 0x63, 0xE1, 0xB3, 0xF5, 0x69, 0xEF, 0xAF, 0xD9, 0x07, 0x4C, 0xAA, 0x7E, 0x76, 0x42, 0x4A, 0x43, 0xCC, 0x9F, 0x96, 0xC7, 0xFC, 0xC2, 0xBA, 0xDD, 0x3E, 0xF7, 0xD6, 0xD2, 0xE1, 0xF4, 0xAA, 0x9E, 0xBC, 0x91, 0xE9, 0xE9, 0x03, 0x5F, 0x2D, 0x07, 0x2D, 0xDB, 0xC8, 0xC7, 0x03, 0x62, 0x97, 0xC8, 0xC6, 0x07, 0x2A, 0x49, 0x9D, 0xC7, 0x08, 0xBD, 0xEC, 0xD8, 0xA4, 0xA5, 0xCC, 0x26, 0x24, 0x16, 0x46, 0x2E, 0xB8, 0x8F, 0x97, 0xDB, 0x44, 0x92, 0x88, 0xE7, 0x67, 0xD7, 0xB4, 0x3C, 0xF1, 0x2B, 0x71, 0x90, 0x6B, 0x2A, 0x45, 0x5D, 0x50, 0x7B, 0x41, 0xC6, 0xA9, 0x30, 0x65, 0x80, 0x9D, 0xA6, 0xAA, 0x54, 0x0C, 0x88, 0xF5, 0x24, 0xA8, 0x61, 0xD0, 0x4F, 0x89, 0x22, 0xBB, 0x0E, 0xD4, 0x06, 0xB1, 0x97, 0xAB, 0x7A, 0x20, 0x30, 0x12, 0x2C, 0x09, 0xC4, 0xAC, 0xAA, 0x23, 0x41, 0x9C, 0xC4, 0xC7, 0x61, 0x50, 0xD7, 0x89, 0x07, 0xDC, 0xAA, 0x42, 0x45, 0xB1, 0x47, 0xEC, 0x15, 0xE1, 0x0C, 0xC8, 0x4B, 0xC2, 0xE2, 0x0A, 0x6D, 0xAA, 0x85, 0xEB, 0x0C, 0x32, 0x26, 0xB2, 0xEF, 0x3B, 0xB2, 0x12, 0x00, 0x43, 0x79, 0x89, 0x65, 0x06, 0x8D, 0x71, 0xA9, 0xD1, 0x2B, 0x62, 0xF5, 0x78, 0xD1, 0x28, 0x66, 0x19, 0x99, 0x39, 0xBC, 0x76, 0x36, 0x22, 0xC5, 0x75, 0xE8, 0xAD, 0x37, 0x02, 0x97, 0xE4, 0x98, 0x1A, 0x7E, 0xAA, 0x60, 0x34, 0xF6, 0x6E, 0xAB, 0xF7, 0xC2, 0xEA, 0xB5, 0xC0, 0x51, 0x51, 0x4B, 0x00, 0x28, 0x21, 0x16, 0x43, 0xEC, 0x23, 0x8A, 0x04, 0xD9, 0x45, 0xB1, 0xC8, 0xA7, 0x91, 0x12, 0x1A, 0xD0, 0x90, 0xEC, 0xE0, 0x9C, 0x58, 0x27, 0x12, 0x48, 0xA1, 0x52, 0x5D, 0x55, 0xC3, 0x5C, 0xD7, 0x86, 0xD5, 0x3A, 0x0E, 0xAB, 0x8D, 0x44, 0x33, 0xCA, 0x2C, 0x89, 0xF6, 0x01, 0x35, 0xCC, 0x82, 0x1E, 0x13, 0x76, 0xC4, 0xEC, 0xD7, 0xEB, 0xC7, 0x32, 0x3D, 0x38, 0x13, 0x1D, 0x79, 0xBE, 0x71, 0x7B, 0x9B, 0xEC, 0x56, 0x63, 0x60, 0x3C, 0xBC, 0x6E, 0x55, 0xAA, 0x7B, 0x52, 0x37, 0x5F, 0x3D, 0xF8, 0xEE, 0xD6, 0x0F, 0x12, 0x56, 0x25, 0xB2, 0x83, 0x9D, 0x62, 0x33, 0x00, 0x09, 0x1C, 0x00, 0xB6, 0x8A, 0x36, 0xE1, 0xA5, 0xED, 0xE6, 0xDE, 0xD9, 0x0D, 0x4B, 0x17, 0x36, 0xD4, 0x31, 0x4F, 0x33, 0x1D, 0x6C, 0x04, 0x46, 0x58, 0x00, 0xA7, 0x3B, 0xC4, 0x6B, 0xE4, 0xCD, 0x19, 0x9F, 0x30, 0x93, 0xFF, 0xF0, 0x40, 0xDE, 0xF3, 0x73, 0x03, 0x1B, 0xC6, 0x4E, 0xCE, 0x46, 0x29, 0xC7, 0x62, 0x46, 0x60, 0x97, 0x7D, 0x30, 0xF6, 0x49, 0x7A, 0xC4, 0x02, 0xE7, 0x80, 0x04, 0x7D, 0x42, 0x0C, 0x72, 0x61, 0x6A, 0xFF, 0xE2, 0x60, 0xA0, 0xE2, 0x71, 0xA8, 0x53, 0x31, 0xAA, 0x82, 0x33, 0xD4, 0x0B, 0x43, 0x9C, 0x46, 0x82, 0x9D, 0x27, 0x4B, 0x60, 0x65, 0xBF, 0xFB, 0xAA, 0xB9, 0xFF, 0xED, 0xDA, 0x27, 0xA2, 0x62, 0xA3, 0xC3, 0xA7, 0x8F, 0xAD, 0x58, 0x8C, 0xB2, 0xDE, 0xB5, 0x2B, 0x48, 0xBC, 0xF6, 0xC8, 0x3B, 0x23, 0xD3, 0x13, 0x9F, 0xCD, 0xFC, 0x65, 0xF1, 0x2B, 0x8F, 0xBE, 0xB3, 0xFE, 0xF8, 0x73, 0xBE, 0x1A, 0xDB, 0x94, 0x69, 0xE1, 0xFD, 0x60, 0x84, 0xEB, 0x05, 0xC0, 0x5E, 0xCB, 0xB4, 0x2F, 0xC1, 0xE3, 0x4D, 0x0F, 0xBA, 0x57, 0x74, 0x9C, 0x4A, 0x7F, 0xFC, 0x5A, 0xDC, 0x37, 0x57, 0x4C, 0x3C, 0xFF, 0xB6, 0x35, 0x6E, 0x6F, 0x97, 0x1B, 0xE5, 0xC2, 0x7F, 0x55, 0xDE, 0xE8, 0x9B, 0xBA, 0x0C, 0xE6, 0x21, 0x23, 0x5E, 0xDB, 0x46, 0x38, 0xBD, 0xB8, 0xB9, 0xCA, 0x6A, 0xB8, 0xFF, 0x49, 0xFF, 0x17, 0x49, 0x03, 0x13, 0x03, 0x89, 0x13, 0x27, 0x4E, 0x24, 0x81, 0x0F, 0xCF, 0x65, 0x93, 0x8A, 0x50, 0x87, 0xC0, 0xA8, 0x15, 0x7F, 0x2B, 0x4E, 0x80, 0x8A, 0x50, 0x3E, 0xD5, 0x05, 0x61, 0x8F, 0x9B, 0x9B, 0x74, 0xDF, 0xBD, 0xB2, 0x87, 0xC6, 0x57, 0xBE, 0x18, 0x56, 0xF9, 0xDB, 0xEC, 0xDE, 0xA9, 0x31, 0xE3, 0xEE, 0xFA, 0xED, 0x5E, 0x19, 0x25, 0xC7, 0xD4, 0x50, 0x68, 0x25, 0xE8, 0x05, 0xA2, 0x14, 0x13, 0xEC, 0xC3, 0x6A, 0x00, 0x9E, 0x6A, 0x88, 0x2D, 0x59, 0x71, 0xE1, 0x85, 0xB7, 0x82, 0x91, 0x76, 0x92, 0xDC, 0xF5, 0x33, 0xA7, 0xDC, 0xA4, 0xA2, 0x28, 0x05, 0xD6, 0xD3, 0xAC, 0x7A, 0x40, 0xCF, 0xD5, 0xA4, 0xD6, 0x0E, 0xDE, 0xEC, 0x40, 0xBA, 0x7D, 0x1E, 0x66, 0xFB, 0x7D, 0x39, 0x96, 0x09, 0xFA, 0x39, 0x6D, 0x4A, 0xC4, 0x00, 0x4E, 0x6A, 0xB9, 0x0C, 0x0A, 0x55, 0x45, 0x9B, 0xA7, 0x75, 0x29, 0x3B, 0x38, 0x6C, 0x37, 0xC4, 0xFC, 0x10, 0xD8, 0x82, 0x0F, 0xD0, 0x28, 0xE3, 0x0C, 0x44, 0x64, 0x84, 0x46, 0x9B, 0x97, 0x7B, 0xAA, 0x97, 0xC5, 0x19, 0x29, 0x5A, 0x6C, 0xDB, 0x0B, 0x3E, 0xD3, 0xEA, 0x95, 0xB5, 0x8E, 0xA7, 0x84, 0x4F, 0xA4, 0xD3, 0xA5, 0x6D, 0x21, 0x95, 0x00, 0x16, 0x43, 0xC4, 0x10, 0x89, 0x07, 0xB7, 0xB6, 0x47, 0x64, 0x13, 0xA5, 0xB2, 0x54, 0x9D, 0x2C, 0x50, 0xD7, 0xF5, 0xD3, 0x2B, 0x4B, 0x5C, 0x7B, 0x4C, 0xDF, 0xCD, 0x97, 0xE3, 0x8D, 0x15, 0x2F, 0xBA, 0x2E, 0xDD, 0x3E, 0xD2, 0x53, 0x3C, 0xF1, 0xEF, 0x73, 0xE3, 0x6B, 0x0F, 0x07, 0xA7, 0xAC, 0x72, 0x99, 0xAC, 0x05, 0x40, 0xA4, 0x89, 0x78, 0x30, 0x2A, 0xB5, 0x61, 0x91, 0x10, 0xB8, 0xB4, 0x6A, 0xCC, 0xD9, 0x65, 0xE6, 0xFC, 0x6B, 0xB1, 0x15, 0xAD, 0x9A, 0x54, 0xD9, 0x9D, 0xE6, 0x60, 0xA9, 0xB4, 0x54, 0x9F, 0xE1, 0xB1, 0xB2, 0xED, 0x36, 0xD9, 0x2F, 0x22, 0x4C, 0xD3, 0xC8, 0xD2, 0xAE, 0x2B, 0x4F, 0xD4, 0xE4, 0xB2, 0x42, 0x67, 0x7C, 0xF0, 0x8C, 0x58, 0x2F, 0x72, 0xC4, 0x69, 0xE1, 0x5E, 0x2C, 0xF7, 0xAD, 0x0F, 0xAE, 0x0F, 0x8B, 0x7A, 0xF8, 0xC2, 0xAA, 0x0E, 0x77, 0xE9, 0xEF, 0xEE, 0x45, 0x4C, 0x86, 0xD5, 0x87, 0x14, 0x7B, 0x33, 0xED, 0x46, 0x95, 0xA5, 0x7C, 0x60, 0x78, 0x4F, 0x04, 0x06, 0x6D, 0xC3, 0x7D, 0xDC, 0xDF, 0x67, 0x6D, 0xB2, 0x4F, 0xAF, 0x08, 0x82, 0x70, 0xD3, 0x4A, 0x33, 0x90, 0x8C, 0x17, 0x38, 0x4F, 0x03, 0xD7, 0xC9, 0x03, 0x36, 0x93, 0x8C, 0x01, 0x4C, 0x31, 0x0F, 0x10, 0x4C, 0xB1, 0x53, 0xE0, 0xD3, 0xFB, 0x1F, 0x8F, 0x8A, 0xB9, 0xFC, 0x8F, 0xCF, 0xC8, 0xAE, 0xE0, 0xE3, 0xB2, 0xF7, 0x0D, 0xB7, 0xE3, 0x84, 0x96, 0x4C, 0x43, 0x52, 0x7F, 0x30, 0x4F, 0xE5, 0xA9, 0xD1, 0x95, 0x0F, 0xD1, 0x23, 0xF2, 0x44, 0x29, 0x30, 0xA2, 0xFA, 0xC8, 0xA3, 0x80, 0x5C, 0xB6, 0xD1, 0x0B, 0x20, 0xF2, 0x44, 0x05, 0x00, 0xD5, 0xF4, 0xA1, 0xB1, 0x47, 0x55, 0x03, 0x7C, 0xAA, 0x33, 0xA9, 0x3E, 0x6A, 0xDD, 0x0F, 0x6F, 0xF8, 0x35, 0x7B, 0x97, 0xF4, 0x4D, 0xEC, 0x1A, 0xF7, 0xDE, 0x49, 0x5C, 0x5A, 0xF8, 0x44, 0x4A, 0xE3, 0xBA, 0x57, 0xC7, 0xA7, 0x92, 0x4F, 0x2D, 0x5B, 0x3C, 0x14, 0xD8, 0x69, 0x67, 0x47, 0xBD, 0x06, 0x8E, 0x2D, 0xFA, 0x02, 0x80, 0xAF, 0x2C, 0xD8, 0x0E, 0x0F, 0x67, 0xC7, 0xC4, 0x2F, 0xEF, 0xFE, 0xD7, 0xB3, 0x8F, 0x95, 0xC6, 0xF8, 0x96, 0x5B, 0xCF, 0x2D, 0xCD, 0x75, 0x79, 0xBF, 0x14, 0x28, 0xF6, 0x2D, 0x04, 0xA3, 0xED, 0x5E, 0x95, 0x02, 0xC6, 0x1E, 0xDD, 0xA3, 0x69, 0x20, 0xF6, 0x30, 0xCD, 0x0E, 0x35, 0xCF, 0x35, 0xE2, 0x88, 0x90, 0xAF, 0x51, 0xC7, 0x02, 0x3E, 0xB6, 0x02, 0xC9, 0xB8, 0x41, 0x1D, 0xA6, 0x53, 0x8D, 0x88, 0x6C, 0xE5, 0x52, 0x27, 0xD9, 0xC2, 0x57, 0xA8, 0xE4, 0x12, 0x59, 0x60, 0x25, 0xDB, 0xBB, 0x54, 0x25, 0xBC, 0x36, 0x3E, 0xEC, 0x9A, 0x1E, 0x05, 0xD5, 0xC1, 0x65, 0x15, 0x09, 0x8E, 0x12, 0x6D, 0xAD, 0xB6, 0x0F, 0x26, 0x26, 0xE7, 0x5B, 0x7C, 0x9D, 0x6B, 0x8F, 0xAB, 0x75, 0xA2, 0x8A, 0x73, 0xA1, 0x8F, 0x03, 0x92, 0x71, 0x00, 0x35, 0x49, 0x31, 0x1A, 0xE3, 0xFA, 0x69, 0xCD, 0x05, 0xB1, 0x27, 0x97, 0x77, 0x86, 0xEE, 0xFE, 0x63, 0x57, 0x48, 0xA1, 0x31, 0xA6, 0xCD, 0x03, 0x5E, 0xA2, 0x39, 0x05, 0x81, 0x4A, 0xFB, 0x69, 0x39, 0x06, 0x72, 0xBB, 0x7A, 0x92, 0x72, 0x70, 0xA5, 0x39, 0x1A, 0xB4, 0x19, 0x70, 0x55, 0x7A, 0xF6, 0x38, 0xDB, 0x01, 0x37, 0xD9, 0x24, 0x00, 0x31, 0x78, 0x30, 0x41, 0xCE, 0xAA, 0x79, 0x86, 0x57, 0xB5, 0xFF, 0xD7, 0xD6, 0x40, 0xBC, 0xDD, 0x18, 0x7F, 0x9E, 0x63, 0x58, 0x94, 0x51, 0xA1, 0x47, 0x52, 0xC1, 0x90, 0xAA, 0x79, 0xF8, 0xF4, 0xCA, 0x81, 0xB0, 0xCA, 0x5F, 0x3F, 0xE7, 0x39, 0x61, 0x8C, 0x68, 0x99, 0x35, 0xBC, 0x3B, 0x7E, 0x37, 0xCB, 0x7B, 0x0C, 0xB4, 0x42, 0x6D, 0x9F, 0x80, 0xDF, 0xA8, 0x11, 0xCE, 0x31, 0x0A, 0x1C, 0x51, 0xB5, 0xB4, 0x01, 0x29, 0xAA, 0x59, 0x95, 0xF2, 0xB2, 0x34, 0xD4, 0x35, 0xB2, 0x59, 0xEB, 0x6E, 0x0D, 0xCD, 0x77, 0xF4, 0xC0, 0x4C, 0xBA, 0xF7, 0x74, 0x60, 0x3B, 0xDC, 0x4B, 0x5F, 0x5A, 0x19, 0xCC, 0x8F, 0x5D, 0x06, 0xB8, 0x48, 0x03, 0x50, 0xDB, 0x95, 0x01, 0x9E, 0x6C, 0xF3, 0xA8, 0xD1, 0x38, 0x9A, 0x12, 0xAE, 0x39, 0x63, 0x8C, 0x81, 0x8A, 0x97, 0xE7, 0x3A, 0x03, 0xE9, 0x76, 0xF3, 0x64, 0xAC, 0x38, 0x23, 0x72, 0x55, 0x1A, 0xE8, 0xDB, 0xB4, 0x52, 0x71, 0x11, 0x0C, 0xA9, 0x1D, 0x17, 0x99, 0x20, 0x6B, 0xD4, 0x24, 0xE5, 0xA0, 0xF2, 0xD5, 0x49, 0xD9, 0x05, 0x8E, 0x83, 0x7A, 0x95, 0x56, 0x03, 0xFA, 0x06, 0x7D, 0xBD, 0xB6, 0x19, 0x70, 0x09, 0x49, 0x0E, 0x91, 0xA2, 0x5C, 0x1D, 0x21, 0x0E, 0x8C, 0xDB, 0x81, 0x79, 0x7C, 0x57, 0xD6, 0x9C, 0x0A, 0xF4, 0x58, 0x31, 0xD2, 0x15, 0xF5, 0x22, 0x88, 0x68, 0x71, 0xEE, 0xBE, 0xEF, 0x98, 0x0B, 0xF7, 0x3B, 0x8C, 0x04, 0x91, 0xF0, 0xA1, 0x9F, 0xE9, 0xEF, 0xB2, 0x3A, 0xD1, 0x1E, 0xAC, 0x5B, 0x15, 0xE7, 0x3E, 0xFF, 0x6A, 0x67, 0xE6, 0xCF, 0xD7, 0x7E, 0x62, 0xA5, 0xF6, 0xCF, 0x97, 0x07, 0xBF, 0x3C, 0x1A, 0x37, 0x13, 0x0B, 0xA1, 0x8D, 0xDA, 0x73, 0xDA, 0xD5, 0xD0, 0x1E, 0x19, 0xAF, 0xC6, 0xE8, 0x70, 0xAD, 0x01, 0xB1, 0x89, 0x42, 0x00, 0xCE, 0x31, 0x0B, 0xC0, 0x76, 0x32, 0x01, 0xC4, 0x2C, 0xB5, 0x00, 0xFE, 0xBD, 0x16, 0xF0, 0xF0, 0xEE, 0x07, 0x92, 0x3D, 0x7B, 0xFF, 0x68, 0x3D, 0x70, 0x6E, 0xF9, 0x07, 0xA1, 0x27, 0x9B, 0x9C, 0x7D, 0xD6, 0xED, 0xDA, 0xF9, 0x99, 0xB4, 0x98, 0xB7, 0x36, 0xDC, 0x2A, 0x9A, 0x0D, 0x3F, 0xF9, 0xF3, 0xC5, 0xC2, 0x40, 0xB9, 0x9D, 0x15, 0xB7, 0x01, 0x1C, 0xED, 0x1F, 0x06, 0x00, 0xDE, 0xAA, 0x40, 0x34, 0x3C, 0xB5, 0xED, 0xD1, 0xE4, 0x07, 0x32, 0x5B, 0x63, 0x1E, 0xAA, 0x5B, 0x35, 0xE9, 0xF6, 0x7C, 0xE7, 0x7F, 0x07, 0xAA, 0xAC, 0x80, 0x8C, 0x9F, 0x1F, 0x7C, 0xFB, 0xE8, 0xED, 0xAB, 0xF3, 0xAD, 0x20, 0x12, 0x45, 0x3E, 0x93, 0x60, 0xBA, 0x1D, 0x1D, 0xBA, 0x07, 0xFC, 0xE9, 0x81, 0xED, 0x56, 0x1C, 0xD9, 0x9C, 0xA1, 0x9E, 0xB3, 0x7C, 0xFD, 0xFE, 0xA8, 0x03, 0x18, 0x62, 0x16, 0xB4, 0x54, 0xB6, 0x89, 0x58, 0x51, 0xAE, 0x35, 0x8A, 0x83, 0xEC, 0x17, 0x5F, 0xA5, 0x4A, 0xD5, 0x93, 0x0C, 0x7A, 0xA3, 0x96, 0xC2, 0x01, 0x88, 0xDA, 0xE4, 0xEE, 0x0B, 0x49, 0x05, 0xB5, 0xC0, 0xB8, 0x1A, 0x06, 0x67, 0x94, 0x71, 0x5C, 0xEF, 0x87, 0x29, 0x6B, 0xF1, 0xAC, 0x7F, 0xE3, 0xDA, 0x8F, 0xA9, 0x4C, 0x6B, 0x52, 0x96, 0xE0, 0x05, 0x47, 0xA3, 0x9E, 0x8F, 0x05, 0xF2, 0x9A, 0x8A, 0xC5, 0x58, 0x96, 0x10, 0x72, 0xDE, 0x18, 0x99, 0x74, 0xDD, 0x73, 0xFB, 0xCF, 0x58, 0x0D, 0xF3, 0x7F, 0xB7, 0x34, 0x12, 0xDC, 0x2B, 0x4C, 0x50, 0xA5, 0x9C, 0xA1, 0x0F, 0xD4, 0x35, 0xEF, 0x44, 0xB0, 0x05, 0xEC, 0x1C, 0xB9, 0x59, 0xEE, 0x03, 0x19, 0x27, 0x07, 0x55, 0x1A, 0x88, 0x06, 0x32, 0xD8, 0x0F, 0xCC, 0x30, 0xC1, 0x10, 0x10, 0xC5, 0x2C, 0x26, 0xC8, 0x8D, 0x2A, 0x82, 0xEE, 0xD5, 0x86, 0xBF, 0xD5, 0x32, 0xE4, 0xD5, 0x65, 0x3B, 0x40, 0x5C, 0x17, 0x3E, 0x08, 0x99, 0xD6, 0xCE, 0x8A, 0xCA, 0xF9, 0xB2, 0x80, 0x65, 0x4D, 0xDA, 0x5B, 0xDF, 0x8B, 0xD1, 0x0B, 0x1C, 0x11, 0x7A, 0x31, 0x13, 0x69, 0xD9, 0xD1, 0x39, 0x9E, 0xC3, 0xB0, 0xD4, 0x65, 0x27, 0xAA, 0x3A, 0x08, 0x96, 0xA9, 0xF5, 0xAA, 0x02, 0xE4, 0x09, 0xD9, 0xAF, 0x34, 0xB0, 0x5B, 0xAD, 0x3C, 0x79, 0x16, 0xAC, 0x03, 0xA2, 0x82, 0x56, 0x58, 0x5D, 0x18, 0x91, 0x1C, 0x96, 0x0A, 0x03, 0x3B, 0xEF, 0x54, 0xDF, 0xAB, 0x72, 0x9B, 0xF7, 0xFA, 0xFC, 0x5E, 0x6B, 0x68, 0xCD, 0x59, 0x66, 0xC4, 0x80, 0x38, 0x00, 0x60, 0x57, 0xC9, 0x62, 0x08, 0x3F, 0xEA, 0x3C, 0x60, 0xC4, 0x0D, 0xC4, 0x89, 0x7D, 0xDA, 0xAC, 0x56, 0xBC, 0x14, 0xEA, 0xCA, 0x77, 0x8E, 0x68, 0xA3, 0x20, 0xCA, 0x44, 0x12, 0xA9, 0xC0, 0x0C, 0x19, 0x24, 0x00, 0x65, 0x9C, 0xA6, 0x12, 0xEC, 0x58, 0x15, 0xA7, 0x7A, 0xC1, 0x2A, 0xB3, 0xD6, 0xC9, 0x76, 0x88, 0xDA, 0xEE, 0xF6, 0x85, 0x14, 0x80, 0xDA, 0xC9, 0x1E, 0x2E, 0xC1, 0x7C, 0xBF, 0xAF, 0x3B, 0xB8, 0x0B, 0x98, 0x52, 0x5B, 0xB8, 0x0A, 0xC6, 0xB2, 0x70, 0xF3, 0x9C, 0x9E, 0xB4, 0xFA, 0xC2, 0xA2, 0x2F, 0x98, 0x6E, 0xAF, 0x5B, 0x5E, 0xC3, 0x01, 0x11, 0xCD, 0xB9, 0xFB, 0x1F, 0x56, 0x0B, 0x20, 0xAE, 0x52, 0x0A, 0x60, 0xED, 0x96, 0x57, 0xD1, 0x8C, 0x75, 0x8E, 0x38, 0xDD, 0x6B, 0xF5, 0x25, 0xCC, 0x47, 0x0D, 0x2F, 0x6B, 0x3A, 0xFA, 0x33, 0x63, 0x4C, 0xEF, 0x15, 0x97, 0x66, 0xFA, 0x55, 0xAE, 0xFE, 0x19, 0xED, 0x28, 0x58, 0x63, 0xE2, 0x14, 0x35, 0x61, 0x2D, 0xD6, 0xBC, 0xDC, 0xA7, 0xCE, 0x9A, 0x5F, 0x05, 0x8E, 0x92, 0x0F, 0xC0, 0xD4, 0x87, 0x22, 0x88, 0x52, 0x36, 0x01, 0xD8, 0x47, 0x54, 0x36, 0x08, 0x53, 0x3F, 0xAA, 0xE5, 0xD2, 0x92, 0x1A, 0x1B, 0x7B, 0x6E, 0xF9, 0x99, 0xE7, 0xBE, 0xF0, 0xEE, 0xEC, 0xDD, 0xAB, 0xDE, 0xC0, 0xEA, 0xE9, 0x77, 0x9B, 0xA6, 0xF6, 0xDC, 0x2B, 0xF9, 0xF9, 0xA7, 0xEF, 0xA4, 0xCC, 0xB5, 0xFB, 0x2E, 0xA6, 0x6E, 0x00, 0xB3, 0x59, 0xF7, 0x00, 0x78, 0x8F, 0x05, 0x4E, 0xC0, 0xA3, 0xE1, 0xB1, 0x0D, 0xE1, 0xED, 0x2F, 0x9F, 0x2C, 0x5A, 0xF6, 0xE9, 0x60, 0xD2, 0xEE, 0x6F, 0x3D, 0xF6, 0x67, 0xE3, 0xDD, 0x2B, 0x1F, 0x8C, 0xDC, 0xD9, 0x34, 0xD6, 0xFB, 0xFE, 0x93, 0xF7, 0xBA, 0x92, 0x34, 0xE7, 0x61, 0xC7, 0x0E, 0x9D, 0x87, 0x47, 0x34, 0xA7, 0x36, 0x21, 0x4A, 0xE4, 0x0E, 0xB9, 0x53, 0xD5, 0xA9, 0xCA, 0x80, 0xEF, 0xEE, 0x35, 0x3B, 0x56, 0x26, 0x3E, 0x95, 0x39, 0x97, 0xEB, 0xDF, 0x68, 0x99, 0x0F, 0x3F, 0x0C, 0x5A, 0xAC, 0x28, 0xA5, 0x17, 0x64, 0x9A, 0xCC, 0x04, 0xA3, 0x57, 0xDB, 0x22, 0x22, 0x03, 0x59, 0xCE, 0x24, 0x63, 0x5E, 0x4B, 0x91, 0xE1, 0x76, 0xB4, 0xEC, 0x50, 0xE1, 0x4C, 0x8B, 0x2D, 0x62, 0x50, 0x54, 0xC3, 0x4C, 0xA7, 0x2F, 0x2B, 0xD0, 0x03, 0x54, 0xAB, 0x4E, 0x06, 0xC1, 0x4C, 0x34, 0x2A, 0xED, 0x3A, 0xF7, 0x56, 0x6F, 0x7F, 0xC0, 0x6D, 0x45, 0x44, 0xFE, 0x0E, 0x88, 0xFD, 0xF0, 0xBD, 0x44, 0x0D, 0x05, 0x00, 0x72, 0x9B, 0x3A, 0x05, 0x2B, 0xD6, 0x85, 0xA6, 0x3B, 0x0A, 0xDF, 0xEA, 0x98, 0x3A, 0xB7, 0x88, 0x3F, 0x63, 0xFA, 0x9E, 0x38, 0xCE, 0x02, 0xE9, 0x34, 0x53, 0x4E, 0x06, 0x5B, 0x40, 0x35, 0x70, 0x91, 0x03, 0xA0, 0x17, 0x8A, 0x31, 0xB1, 0x05, 0xF4, 0x4B, 0x9C, 0x63, 0x2F, 0xA8, 0x1A, 0x06, 0x19, 0x01, 0xE2, 0xEF, 0x2F, 0x22, 0x91, 0x38, 0x31, 0x40, 0x55, 0xAB, 0x70, 0xB5, 0x10, 0xD3, 0x4E, 0xBF, 0x2A, 0x56, 0x31, 0x62, 0x0D, 0x88, 0x03, 0x9C, 0x05, 0xD9, 0x22, 0x8A, 0xF0, 0x6A, 0x6D, 0xD3, 0xCD, 0x8B, 0xDD, 0x81, 0x93, 0x19, 0x0D, 0x0B, 0xC7, 0x7C, 0x07, 0xAC, 0x86, 0xE0, 0xF2, 0xE5, 0x95, 0xCE, 0x14, 0xE3, 0x98, 0xE7, 0x62, 0xE0, 0xA2, 0xBC, 0xA2, 0x4A, 0x68, 0xB3, 0x5D, 0x6A, 0x17, 0xAD, 0x62, 0x58, 0x5D, 0x57, 0x13, 0x2A, 0x4F, 0x94, 0x48, 0xAF, 0xDC, 0xAA, 0xDA, 0x44, 0x31, 0x05, 0x6C, 0x67, 0x44, 0xE5, 0x86, 0x4C, 0x9B, 0x5B, 0x8D, 0xF8, 0xAE, 0x14, 0x39, 0x6C, 0x67, 0xAB, 0x53, 0x0B, 0x81, 0xE0, 0x6E, 0x6B, 0x40, 0x06, 0x1E, 0xFA, 0x29, 0x15, 0x6A, 0x97, 0x3A, 0x40, 0x36, 0x88, 0x54, 0xD1, 0x0A, 0xC1, 0x6B, 0xD2, 0x52, 0xCD, 0x11, 0x39, 0xCE, 0x5A, 0x63, 0x5C, 0xEB, 0xFC, 0xBB, 0x47, 0xF5, 0x6D, 0xB2, 0x5D, 0x9D, 0xF6, 0xC5, 0xA8, 0x41, 0x92, 0x39, 0xAF, 0xA5, 0x09, 0x93, 0x00, 0x26, 0x16, 0x90, 0x83, 0x44, 0x6A, 0x0B, 0x22, 0x4F, 0x4C, 0xE0, 0xA5, 0x50, 0xAF, 0xC2, 0xD0, 0xBB, 0x75, 0xAF, 0x76, 0x45, 0x1C, 0x58, 0x28, 0x5B, 0x2C, 0x0D, 0x5C, 0xB5, 0x52, 0xBB, 0x62, 0xED, 0x70, 0x99, 0xA3, 0x9A, 0xE7, 0x24, 0x15, 0x1C, 0xC1, 0x05, 0x46, 0xC8, 0x59, 0xA3, 0x4D, 0x4B, 0x5C, 0xE5, 0xC1, 0x29, 0x27, 0x54, 0x13, 0x80, 0x3E, 0xA3, 0x4D, 0x00, 0x50, 0x4C, 0x36, 0x80, 0x3A, 0x43, 0x11, 0x40, 0x20, 0xDD, 0x4E, 0x86, 0x4F, 0x66, 0x3C, 0xDE, 0x1D, 0x33, 0xFF, 0x92, 0xF3, 0x23, 0xD3, 0x6B, 0xEE, 0x2D, 0xEF, 0xF9, 0xD3, 0xB6, 0x11, 0xFF, 0xE4, 0xDF, 0xDD, 0xCB, 0xA6, 0xD9, 0x3F, 0x13, 0x9C, 0xB3, 0xE7, 0xC1, 0x9A, 0xB6, 0x35, 0x19, 0xE1, 0x8E, 0xA1, 0x85, 0x8D, 0xEA, 0xD8, 0x87, 0x11, 0xA9, 0xC8, 0x03, 0xE0, 0x3C, 0x45, 0x48, 0x10, 0xDB, 0x49, 0x43, 0x03, 0x7F, 0x82, 0xB5, 0x00, 0x1F, 0xB7, 0x1E, 0x8B, 0x7E, 0x20, 0xF9, 0x47, 0xC5, 0xB1, 0x87, 0x56, 0xBE, 0x15, 0x76, 0xF9, 0xE6, 0xAF, 0x2E, 0x66, 0xBD, 0x51, 0x3F, 0x51, 0xF6, 0x6F, 0x37, 0x6F, 0x1E, 0xFC, 0x20, 0x75, 0x71, 0x5B, 0x46, 0x0F, 0x98, 0xD7, 0xF5, 0x9D, 0x00, 0x4B, 0xF1, 0xC1, 0xEB, 0x90, 0x30, 0xBB, 0x66, 0x34, 0xBC, 0xF8, 0xF5, 0xB6, 0x6F, 0x7E, 0xE5, 0xD3, 0x7F, 0x4A, 0x3A, 0xB2, 0xEF, 0x0F, 0xD3, 0x31, 0xB3, 0x5B, 0x97, 0x2A, 0xC6, 0x3B, 0x66, 0x1E, 0xBA, 0xF7, 0x63, 0x3F, 0x29, 0xAD, 0x6F, 0x07, 0x26, 0xA3, 0xE6, 0x2B, 0x4F, 0x3E, 0xF4, 0x41, 0x60, 0xF1, 0x4A, 0xE0, 0xEC, 0x13, 0xBF, 0xD6, 0x53, 0xB4, 0xF5, 0x22, 0x3B, 0xB8, 0x42, 0x1D, 0xA6, 0x8C, 0x71, 0x4C, 0xEF, 0x94, 0x55, 0x27, 0x63, 0x97, 0x7D, 0xD1, 0xD7, 0x61, 0x35, 0x4A, 0xD3, 0x79, 0x18, 0xB4, 0x28, 0xD1, 0x8B, 0x05, 0x81, 0xEB, 0xB2, 0x1C, 0x63, 0xF5, 0xC0, 0x8A, 0xEE, 0xD0, 0x0B, 0x7F, 0x7E, 0x25, 0x6E, 0xD7, 0x8A, 0x16, 0x97, 0x73, 0xA6, 0xCB, 0xAA, 0x93, 0xC5, 0xEA, 0x08, 0x31, 0xF6, 0x8C, 0x3A, 0xAB, 0xB6, 0xC1, 0x8D, 0xA2, 0xC9, 0x6B, 0xF7, 0x0E, 0x00, 0x1B, 0x44, 0x22, 0x11, 0x60, 0xC6, 0xEB, 0x95, 0x5A, 0x44, 0x84, 0x36, 0xDF, 0xEC, 0x33, 0xAC, 0xE9, 0xD8, 0xF5, 0xC4, 0x8A, 0xFD, 0xC2, 0x77, 0x7F, 0x75, 0x89, 0x04, 0x50, 0xE3, 0x6A, 0x07, 0xAC, 0xD8, 0x14, 0x36, 0x61, 0xEE, 0x7D, 0xBB, 0x2C, 0x24, 0xDF, 0x28, 0xD3, 0xF7, 0xF9, 0x5F, 0x55, 0x92, 0xDD, 0xAA, 0x01, 0x08, 0x20, 0x31, 0x41, 0x1C, 0x13, 0x7D, 0xA2, 0x1A, 0x7C, 0x46, 0x60, 0xD4, 0xDE, 0x06, 0xB3, 0x39, 0xFE, 0x3E, 0xEB, 0x2A, 0x68, 0xC5, 0x22, 0x9A, 0xB3, 0xFF, 0x43, 0xBC, 0x79, 0x30, 0xD1, 0x40, 0x59, 0xE4, 0x71, 0x2C, 0x21, 0x5E, 0x35, 0x92, 0x4E, 0xA4, 0xF8, 0x3B, 0x5A, 0x44, 0x8A, 0x68, 0x06, 0xDF, 0x01, 0x3B, 0x4F, 0x5D, 0x5C, 0x56, 0x3E, 0x75, 0x7E, 0xB1, 0x3D, 0x70, 0xF1, 0xD9, 0x61, 0x2D, 0x40, 0x03, 0xEB, 0x9E, 0x69, 0x19, 0x3D, 0x32, 0xB7, 0x5E, 0x65, 0x6A, 0xAB, 0xD9, 0x4A, 0x1E, 0x49, 0xDC, 0xE2, 0x38, 0xC3, 0x78, 0xF8, 0x22, 0x33, 0x48, 0xBA, 0xC5, 0x77, 0xD4, 0x94, 0x2A, 0x52, 0x87, 0xB4, 0x6F, 0x84, 0xC4, 0x69, 0x25, 0x62, 0x64, 0xA1, 0xCE, 0xD5, 0xEB, 0x9C, 0x36, 0xBA, 0xBE, 0x71, 0x56, 0xEC, 0x16, 0xE3, 0xEC, 0x7F, 0xBD, 0x4C, 0x45, 0xA9, 0x34, 0x95, 0x16, 0xBD, 0x1B, 0xD4, 0x46, 0x8E, 0x03, 0x18, 0x1E, 0xAD, 0x06, 0x6E, 0xC5, 0xDE, 0x8B, 0xF3, 0x8D, 0x6C, 0xA8, 0x0E, 0xAB, 0x5E, 0x92, 0xC1, 0x43, 0x19, 0x65, 0xA2, 0x87, 0x0C, 0x62, 0xC5, 0x6D, 0x75, 0x95, 0x29, 0x5C, 0x7C, 0x84, 0x2E, 0xB8, 0x3F, 0xA1, 0x24, 0x12, 0x1B, 0x93, 0x29, 0x5C, 0x08, 0xFB, 0xA4, 0xB5, 0xCB, 0x6E, 0x0E, 0xFD, 0xA4, 0x8C, 0xB4, 0x12, 0xE4, 0x86, 0x37, 0xBE, 0xE6, 0xD9, 0xE8, 0xCA, 0x75, 0x5C, 0xDD, 0xD6, 0x2A, 0x5B, 0xE5, 0x01, 0x22, 0xE7, 0xB6, 0x30, 0x8A, 0x44, 0x82, 0x31, 0xD3, 0xEB, 0xDD, 0x14, 0xDC, 0xF3, 0xE0, 0xC7, 0x41, 0x5E, 0x50, 0x9B, 0x01, 0xB4, 0x31, 0x55, 0x04, 0xC0, 0xB5, 0x0F, 0x93, 0xA4, 0x40, 0x94, 0x5D, 0x87, 0xB9, 0x2A, 0x6B, 0x45, 0x97, 0xEB, 0xFC, 0x5F, 0x8B, 0x53, 0x6A, 0xD6, 0x2C, 0x2E, 0x3F, 0xF7, 0xB3, 0x7F, 0x5D, 0xFD, 0x2F, 0xCB, 0x67, 0x43, 0x77, 0xF9, 0xE7, 0x5F, 0x3D, 0x3C, 0x79, 0x61, 0x6A, 0x33, 0xC8, 0x2D, 0x6A, 0xB3, 0x72, 0x43, 0x60, 0xC0, 0xDE, 0xA4, 0xE2, 0x3C, 0xB1, 0xB4, 0xD8, 0xC5, 0xCA, 0x0D, 0xA0, 0xE5, 0xB1, 0x0B, 0x40, 0xCC, 0x8B, 0x32, 0x34, 0xF0, 0x97, 0x5B, 0x0B, 0x10, 0xD9, 0xB8, 0x42, 0xBA, 0xDC, 0x23, 0x35, 0x69, 0x17, 0x1E, 0xD2, 0x23, 0x66, 0x7E, 0xFF, 0xE6, 0x9F, 0xE2, 0xDF, 0x7A, 0xFE, 0xFD, 0xD8, 0x5F, 0x7C, 0xE3, 0xDD, 0x83, 0xB7, 0x4B, 0xE6, 0xAA, 0x36, 0xF6, 0x80, 0xA3, 0x50, 0x8F, 0x01, 0xF0, 0xF7, 0x58, 0xF5, 0xF0, 0xA0, 0x3B, 0xAA, 0xDB, 0x7D, 0xB0, 0x6F, 0xE6, 0xCB, 0x69, 0x7F, 0xF3, 0x64, 0x7C, 0xCE, 0x57, 0x7F, 0xB1, 0x66, 0xF5, 0x8A, 0x61, 0xD7, 0xA1, 0xE1, 0x0B, 0xAF, 0x2F, 0x1B, 0xA9, 0x9A, 0x3E, 0xF7, 0x68, 0xCE, 0x6B, 0x99, 0x43, 0xCF, 0x4C, 0xED, 0x3A, 0xF3, 0xEC, 0xCD, 0xAA, 0xE9, 0xA8, 0x05, 0xD7, 0xC7, 0x46, 0xA8, 0xD2, 0xAE, 0x8B, 0x7D, 0xAC, 0x03, 0x92, 0xC4, 0x26, 0x4A, 0xA8, 0x64, 0x3B, 0xB1, 0x18, 0x54, 0x6A, 0x69, 0x22, 0x03, 0x40, 0xDC, 0xEF, 0xE8, 0x81, 0x44, 0x3B, 0x05, 0x23, 0x29, 0x37, 0xF6, 0x44, 0xF8, 0xBA, 0xD7, 0x4F, 0x25, 0xD7, 0xAC, 0x76, 0x2F, 0x9F, 0xFA, 0xD5, 0x1A, 0x47, 0xAD, 0xFE, 0x4D, 0x71, 0x4D, 0xC5, 0xA8, 0x0E, 0xE5, 0x64, 0x1C, 0x96, 0xF2, 0xFC, 0xF5, 0xD6, 0x26, 0x78, 0x28, 0x26, 0xE2, 0xA2, 0x6B, 0x13, 0xE8, 0xB3, 0x5A, 0xAE, 0x00, 0xE6, 0xCF, 0xFB, 0x8B, 0xAC, 0xFA, 0x35, 0x83, 0x23, 0xA5, 0x77, 0x66, 0x17, 0xA6, 0x53, 0xD6, 0x82, 0xB4, 0x3E, 0x8C, 0x50, 0xED, 0xCD, 0x6A, 0x3F, 0x06, 0xA8, 0x6D, 0x2A, 0x07, 0x5C, 0xF3, 0x8E, 0x4C, 0xDD, 0x3B, 0xB6, 0x3A, 0xE4, 0xA4, 0xD1, 0xA4, 0x65, 0x59, 0x0B, 0xAA, 0x50, 0x6D, 0x57, 0x2E, 0x9C, 0x98, 0x1F, 0xAE, 0x18, 0xC6, 0x29, 0xAD, 0x4E, 0x1B, 0x85, 0xB9, 0xBE, 0xA5, 0xC4, 0xA0, 0x0F, 0xC6, 0x93, 0x66, 0xBB, 0xBC, 0x1D, 0x60, 0x78, 0xF5, 0x01, 0xAD, 0xF9, 0xFF, 0xF1, 0x29, 0xCC, 0xFB, 0xEE, 0xC2, 0x29, 0x92, 0x99, 0x79, 0xF4, 0x5F, 0x28, 0x56, 0xFD, 0x6A, 0x8B, 0xF8, 0x36, 0x90, 0x2B, 0x4E, 0x00, 0x13, 0xAA, 0x8D, 0xEB, 0x5C, 0x0F, 0xAE, 0x97, 0xDD, 0x72, 0x8B, 0x03, 0x60, 0x37, 0xBD, 0x58, 0x40, 0x11, 0x89, 0xE4, 0xD1, 0x84, 0xC6, 0x24, 0x16, 0x10, 0xC9, 0x02, 0x00, 0x71, 0x44, 0x7E, 0x98, 0xBE, 0xAB, 0x01, 0x0C, 0x61, 0x69, 0x33, 0x5A, 0xAD, 0x5D, 0x1D, 0xB2, 0x5E, 0x3F, 0xA9, 0x9D, 0x79, 0xEF, 0x1F, 0xC6, 0x36, 0xCF, 0xE5, 0xF9, 0x26, 0xC3, 0x47, 0xBD, 0x71, 0xC1, 0x78, 0xFB, 0x5A, 0xE4, 0x43, 0xA0, 0x1A, 0x55, 0x2D, 0x00, 0xF9, 0xD4, 0x83, 0xEC, 0xB3, 0x8B, 0x55, 0x84, 0x91, 0x7E, 0xAF, 0x2F, 0x18, 0x08, 0x62, 0x5C, 0x02, 0xE6, 0x19, 0xC2, 0x22, 0x8B, 0xF5, 0x38, 0xFF, 0x5B, 0x7E, 0x1A, 0xF7, 0x01, 0xB5, 0x80, 0x24, 0x86, 0x31, 0xC0, 0x1E, 0x92, 0xBB, 0x60, 0x21, 0x33, 0x24, 0xC6, 0x32, 0xEE, 0xEC, 0xD0, 0xFB, 0xF4, 0x69, 0xE1, 0x5A, 0xF8, 0xA4, 0x7D, 0x4C, 0x79, 0x30, 0xFF, 0x1B, 0x68, 0x0C, 0xEF, 0xAE, 0xE0, 0xB0, 0xAD, 0xAD, 0xD8, 0xE6, 0x38, 0x6A, 0xA6, 0xE9, 0x67, 0xEF, 0xA5, 0x6A, 0xFD, 0x46, 0x9D, 0x1E, 0x1D, 0x6C, 0x95, 0xBB, 0xEC, 0x14, 0x79, 0xCC, 0x38, 0xA0, 0x6D, 0x0A, 0x1D, 0xD7, 0x92, 0xD5, 0xF9, 0x4F, 0x75, 0x3C, 0x76, 0xF0, 0x81, 0x1D, 0xFF, 0xF8, 0xCC, 0x9A, 0xA7, 0x96, 0xDF, 0x08, 0x4D, 0xBE, 0xF1, 0x53, 0xFB, 0x8A, 0x1A, 0x62, 0x02, 0xEC, 0x2F, 0x70, 0x9C, 0x70, 0xF0, 0x8D, 0x58, 0xC7, 0x65, 0x01, 0x5B, 0x82, 0x55, 0xB2, 0x4C, 0x0E, 0x98, 0x1E, 0xE3, 0xB4, 0xA3, 0x42, 0xDF, 0xEE, 0xDF, 0xAB, 0x07, 0xF4, 0x66, 0xB1, 0x7D, 0xD1, 0xA7, 0xEA, 0xD4, 0x0C, 0xED, 0xFA, 0x05, 0x99, 0x2F, 0x1A, 0x8D, 0x2E, 0xAD, 0xE4, 0xA3, 0xD1, 0x6B, 0xB7, 0xAC, 0x1C, 0x3F, 0x73, 0xF3, 0x8D, 0xAE, 0x9B, 0x4F, 0xCE, 0xD6, 0x6C, 0xBB, 0x37, 0xDC, 0x7C, 0xE7, 0xDC, 0x42, 0xE5, 0x47, 0x5B, 0xC2, 0xDC, 0xCB, 0x4A, 0x9D, 0x23, 0xB7, 0x4B, 0xE4, 0x35, 0x35, 0xAD, 0x32, 0xF5, 0xE1, 0x15, 0x53, 0xCB, 0x6B, 0x1D, 0x6D, 0xA3, 0x5B, 0xB7, 0x38, 0x9F, 0xF8, 0x97, 0x35, 0x07, 0x9F, 0x79, 0xEE, 0x83, 0xAD, 0x0B, 0xC7, 0xFC, 0x83, 0x6F, 0x4D, 0xBF, 0xF4, 0xDA, 0xCB, 0x37, 0x87, 0x0A, 0xDC, 0xE7, 0x67, 0xDF, 0x58, 0x74, 0x05, 0x8E, 0x7F, 0xF7, 0xB9, 0x0F, 0xC6, 0x96, 0x22, 0x03, 0x2D, 0x29, 0x67, 0x5D, 0xEB, 0x97, 0x15, 0x3A, 0x77, 0xDF, 0x3E, 0xAE, 0xE5, 0x6A, 0xFD, 0x22, 0x20, 0xCB, 0x19, 0x57, 0xE9, 0xC4, 0x92, 0x41, 0x3F, 0x5E, 0x34, 0xCA, 0x94, 0x54, 0xC3, 0x6A, 0x9D, 0xD8, 0xE8, 0xE8, 0x15, 0x19, 0x22, 0x7B, 0xB1, 0xF3, 0xC1, 0xFC, 0xD5, 0x27, 0x42, 0x8B, 0x7E, 0x7F, 0xFC, 0xB1, 0xAC, 0x98, 0x5E, 0xCF, 0x89, 0xE3, 0x2F, 0x69, 0x03, 0x22, 0x8E, 0xF6, 0x77, 0x92, 0xAD, 0x0C, 0xBB, 0x47, 0x65, 0x01, 0xA9, 0xA4, 0xE0, 0x86, 0xA0, 0x61, 0x17, 0xA8, 0x70, 0x58, 0x91, 0xE1, 0xCA, 0x36, 0xAF, 0x80, 0x11, 0xAD, 0x6D, 0xD1, 0xB6, 0x40, 0xB0, 0x42, 0x0E, 0xA8, 0xFA, 0xB0, 0x63, 0x62, 0x97, 0xEE, 0xD1, 0xEA, 0xFD, 0x6F, 0xBA, 0x0A, 0x5C, 0x43, 0x8E, 0xAE, 0xF7, 0x33, 0xC4, 0x7E, 0x71, 0x46, 0xE4, 0xC8, 0x04, 0xBD, 0x36, 0xA4, 0xDC, 0x98, 0x14, 0xDE, 0x90, 0xE3, 0x46, 0xBB, 0x5E, 0xDA, 0xF7, 0x96, 0x23, 0x51, 0x3F, 0x23, 0x46, 0xA5, 0x53, 0x65, 0xA9, 0x02, 0x71, 0xEC, 0xBE, 0x77, 0xA0, 0x81, 0xE8, 0x66, 0x03, 0xA5, 0x10, 0xB5, 0xDF, 0x5D, 0x17, 0xD2, 0x03, 0xCB, 0x8B, 0x43, 0x3B, 0x1D, 0x7D, 0x20, 0xCA, 0xC5, 0xA1, 0x0F, 0x77, 0xBE, 0xFB, 0x55, 0x79, 0x7F, 0xC4, 0x5F, 0x57, 0x79, 0xAA, 0xEE, 0xE5, 0x8F, 0x5F, 0x8F, 0xBC, 0x39, 0x7F, 0x77, 0x32, 0xAB, 0xC8, 0x67, 0xC9, 0x14, 0x95, 0x13, 0xB6, 0x57, 0xF5, 0x92, 0x4A, 0x1C, 0x27, 0xC5, 0x0E, 0x32, 0x45, 0x2C, 0x03, 0xF8, 0xD0, 0x88, 0x43, 0x02, 0x2D, 0xF7, 0x41, 0xB1, 0xB0, 0x08, 0x10, 0xC5, 0x34, 0x0B, 0x18, 0x98, 0x2C, 0xE0, 0xC5, 0x25, 0x2B, 0x64, 0x85, 0xEA, 0x32, 0x0A, 0xCD, 0xDD, 0x66, 0x92, 0x1E, 0x35, 0x7E, 0xD8, 0x3D, 0x1F, 0x12, 0x67, 0xF8, 0x6E, 0xBF, 0x93, 0x74, 0x38, 0xEA, 0x8C, 0x7B, 0x87, 0x6C, 0xBA, 0x3D, 0x33, 0xBB, 0x79, 0x29, 0xF1, 0xB5, 0xAF, 0x2E, 0xCE, 0x04, 0xF7, 0xD9, 0x27, 0xB2, 0xF6, 0x6A, 0xA6, 0x9E, 0xAF, 0x4D, 0x04, 0x2A, 0x29, 0xD4, 0x17, 0x98, 0x57, 0xD3, 0xB8, 0x48, 0x21, 0x09, 0x13, 0x90, 0x04, 0x08, 0xFC, 0x7F, 0xEE, 0x88, 0x71, 0xDF, 0x23, 0xF1, 0xD2, 0x81, 0x85, 0x64, 0xBD, 0x35, 0x64, 0xCF, 0x4A, 0x63, 0xC5, 0xA9, 0x95, 0x3E, 0x77, 0x4B, 0xC8, 0x40, 0xDF, 0x9E, 0x07, 0xA6, 0xDD, 0x7B, 0x42, 0x36, 0xDF, 0x4D, 0xB2, 0x06, 0xE4, 0xC5, 0x0F, 0x1B, 0xDB, 0x7D, 0x40, 0x8D, 0x7E, 0x3D, 0x41, 0xF4, 0xFD, 0xF9, 0x66, 0x78, 0x67, 0xD8, 0x7C, 0xC8, 0x61, 0x3D, 0x4F, 0xBF, 0xA2, 0x4B, 0x31, 0x1C, 0xB8, 0x1C, 0x38, 0x1C, 0x2C, 0x92, 0x8D, 0x21, 0x35, 0x9E, 0xC6, 0x10, 0xC3, 0x98, 0x99, 0x3D, 0x12, 0x35, 0xB9, 0xCC, 0xE1, 0x6C, 0xEA, 0xBE, 0xA7, 0x7D, 0x5C, 0x4B, 0x13, 0x11, 0x20, 0x67, 0x64, 0xAC, 0x2A, 0x01, 0xAD, 0x4D, 0xBC, 0x48, 0x29, 0xE8, 0xC7, 0x85, 0x53, 0xAC, 0x27, 0xD2, 0xD1, 0xAB, 0x55, 0x6B, 0x03, 0x23, 0x99, 0x2B, 0xD2, 0xC2, 0xCE, 0x9A, 0x1B, 0xCF, 0xFC, 0x41, 0xCB, 0xD3, 0x22, 0xC5, 0xB8, 0x3F, 0xDC, 0x6E, 0x95, 0x67, 0x55, 0x9C, 0xD1, 0x1B, 0xD2, 0xA2, 0x75, 0x88, 0x9A, 0xA5, 0x85, 0x65, 0x46, 0x48, 0x9C, 0xEE, 0x7E, 0xE5, 0x2B, 0x77, 0xB6, 0xDC, 0x6B, 0xF0, 0xCD, 0xA7, 0x7F, 0x2F, 0xE6, 0x7C, 0x44, 0xBD, 0x2B, 0xE5, 0x67, 0xEF, 0xE8, 0x55, 0xDA, 0x46, 0xAD, 0x2C, 0xF0, 0x29, 0x7B, 0x5A, 0xD6, 0xA8, 0x44, 0xC7, 0xD5, 0x35, 0x33, 0x9E, 0xFD, 0x4E, 0xCF, 0xDB, 0x3F, 0x5D, 0xB9, 0xD1, 0x35, 0x64, 0x9E, 0xBB, 0x36, 0xDD, 0x6F, 0x4E, 0xFC, 0x74, 0x6E, 0x1F, 0x0C, 0x39, 0xDF, 0xAF, 0xB8, 0x77, 0xDA, 0xDC, 0x1C, 0x5A, 0xEB, 0xD8, 0xAD, 0xC7, 0xFF, 0xF5, 0xEC, 0x1A, 0x77, 0xC4, 0x78, 0x58, 0xC4, 0xE4, 0x16, 0xAD, 0x52, 0x98, 0x22, 0x77, 0xE1, 0x87, 0xAA, 0x8F, 0x76, 0xAE, 0x8B, 0xAF, 0x10, 0x41, 0x37, 0x29, 0xF8, 0x28, 0x67, 0x88, 0x59, 0xF1, 0x13, 0x99, 0x6D, 0x47, 0xC8, 0x0D, 0xE2, 0x07, 0xE1, 0xD9, 0x21, 0xB9, 0xC6, 0xEC, 0xED, 0xD6, 0xE8, 0xBC, 0xE5, 0xA3, 0xA1, 0x67, 0xDB, 0x5F, 0x14, 0x75, 0x22, 0x5E, 0xCC, 0x8C, 0x25, 0xDB, 0x3B, 0xD5, 0x98, 0x3A, 0x00, 0x5A, 0x29, 0x1D, 0x22, 0x1B, 0x16, 0x86, 0xFD, 0x95, 0xD6, 0x76, 0x90, 0xBB, 0x54, 0x81, 0x4A, 0x04, 0xDB, 0xA9, 0xE2, 0x88, 0x00, 0x7B, 0x87, 0x2A, 0x90, 0xA7, 0x41, 0xDB, 0xA0, 0x1D, 0xD3, 0x0A, 0x6E, 0x9D, 0x8D, 0xDE, 0xBC, 0xDC, 0x72, 0xCE, 0xFC, 0xFC, 0xA6, 0xBA, 0x44, 0x0E, 0xA5, 0x6A, 0x83, 0x9A, 0x95, 0x35, 0x6A, 0x0F, 0x89, 0x66, 0xBF, 0x56, 0x2A, 0xDA, 0xED, 0xEF, 0xAC, 0x9C, 0x0A, 0x33, 0xCD, 0xF5, 0xFD, 0x63, 0xE6, 0x82, 0x31, 0xAF, 0x9D, 0x23, 0x5A, 0x65, 0xA8, 0x08, 0x2E, 0xFE, 0x3F, 0x40, 0x55, 0xBE, 0x8A, 0x52, 0x5B, 0xC0, 0xAC, 0x34, 0xD2, 0xF4, 0x7A, 0x08, 0xA9, 0x37, 0xBF, 0xAF, 0xE7, 0x82, 0x1A, 0x53, 0x15, 0x6C, 0xF8, 0x1F, 0x80, 0x46, 0xE0, 0xC2, 0x04, 0x75, 0x59, 0xA5, 0xA9, 0x75, 0x97, 0xA6, 0x26, 0x77, 0xCC, 0x4E, 0x2D, 0x8D, 0xAD, 0x6A, 0xB9, 0x73, 0x69, 0x31, 0x27, 0x70, 0x39, 0x6A, 0x99, 0x95, 0xCC, 0x2E, 0xD5, 0xAA, 0x76, 0x8A, 0x1E, 0x0A, 0x45, 0x3A, 0x23, 0x4C, 0xB1, 0x40, 0x00, 0x13, 0x89, 0x81, 0x81, 0x86, 0x85, 0x06, 0x58, 0x62, 0x0B, 0xED, 0xAA, 0x17, 0x83, 0x28, 0xFA, 0x18, 0x21, 0x5C, 0x76, 0xC8, 0x0C, 0x95, 0xA2, 0x7B, 0x9C, 0x6E, 0xA3, 0x40, 0x63, 0xEA, 0x23, 0xE2, 0xAC, 0x66, 0x6A, 0x79, 0x73, 0xCF, 0x24, 0xC9, 0x88, 0x44, 0x57, 0xC1, 0x62, 0x9A, 0x99, 0x26, 0x02, 0x22, 0xAE, 0x3E, 0x6A, 0x26, 0x65, 0x29, 0x10, 0x94, 0x37, 0x76, 0xDB, 0x06, 0x4E, 0xA2, 0x44, 0xA1, 0x98, 0x17, 0x0D, 0x94, 0xC8, 0x51, 0x62, 0x31, 0x31, 0x71, 0x21, 0x09, 0xE0, 0xFB, 0x6F, 0x38, 0xF9, 0xEF, 0x1B, 0x7E, 0x98, 0x59, 0xCD, 0x53, 0xC5, 0x34, 0x0B, 0x14, 0x59, 0xB3, 0xB6, 0x4F, 0x66, 0x85, 0x5D, 0xF4, 0x34, 0x3A, 0xB7, 0x19, 0xC5, 0x5D, 0x5F, 0x5A, 0x5E, 0xEF, 0x8C, 0x74, 0x14, 0x04, 0x52, 0x2D, 0x29, 0x03, 0xB2, 0xF7, 0x3E, 0x9E, 0x12, 0xFE, 0xCF, 0x00, 0xA4, 0x25, 0x8E, 0x5E, 0x6D, 0xFD, 0x5B, 0x61, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82};


//am&fm
#define DEMODSIZE     8196 //16388 //39000//40000
#define DEMODFFTSIZE  4096
#define DEMODPEAKDB   6

//fft
#define FFTSIZE       2048
#define CZTSIZE       2004
#define IFFS          30e6
#define FFTDOTS       2048
#define MAXFFTRBW     900
#define MINCZT        -0.5
#define MAXCZT        0.5
#define MAXFFTSPAN    2e6
#define MINFFTSPAN    100
#define MAXFFTNUMS    4096

#define VBWORDER      6
#define FIRORDER      11
#define FIROFFSET     6


static double FIRWIN[FIRORDER] = {};
static double FIRVALUE[VBWORDER][FIRORDER] =
{
  {0.00000000000000000000014924768297040341,
   0.0000000000000098581187657921035,
   0.000000011910327004300895,
   0.00026320838871915443,
   0.10639579048685459,
   0.78668197842817889,
   0.10639579048685459,
   0.00026320838871915443,
   0.000000011910327004300895,
   0.0000000000000098581187657921035,
   0.00000000000000000000014924768297040341},

  {0.0000000000000079462129493693235,
   0.00000000080504175268789371,
   0.000006296567389955721,
   0.0038020669682966076,
   0.17724271756772308,
   0.63789783618308116,
   0.17724271756772308,
   0.0038020669682966076,
   0.000006296567389955721,
   0.00000000080504175268789371,
   0.0000000000000079462129493693235},

  {0.0000000071749776682945568,
   0.0000047058119758456792,
   0.00073027368638883014,
   0.026814951089817424,
   0.23297585683997291,
   0.47894841079373485,
   0.23297585683997291,
   0.026814951089817424,
   0.00073027368638883014,
   0.0000047058119758456792,
   0.0000000071749776682945568},

  {0.00010542065958087798,
   0.0018892072833118011,
   0.017828144417236652,
   0.088594862121013737,
   0.23184037298204335,
   0.31948398507362707,
   0.23184037298204335,
   0.088594862121013737,
   0.017828144417236652,
   0.0018892072833118011,
   0.00010542065958087798},

  {0.021902940158187549,
   0.045266844125946198,
   0.079614472219348184,
   0.1191628921636689,
   0.1517852389098541,
   0.16453522484599012,
   0.1517852389098541,
   0.1191628921636689,
   0.079614472219348184,
   0.045266844125946198,
   0.021902940158187549},

  {0.090011231804371719,
   0.090548754148121274,
   0.090968151967928096,
   0.09126843300290878,
   0.091448886490887477,
   0.091509085171565419,
   0.091448886490887477,
   0.09126843300290878,
   0.090968151967928096,
   0.090548754148121274,
   0.090011231804371719},
};

struct trackAmptDataDef
{
  double centerFreq;
  double span;
  unsigned int value;
  unsigned int hAddr;
  unsigned int lAddr;
  double maxValue;
  double minValue;
  double deltaValue;
};

struct signalAmptDataDef
{
  double startFreq;
  double stopFreq;
  double baseFreq;
  unsigned int value;
};

static struct trackAmptDataDef trackAmptRef[] = {
  {505e6, 990e6, 0x07e0, 0x10, 0x11, 0, 0, 0},    //9K ~ 1G
  {1.25e9, 500e6, 0x08a0, 0x12, 0x13, 0, 0, 0},   //1G ~ 1.5G
  {1.75e9, 500e6, 0x093b, 0x14, 0x15, 0, 0, 0},   //1.5G ~ 2G
  {2.225e9, 450e6, 0x093b, 0x16, 0x17, 0, 0, 0},  //2G ~ 2.45G
  {2.725e9, 550e6, 0x0974, 0x18, 0x19, 0, 0, 0},  //2.5G ~ 3G
};

static struct signalAmptDataDef signalAmptRef[] = {
  {8e3, 300e6, 150e6, 0x07e9},            //9K ~ 300M
  {300e6, 400e6, 350e6, 0x0800},          //300M ~ 400M
  {400e6, 500e6, 450e6, 0x081a},          //400M ~ 500M
  {500e6, 600e6, 550e6, 0x0813},          //500M ~ 600M
  {600e6, 700e6, 650e6, 0x0836},          //600M ~ 700M
  {700e6, 800e6, 750e6, 0x0843},          //700M ~ 800M
  {800e6, 900e6, 850e6, 0x085f},          //800M ~ 900M
  {900e6, 1e9, 950e6, 0x087c},            //900M ~ 1G
  {1e9, 1.1e9, 1.05e9, 0x08b0},           //1G ~ 1.1G
  {1.1e9, 1.2e9, 1.15e9, 0x08b3},         //1.1G ~ 1.2G
  {1.2e9, 1.35e9, 1.25e9, 0x08e6},        //1.2G ~ 1.35G
  {1.35e9, 1.5e9, 1.4e9, 0x0900},         //1.35G ~ 1.5G
  {1.5e9, 1.7e9, 1.6e9, 0x0913},          //1.5G ~ 1.7G
  {1.7e9, 2e9, 1.85e9, 0x0938},           //1.7G ~ 2G
  {2e9, 2.3e9, 2.15e9, 0x0944},           //2G ~ 2.3G
  {2.3e9, 2.35e9, 2.32e9, 0x0950},        //2.3G ~ 2.35G
  {2.35e9, 2.5e9, 2.4e9, 0x0955},         //2.35G ~ 2.5G
  {2.5e9, 2.63e9, 2.6e9, 0x097a},         //2.5G ~ 2.63G
  {2.63e9, 2.7e9, 2.65e9, 0x0998},        //2.63G ~ 2.7G
  {2.7e9, 2.8e9, 2.75e9, 0x09ac},         //2.7G ~ 2.8G
  {2.8e9, 2.9e9, 2.85e9, 0x09dd},         //2.8G ~ 2.9G
  {2.9e9, 2.97e9, 2.95e9, 0x09ff},        //2.9G ~ 2.97G
  {2.97e9, 3.000009e9, 2.98e9, 0x0a04},   //2.97G ~ 3.000009G
};

static char* SCPICMDERROR = "ERR";
static char* SCPICMDUNSUPPORT = "N/A";
static unsigned char SCPIRESULTEOF[] = {0x0d, 0x0a};
static unsigned char SCPICMDEOF[] = {0x0d, 0x0a};

//标签汉化定义
struct labelTransDef
{
  char* enName;
  char* chName;
};

//rpg
static struct labelTransDef rpgTrans[] =
{
  {"rpg button", "脉冲旋钮：仪器参数设置方式之一，按当前参数的固定比例改变参数值设置；向左旋转参数值递减，右旋转递增"},
};

//arrow
static struct labelTransDef arrowTrans[] =
{
  {"up arrow", "方向键(上)：仪器参数设置方式之一，按固定步进方式增大当前参数值设置"},
  {"down arrow", "方向键(下)：仪器参数设置方式之一，按固定步进方式减小当前参数值设置"},
};

//cancel
static struct labelTransDef cancelTrans[] =
{
  {"cancel input", "取消：撤消参数输入和修改，对于程控模式时可切换回本地控制"},
};

//backspace
static struct labelTransDef bkspaceTrans[] =
{
  {"backSpace", "退格：逐步撤消参数输入"},
};

//enter
static struct labelTransDef enterTrans[] =
{
  {"input enter", "确认：确认输入和修改"},
};

//unit
static struct labelTransDef unitTrans[] =
{
  {"unit: GHz/dBm/s", "参数设置时相关单位键(GHz/dBm/s)"},
  {"unit: MHz/dB/ms", "参数设置时相关单位键(MHz/dB/ms)"},
  {"unit: kHz/dBmV/us", "参数设置时相关单位键(kHz/dBmV/us)"},
  {"unit: Hz/mV/ns", "参数设置时相关单位键(Hz/mV/ns)"},
};

//number
static struct labelTransDef numberTrans[] =
{
  {"number 0", "数字键0"},
  {"number 1", "数字键1"},
  {"number 2", "数字键2"},
  {"number 3", "数字键3"},
  {"number 4", "数字键4"},
  {"number 5", "数字键5"},
  {"number 6", "数字键6"},
  {"number 7", "数字键7"},
  {"number 8", "数字键8"},
  {"number 9", "数字键9"},
  {"dot", "小数点"},
  {"invert", "符号键，+/-循环切换"},
};

//系统标签汉化
static struct labelTransDef sysTrans[] =
{
  {"reseting system......", "复位系统......"},

  {"InputGain",         "输入增益"},
  {"Trace",             "迹线"},
  {"Det",               "检波"},
  {"Ref",               "参考电平"},
  {"Reference",         "参考"},
  {"Att",               "衰减"},
  {"Center",            "中心频率"},
  {"Span",              "扫宽"},
  {"Start",             "起始"},
  {"Stop",              "终止"},
  {"Ampt",              "幅值"},
  {"RBW",               "分辨带宽"},
  {"VBW",               "视频带宽"},
  {"Sweep Time",         "扫描时间"},

  {"Normal",             "常态"},
  {"PosPeak",            "正峰"},
  {"NegPeak",            "负峰"},
  {"Sample",             "取样"},
  {"Transient",          "瞬态"},
  {"QuasiPeak",          "准峰"},
  {"Average",            "平均"},
  {"RMS",                "有效"},
  {"unKnown",            "未知"},

  {"EMI RBW",            "EMI分辨带宽"},

  {"Ready",              "就绪"},
  {"Auto",               "自动"},
  {"Man",                "手动"},
  {"On",                 "开启"},
  {"Off",                "关闭"},
  {"Int",                "内部"},
  {"Ext",                "外部"},
  {"Lin",                "线性"},
  {"Line",               "线性"},
  {"Log",                "对数"},
  {"Def",                "默认"},
  {"Sing",               "单次"},
  {"Cont",               "连续"},
  {"En",                 "英文"},
  {"Ch",                 "中文"},
  {"Cal Int",            "内部"},
  {"Rf In",              "输入"},
  {"Hor",                "横向"},
  {"Ver",                "纵向"},
  {"Blak",               "黑白"},
  {"Colr",               "彩色"},

  {"Frequency",          "频率"},
  {"Span",               "扫宽"},
  {"Amplitude",          "幅度"},
  {"Tune",               "搜索"},
  {"Band Width",         "带宽"},
  {"Trace",              "迹线"},
  {"Trig",               "触发"},
  {"Measure",            "测量"},
  {"Sweep",              "扫描"},
  {"Detector",           "检波"},
  {"Display",            "显示"},
  {"Measure Setup",      "测量设置"},
  {"Mkr",                "频标"},
  {"Marker",             "频标"},
  {"Marker Function",    "频标功能"},
  {"Maker To",           "频标→"},
  {"Peak",               "峰值"},
  {"System",             "系统"},
  {"File",               "文件"},
  {"Save",               "存储"},
  {"Source",             "源"},
  {"Preset",             "复位"},
  {"Print",              "打印"},
  {"Help",               "帮助"},
  {"Demod",              "解调"},
  {"AUX",                "辅助功能"},

  {"Screens",            "屏幕图片"},
  {"TraceDatas",         "迹线数据"},
  {"All",                "全部"},

  {"free disk space",    "磁盘剩余空间"},

  {"saving file......",  "存储文件......"},
  {"saved",              "存储成功"},
  {"save failed",        "存储失败"},

  {"address",            "地址"},
  {"is invalid",         "非法"},

  {"Even",               "偶校验"},
  {"Odd",                "奇校验"},
  {"Space",              "空格"},
  {"Hardware",           "硬件流"},
  {"None",               "无"},

  {"password",           "口令"},

  {"Factory",            "出厂"},
  {"User",               "用户"},
  {"Power Off",          "关机"},

  {"printing trace......",            "正在打印迹线......"},
  {"print trace finished",            "迹线打印完成"},
  {"print trace failed",              "迹线打印失败"},
  {"printing screen pixmap......",    "正在打印屏幕截图......"},
  {"print screen pixmap finished",    "屏幕截图打印完成"},
  {"print screen pixmap failed",      "屏幕截图打印失败"},

  {"X Axis", "X 坐标"},
  {"Delta", "差值"},
  {"Type", "类型"},
  {"Average", "平均"},

  {"Noise", "噪声"},
  {"ChPower", "信道功率"},
  {"Channel Power", "信道功率"},
  {"TxPower", "主信道"},
  {"Obw", "占用带宽"},

  {"Freq Count", "频率计数"},
  {"Start Freq", "起始频率"},
  {"Stop Freq", "终止频率"},

  {"Tx Channel", "主信道"},
  {"1st Adjacent Channel", "第1邻道"},
  {"2nd Adjacent Channel", "第2邻道"},
  {"3rd Adjacent Channel", "第3邻道"},
  {"Spacing", "间隔"},
  {"Lower", "下邻道"},
  {"Upper", "上邻道"},
  {"Power", "功率"},

  {"Auto tune successed", "自动搜索信号成功"},
  {"Auto tune failed", "自动搜索信号失败"},

  {"connect to server failed","连接服务器失败"},
  {"disconnect to server","与服务器断开"},
  {"signal generator is off line","信号发生器离线"},

  {"factory calibrate failed", "出厂校准失败"},
  {"factory calibrate successed", "出厂校准成功"},

  {"Preamplifier calibrate failed", "前置放大校准失败"},
  {"Preamplifier calibrate successed", "前置放大校准成功"},

  {"Low Freq calibrating","低频通道校准"},
  {"Low Freq Preamplifier calibrating","低频通道前放校准"},

  {"Low Freq calibrate failed", "低频通道校准失败"},
  {"Low Freq calibrate successed", "低频通道校准成功"},

  {"Low Freq Preamplifier calibrate failed", "低频通道前置放大校准失败"},
  {"Low Freq Preamplifier calibrate successed", "低频通道前置放大校准成功"},

  {"system auto calibrating", "系统自动校准"},
  {"signal generator checking", "正在检测信号源"},
  {"signal generator is off line", "信号源离线"},
  {"can not get device temperature", "获取设备温度失败"},
  {"amplitude calibrating", "幅度定标"},
  {"amplitude calibrate failed", "幅度定标失败"},
  {"attenuation calibrating", "衰减器校准"},
  {"attenuation(9dB) calibrating", "衰减器(9dB)校准"},
  {"attenuation(9dB) calibrate failed", "衰减器(9dB)校准失败"},
  {"attenuation(0dB) calibrating", "衰减器(0dB)校准"},
  {"attenuation(0dB) calibrate failed", "衰减器(0dB)校准失败"},
  {"attenuation(21dB) calibrating", "衰减器(21dB)校准"},
  {"attenuation(21dB) calibrate failed", "衰减器(21dB)校准失败"},
  {"attenuation(30dB) calibrating", "衰减器(30dB)校准"},
  {"attenuation(30dB) calibrate failed", "衰减器(30dB)校准失败"},
  {"attenuation(39dB) calibrating", "衰减器(39dB)校准"},
  {"attenuation(39dB) calibrate failed", "衰减器(39dB)校准失败"},
  {"if calibrating", "中频增益校准"},
  {"if(10dB) calibrating", "中频增益(10dB)校准"},
  {"if(10dB) calibrate failed", "中频增益(10dB)校准失败"},
  {"if(0dB) calibrating", "中频增益(0dB)校准"},
  {"if(0dB) calibrate failed", "中频增益(0dB)校准失败"},
  {"if(20dB) calibrating", "中频增益(20dB)校准"},
  {"if(20dB) calibrate failed", "中频增益(20dB)校准失败"},
  {"if(30dB) calibrating", "中频增益(30dB)校准"},
  {"if(30dB) calibrate failed", "中频增益(30dB)校准失败"},
  {"rbw calibrating", "分辨率校准"},
  {"rbw calibrate failed", "分辨率校准失败"},
  {"rbw calibrate failed On", "分辨率校准失败于"},
  {"rbw(10kHz) calibrating", "分辨率(10kHz)校准"},
  {"rbw(10kHz) calibrate failed", "分辨率(10kHz)校准失败"},
  {"rbw(1kHz) calibrating", "分辨率(1kHz)校准"},
  {"rbw(1kHz) calibrate failed", "分辨率(1kHz)校准失败"},
  {"rbw(900Hz) calibrating", "分辨率(900Hz)校准"},
  {"rbw(900Hz) calibrate failed", "分辨率(900Hz)校准失败"},
  {"frequency respond calibrating", "频响补偿"},
  {"respond calibrating", "补偿"},
  {"frequency respond calibrate failed On", "频响补偿失败于"},

  {"system calibrate successed", "系统校准成功"},
  {"system calibrate failed", "系统校准失败"},
  {"not found internal signal", "未发现内部信号"},

  {"Serial Number", "序列号"},
  {"Software Version", "软件版本"},
  {"Firmware Version", "固件版本"},
  {"temperature", "温度"},
  {"IP Address", "IP地址"},
  {"Mask", "子网掩码"},
  {"Gate", "网关"},
  {"Mac Physical Address", "网卡物理地址"},

  {"No", "序号"},
  {"Message", "消息"},

  {"Local Network", "本地网络"},
  {"Connect", "已连接"},
  {"DisConnect", "未连接"},

  {"Network Measure Normalizing", "数据归一化"},
  {"Network Measure Normalize Successed", "数据归一化完成"},

  {"connect to discriminator success", "连接鉴频器成功"},
  {"connect to discriminator failed", "鉴频器连接失败"},
  {"disconnect from discriminator", "断开鉴频器连接"},
  {"Discriminator Calibrating", "鉴频器标定"},
  {"discriminator calibrate success", "鉴频器标定成功"},
  {"discriminator calibrate failed", "鉴频器标定失败"},

  {"Listen Port", "监听端口"},

  {"switch to local control mode", "恢复为本地控制模式"},
  {"switch to remote control mode", "切换为远程控制模式"},
  {"remote control mode, pressed key is ignored", "远程控制模式，本地按键忽略"},

  {"Press any key for show help content", "按任意键显示帮助内容"},
  {"pressed help key again to close", "再次按下帮助键关闭"},

  {"Name", "名称"},
  {"Time", "时间"},
  {"Size", "大小"},
  {"Size(Bytes)", "大小(字节)"},
  {"DateTime", "日期/时间"},

  {"file delete success", "文件删除成功"},
  {"file delete failed", "文件删除失败"},
  {"file export success", "文件导出成功"},
  {"file export failed", "文件导出失败"},

  {"Total Files", "文件总数"},
  {"Screen Files", "图片文件"},
  {"Trace Files", "迹线数据文件"},

  {"Default", "默认"},
  {"Please input RegCode", "请输入注册码"},
  {"Register Success", "注册成功"},
  {"Register Failed", "注册失败"},

  {"Updating System", "正在更新系统"},
  {"Updating File", "更新文件"},
  {"Updating Success", "更新完成"},
  {"Rebooting", "重新启动"},
  {"Update success to", "系统成功更新至"},
  {"Old Version is", "原版本为"},

  {"saving user state", "正在存储用户状态"},
  {"user state saved", "用户状态储存完成"},

  {"Detecting usb disk", "搜索USB设备"},
  {"Saving file to usb disk", "写入USB设备"},

  {"fd module communication error", "鉴频模块通讯故障"},
  {"system auto reseting", "系统自动复位"},

  {"signal searching", "搜索信号"},
  {"searching failed", "搜索失败"},
  {"device connecting", "连接设备"},
  {"export to usb disk failed", "输出至USB闪存失败"},

  {"date set successed", "日期设置成功"},
  {"date set failed", "日期设置失败"},
  {"time set successed", "时间设置成功"},
  {"time set failed", "时间设置失败"},

  {"Device Type", "设备型号"},

  {"AM Freq", "AM频率"},
  {"Depth", "深度"},
  {"FM Freq", "FM频率"},
  {"Deviation", "偏差"},
  {"AM", "调幅"},
  {"FM", "调频"},
  {"CarrFreq", "载波频率"},
  {"CarrPower", "载波功率"},
  {"SINAD", "SINAD"},
  {"THD", "THD"},

  {"75Ω", "75欧"},
  {"50Ω", "50欧"},
  {"Please Input 10MHz Reference", "请接入10MHz参考"},

  {"Please connect RF:", "请连接信号："},
  {"440MHz, -20dBm", "440MHz, -20dBm"},
  {"Please connect REF: 10MHz!", "请连接10MHz参考!"},

  {"cleared all test data", "所有实验数据和日志清除成功"},
  {"cleared log data","清除日志成功"},
  {"cleared calibrate data","清除校准数据成功"},
 
  {"Freq", "频率"},
  {"Up", "上限"},
  {"Low", "下限"},
  {"Pass-Fail", "通过-失败"},
  {"Pass", "通过"},
  {"Fail", "失败"},
  {"Offset", "偏置"},
  {"Upper Line", "上限制线"},
  {"Lower Line", "下限制线"},
  {"Pages", "页码"},

  {"success saved", "保存成功"},
  {"success loaded", "加载成功"},

  {"Trigger Level", "触发电平"},
  {"Com", "串口"},
  {"Lan", "网口"},

  {"Passwd error, Please Resume Input!", "密码错误，请重新输入!"},

  {"Please Reboot!", "请重启机器!"},
  {"SerialNo Lenght is error!", "序列号输入长度错误!"},
  {"SerialNo Input is Invalid!", "序列号输入不合法!"},
  {"Free Disk Space is not enough!", "剩余内存不足！"},

  {"Rising edge", "上升沿"},
  {"Falling edge", "下降沿"},

  {"Power Check", "电源自检"},
  {"Control Check", "控制自检"},
  {"IF Check", "中频自检"},
  {"RF Check", "射频自检"},
  {"OK", "正常"},
  {"FAULT", "故障"},

  {"VSWR", "电压驻波比"},
  {"RL", "回波损耗"},
  {"P", "反射系数"},
  {"SWR", "驻波比"},

  {"COM", "串口"},
  {"VALID", "激活"},
  {"INVALID", "未激活"},
};

//触发模式
enum trigMode {tgRun, tgVideo, tgRise, tgFall};

//解调模式
enum demodMode {dmFMW, dmFM, dmAM, dmUSB, dmLSB};

//电台
enum demodRadio {radio1, radio2, radio3, radio4, radio5, radio6};

//显示风格定义
enum desktopStyle {dsDefault, dsWinXP};

//开机或复位
enum systemParam {spFactory, spUser, spPowerOff};

//日期时间格式
enum dateTimeStyle {dtsYMDHMS, dtsHMSYMD};

//波特率定义
enum baudRate {br1200, br2400, br4800, br9600, br19200, br38400, br57600, br115200};

//数据位定义
enum dataBits {db5, db6, db7, db8};

//停止位定义
enum stopBits {sb1, sb2};

//校验定义
enum checkMode {cmEven, cmOdd, cmNone, cmSpace};

//流控制定义
enum flowControl {fcXonXoff, fcHardware, fcNone};

//输入类型
enum inputType {itDouble, itDate, itTime, itIP, itPassword, itUnDefine};

//频率单位定义
const static char* FREQUNIT[] = {"GHz", "MHz", "kHz", "Hz"};

//系统模式定义
enum systemMode {smCalibrate, smSpectrum, smZoom, smTimeSpec, smAcpr, smObw, smFile, smHelp, smMarkerTable, smSystemInfo, smSystemLog, smMeasure, smDiscriminator, smEmi, smPeakTable, smAM, smFM, smPassFail};

//迹线状态定义(刷新、最大保持、最小保持、查看、 清空)
enum traceState {tsClearWrite, tsMaxHold, tsMinHold, tsView, tsBlank};

//检波方式定义(自动、常态、负峰、取样 、正峰、)
enum detectorMode {dmAuto, dmNormal, dmNegPeak, dmSample, dmPosPeak, dmTransient, dmQuasiPeak , dmAverage, dmRMS};

//频标状态定义
enum markerState {msClose, msNormal, msDelta};

//参考单位定义
enum refUnits {rudBm, rudBmV, rudBuV, ruW, ruV, rudBuW, rudBpW, rudBuVm, ruuV };
//enum refUnits {rudBm, rudBmV, rudBuW, rudBuV, ruW, ruV};

//纸张类型定义
enum paperType {ptA4, ptA3, ptB5, ptC5, ptLetter};

//显示类型定义
enum showType {stScreenPng, stTraceData, stAll};

//排序类型定义
enum sortType {stName, stTime, stSize};

//输入增益定义
enum inputGainType {igtx1, igtx2, igtx4, igtx05, igtx025};

//SCPI接口定义
enum scpiInterfaceType {sitNone, sitLan, sitUsb, sitGpib, sitCom};

//多窗口类型定义
//enum multiDispType {mdtZoom, mdtMkrTable, mdtTimeSpec, mdtAcpr, mdtChannelPower, mdtObw, mdtDisc, mdtPeakTable, mdtPassFail};
enum multiDispType {mdtSpectrum, mdtZoom, mdtMkrTable, mdtTimeSpec, mdtAcpr, mdtChannelPower, mdtObw, mdtDisc, mdtPeakTable, mdtFile, mdtHelp, mdtSystemLog, mdtSystemInfo, mdtPassFail, mdtAM, mdtFM, mdtVSWR, mdtPowerMeter};

//网络测量类型定义
enum networkMeasType {S21, S11};

//优利德函数发生器scpi指令和编码
typedef enum{
	unitrend_channel    = 1,		  //通道
	unitrend_cmd_Read   =0x05,		//读指令
	unitrend_cmd_Write  =0x04,		//写指令
	unitrend_eRM_Freq   =0x8009,	//频率指令编码
	unitrend_eRM_AmpVDbm=0x800d,	//幅度指令编码 单位dBm
	unitrend_eRM_CH_SW  =0x8001,  //通道指令编码
}uni_trend;

//时钟I2C参数结构
struct eeprom
{
  char *dev; 			                // 设备名称，i2c-1
  int addr;			              	    // 设备中地址
  int fd;				                // 设备句柄
};

struct clkregDef
{
  int addr;
  int data;
};

//解调中间结构定义
struct demodPeakDataRec
{
  int index;
  double value;
};

enum freqScanType{ fsFFT, fsSweep};
//频率扫描
struct fscanDef
{
//  double dwellTime;           //驻留时间
	double step;                  //频率步进
  //unsigned int fftLength;			    //fft长度
  unsigned int fftFrame;		    //FFT 帧数
  unsigned int fftRealN;		    //实际扫描总频点数
  unsigned int fftIdealN;		    //fft 理论扫描总频点数
  unsigned int cic;
  unsigned int fft;				//fft点数
  int mode;           //模式  （FFT 和扫频）
  double ffHoldTime;
  double ofHoldTime;
  double holdTime;     //采样驻留世间
  double sampleTime_ZeroSpan;  //零扫宽 单个采集时间
  unsigned char fftIndex; //ADDR_13
};

//fft模式数据定义
struct fftDataDef
{
  double rbw;               //分辨率
  unsigned int cic;         //抽取率
  unsigned int fft;					//FFT点数
  unsigned int length;			//有效长度
  double fstep;						//本振步进长度
  unsigned char Index;
};

static struct fftDataDef fftBandList[] =
{
	//rbw            cic             fft             length	     fstep        RBW送数
	  {10,     1250,     8192,		6400,		32e3,    7},  //  7
	  {30,     500,      8192,      6400,		80e3,    5},  //  5
	  {50,     250,      8192,      6400,		160e3,   4},  //  4
	  {100,    250,      4096,      3200,		160e3,   3},  //  3
	  {300,    100,      4096,      3200,		400e3,   1},  //  1
	  {500,    50,       4096,      3200,		800e3,   0},  //  0

};

//零扫宽和扫频模式数据定义
struct sweepDataDef
{
	 double rbw;            //分辨率
	 unsigned int cic;      //抽取率
	 double holdTime;       //采集最小驻留时间
	 double sampleTime;			//单个采集时间
};

static struct sweepDataDef sweepDataList[] =
{
   // rbw		 cic                holdTime              sampleTime
	{1e3,		1000,		19.53125,       9.765625},
	{3e3,		333,		6.50407,		3.251953125},
	{5e3,		200,		3.90625,		1.953125},
	{10e3,	    100,		3.90625,		0.9765625},
	{30e3,	    33,			3.90625,		0.322265625},
	{50e3,	    20,			3.90625, 		0.1953125},
	{100e3,	    20,			3.90625,		0.1953125},
	{300e3,	    7,			3.90625,		0.068359375},
	{500e3,	    4,			3.90625,		0.0390635},
	{1e6,		20,			3.90625,		0.1953125},
	{3e6,		7,			3.90625,		0.068359375},
	{5e6,		4,			3.90625,		0.0390625},
};

//射频参数结构
struct rfDataDef
{
  unsigned int ModiQuieoty;
  unsigned int BucLen;

  unsigned long Ft1;
  unsigned long Ft2;
  unsigned long Ft3;
  unsigned long Ft4;
  unsigned long Ft5;

  double Delta_f;
  double Delta_n;

  double Start1;
  double Start2;
  double Start3;
  double Start4;

  int Db;
  int Db1;
  int Db2;
  long Bks;

  double FLo1;
  double FLo2;
  double FLo3;
  double FLo4;
  double FLo5;
  unsigned long Sweep;
  unsigned long Da;
  double Da1;
  unsigned long Da2;

  unsigned long long Dnf_f;
  unsigned char Dnf_f1;
  unsigned char Dnf_f2;
  unsigned char Dnf_f3;
  unsigned char Dnf_f4;
  unsigned char Dnf_f5;

  double N1;
  double N2;
  double N3;
  double N4;

  unsigned int N2_N;
  unsigned int N3_N;

  unsigned long N1_n;
  unsigned long N1_f;
  unsigned char N1_f1;
  unsigned char N1_f2;
  unsigned char N1_f3;
  unsigned char N1_f4;

  unsigned long N2_n;
  unsigned long N2_f;
  unsigned char N2_f1;
  unsigned char N2_f2;
  unsigned char N2_f3;
  unsigned char N2_f4;

  unsigned long N3_n;
  unsigned long N3_f;
  unsigned char N3_f1;
  unsigned char N3_f2;
  unsigned char N3_f3;
  unsigned char N3_f4;

  unsigned long N4_n;
  unsigned long N4_f;
  unsigned char N4_f1;
  unsigned char N4_f2;
  unsigned char N4_f3;
  unsigned char N4_f4;

  unsigned char Ch1;
  unsigned char Ch2;
  unsigned char Ch3;

  unsigned long span;      //扫宽

  unsigned char Start_Band;
  unsigned char Stop_Band;

  unsigned int  BAND1_BUG;
  unsigned int  BAND2_BUG;
  unsigned int  BAND3_BUG;
  unsigned int  BAND4_BUG;
  unsigned int  bandNumber;

  unsigned char chch1;
  unsigned char chch2;
  unsigned char chch3;
  unsigned char chch4;
  unsigned char chch5;

  unsigned char port407;

  unsigned char enable;

  int SWEEP_BAND_INDEX;		//波段指示
  unsigned int FTW_Start;
  unsigned int FTW_Step;
  int N_L;
  int N_H;			  		//
  int N_HL;           		//第一本振低波段步进次数
  unsigned int N_HL_START_INT;
  unsigned int N_HL_START_FRAC;
  unsigned int N_HL_STOP_INT;
  unsigned int N_HL_STOP_FRAC;
  int N_HH;           		//第一本振高波段步进次数
  unsigned int N_HH_START_INT;
  unsigned int N_HH_START_FRAC;
  unsigned int N_HH_STOP_INT;
  unsigned int N_HH_STOP_FRAC;
  unsigned int N_QSTEP;
  unsigned int N_HH1_START_INT;
  unsigned int N_HH1_START_FRAC;
  unsigned int N_HH4_START_INT;
  unsigned int N_HH4_START_FRAC;
  unsigned int N_HH4_STOP_INT;
  unsigned int N_HH4_STOP_FRAC;
  unsigned int N_HH2_STOP_INT;
  unsigned int N_HH2_STOP_FRAC;
  int N_HH1;				//第一本振高波段第一分段步进次数
  int N_HH2;				//第一本振高波段第二分段步进次数
  int N_HH3;				//第一本振高波段第三分段步进次数
  int N_HH4;				//第一本振高波段第四分段步进次数
  int HIGH_BAND_INDEX;		//高波段指示
  double DBUC_FREQ;    //大BUC频率
};



struct freqRespIndex{
	int tIndex1;
	int tIndex2;
};
static struct freqRespIndex freqIndex[MAXSWEEPPOINTS];

//检波定义
struct detectorDef
{
	detectorMode detMode;
	detectorMode prvDetMode;

	unsigned int length;       //检波数据长度
	unsigned int ldata;		 //检波后数据长度
	unsigned int realLength;	//实际检波数据长度
};

//迹线定义
struct traceDef
{
  traceState state;                             //迹线状态

  int colorR;                                   //颜色R
  int colorG;                                   //颜色G
  int colorB;                                   //颜色B

  double value[MAXDATASIZE];                    //迹线对数数据
  int flags;                                    //标记
};

struct markerNormalDef
{
  int xIndex;
  double xValue;
  double yValue;
};

struct markerDeltaDef
{
  int x1Index;
  int x2Index;  //R
  double x1Value;
  double x2Value;
  double y1Value;
  double y2Value;
};

//频标定义
struct markerDef
{
  int traceIndex;
  markerState state;
  markerNormalDef markerNormal;
  markerDeltaDef markerDelta;
  bool setted;
  double settedValue;
};

//频率计数参数定义
struct markerFctnFreqCountParamDef
{
  bool isSaved;

  double centerFreq;
  double span;
  double startFreq;
  double stopFreq;
  double rbw;
  double vbw;
  bool rbwAuto;
  bool vbwAuto;
  double refLevel;
  double att;
  double att1;
  double att2;
  bool attAuto;
  double sweepTime;
  bool sweepTimeAuto;
};

//频标功能定义
struct markerFctnDef
{
  bool isFreqCountOn;
  unsigned long freqCountBw;
  double freqCountValue;
  struct markerFctnFreqCountParamDef freqCountParam;

  bool isMkrNoiseOn;
  double noiseValue;

  bool isNdBOn;
  double ndBValue;
  int ndBIndex1;
  int ndBIndex2;
  double ndBFreq;
  double ndBFreq1;
  double ndBFreq2;
};

//频率结构定义
struct freqDef
{
  double center;
  double start;
  double prvStart;
  double stop;
  double cfStep;
  bool cfStepAuto;
  double offset;
  bool refInternal;
  bool typeLine;
  bool isShowCenter;
  bool lineZero;
  bool isLowChannel;
};

//扫宽结构定义
struct spanDef
{
  double prvSpan;
  double nowSpan;
  double span;
  bool isZeroSpan;
};

//幅度结构定义
struct amptDef
{
  double refLevelMin;
  double refLevelMax;
  double refLevel;
  double LMPValue;

  double att;
  double att1;
  double att2;
  bool attAuto;

  double attRf;   //射频衰减器
  double attRf_Auto;//
  double attIf;   //中频衰减器

  double scaleDiv;
  bool scaleLine;
  int preamtOn;
  int prvPreamptOn;
  bool isPreamptOn;//前置放大
  bool prvIsPreamptOn;

  double refOffset;

  double ifValue;
  double ifSoftValue;

  refUnits refUnit;

  double maxYValue;
  double minYValue;
};

//EMC结构体
struct emcDef
{
  bool emcOn;
  bool emcSaved;
  double emcRbwPrv;
  bool emcRbwPrvAuto;
  double emcVbwPrv;
  bool emcVbwPrvAuto;
  bool emcRbwCont;
//  double emcStartfreq;
  int SelectStandardNumber;

  detectorMode detectorPrv;
  double AF;
  double CalculateDistance;
  double MeasDistance;
};

//分辨率结构定义
struct bwDef
{
  double rbw;//分辨率带宽
  bool rbwAuto;
  bool rbwStepCont;
  double vbw;
  bool vbwAuto;
  bool vbwStepCont;
  int bwAverage;
  int bwAverageFlag;
  bool bwAverageOn;
  bool bwAverageFulled;
};

//扫描定义
struct sweepDef
{
  double sweepDelay;
  double minAutoSweepTime; //耦合状态最小扫描时间 us
  double sweepTime;  //us
  bool sweepTimeAuto;
  unsigned int sweepPoints;
  bool sweepSingle;
};

//测量设置定义
struct measureSetupDef
{
  double channelWidth;
  double channelSpace;
  int channelNums;
  double powerPercent;
};

//邻道功率
struct acprAdjacentDef
{
  double bandWidth;
  double spacing;
  double lower;
  double upper;
};

//邻道区间
struct acprAdjRectDef
{
  int startXL;
  int stopXL;
  int startXR;
  int stopXR;
};

//窗口测量限制线数据定义
struct lineEditDataDef
{
  double freq;
  double ampt;
};

//窗口测量结构定义
struct winLineDataDef
{
  bool winMeasOn;                                     //窗口测量
  bool winAmptOn;                                     //窗口幅度线
  bool winFreqOn;                                     //窗口频率线
  double winAmptUp;                                   //窗口上线
  double winAmptLow;                                  //窗口下线
  double winFreqStart;                                //窗口起始频率
  double winFreqStop;                                 //窗口终止频率
  bool winSweepOn;                                    //窗口扫描
  int winNowAmptUpOrLow;                              //窗口测量幅度设置
  int winNowFreqStartOrStop;                          //窗口测量频率设置

  bool line1Editing;                                  //编辑1
  bool line2Editing;                                  //编辑2
  bool lineMeasOn;                                    //线测量
  bool line1On;                                       //下线打开
  bool line2On;                                       //下线打开
  struct lineEditDataDef line1Datas[MAXPASSFAILROWS]; //上线数据
  struct lineEditDataDef line2Datas[MAXPASSFAILROWS]; //下线数据
  int line1EditNowSelIndex;                           //上线索引
  int line2EditNowSelIndex;                           //下线索引
  int line1TotalPoints;                               //上线总点数
  int line2TotalPoints;                               //下线总点数
  int linePerPagePoints;                              //线每页点数
  int line1Pages;                                     //上线页数
  int line2Pages;                                     //下线页数
  int line1NowPageIndex;                              //上线当前页索引
  int line2NowPageIndex;                              //下线当前页索引
  int line1NowPagePoints;                             //上线点数
  int line2NowPagePoints;                             //上线点数
  double lineShiftXOffset;                            //X偏置
  double lineShiftYOffset;                            //Y偏置
  int lineNowShiftXOrY;                               //X或Y设置
};

struct powerMeterDef
{
	 bool isPowerMeterOn;
	 double ampt;
	 double freq;
	 double freqStep;
	 char company[64];
	 char serialNo[32];
	 char version[32];
	 char deviceType[32];
};

//测量定义
struct measureDef
{
  bool isAllOff;

  bool isTimeSpectrumOn;
  int timeSpecFlag;

  bool isChannelPowerOn;
  double channelPower;

  bool isAcprOn;
  double acprTxChannelBw;
  double acprTxChannelPower;
  int acprTxChannelStartX;
  int acprTxChannelStopX;
  int channelPowerStartX;
  int channelPowerStopX;
  struct acprAdjacentDef acprAdjacent[MAXADJCOUNT];
  struct acprAdjRectDef acprRects[MAXADJCOUNT];

  bool isObwOn;
  double obwBandWidth;
  double obwStartFreq;
  double obwStartFreqPower;
  double obwStopFreq;
  double obwStopFreqPower;
  int obwStartX;
  int obwStopX;

  struct winLineDataDef passFail;
  struct powerMeterDef powerMeter;
};

//显示结构定义
struct displayDef
{
  bool isFullScreen;
  bool isZoomOn;
  bool zoomed;
  double zoomSpan;
  double zoomStartFreq;
  double zoomStopFreq;
  double freqLineStart;
  double freqLineStop;
  double dispLineValue;
  bool isDispLineOn;
  bool isFreqLineOn;
  bool isAmptGraticuleOn;
  bool isGridOn;
  bool isLabelOn;
  desktopStyle winStyle;
};

//用户校准数据结构定义
struct userCalDataDef
{
  double temperature;
  double absError;
  double if10dB;
  double if0dB;
  double if20dB;
  double if30dB;
};

//LAN结构
struct lanDef
{
  char ip[64];
  char hostIp[64];
  char mask[64];
  char gate[64];
  char mac[64];
  int hostPort;
  unsigned long macLo;
  int udpRemotePort;		 //UDP 端口
  char udpRemoteIP[32];          //UDP 地址
};

//GPIB结构
struct gpibDef
{
  int addr;
};

//COM结构
struct comDef
{
  baudRate baudrate;
  dataBits databits;
  stopBits stopbits;
  checkMode check;
  flowControl flow;
};

//系统I/O结构定义
struct ioDef
{
  lanDef lan;
  gpibDef gpib;
  comDef com;
};

//日期时间定义
struct dateTimeDef
{
  bool isVisible;
  bool isPCF8563;
  dateTimeStyle style;
  char date[64];
  char time[64];

  int year;
  int month;
  int day;
  int hour;
  int minute;
  int second;
};

//开机复位
struct powerOnPresetDef
{
  systemParam powerOnParam;
  systemParam presetParam;
};

//系统结构定义
struct systemDef
{
  bool isLanguageEn;
  bool isInternalSignalOn;
  bool isLogOn;                                 //LOG开启关闭
  bool isGpibOn;                                //GPIB开启关闭
  bool isScpiScreenRefresh;
  char serialNo[32];
  bool isSerialNoOldModeOn;                     //老序列号模式
  int lanMacAddrIndex;
  unsigned char lanMacAddress[12];
  unsigned char firmwareVersion[2];
  int backLight;
  bool isServiceUnlock;                       //系统服务是否开启

  ioDef io;
  dateTimeDef datetime;
  powerOnPresetDef powerOnPreset;

};

//文件结构定义
struct fileDef
{
  unsigned int total;
  int perPage;
  int pages;
  int nowPageIndex;
  int nowPageCount;
  int nowSelIndex;
  showType show;
  sortType sort;
  double freeDiskSpace;
  bool isRestoring;
};

//打印结构定义
struct printDef
{
  paperType paper;
  bool isPclLanguage;
  bool isColorPrinter;
  bool isOrientationHor;
  int nums;
};

//解调结构定义
struct demodDef
{
  bool demodOn;
  int sound;
  double radioFreqSet[6];
  demodMode mode;
  demodRadio radioSet;
};

//出厂校准数据结构定义
struct factoryCalDataDef
{
  bool isCaled;                                 //已校准
  double temperature;                           //温度
  double absoluteAmptValue;                     //绝对幅度值

  double attBase;                               //基准
  double att0;                                  //衰减
  double att9;                                  //衰减
  double att21;                                 //衰减
  double att30;                                 //衰减
  double att39;                                 //衰减

  double if0;                                   //中频增益
  double if10;                                  //中频增益
  double if20;                                  //中频增益
  double if30;                                  //中频增益

//  double attRf[4][FREQRESPCOUNT];										//射频衰减
  double attIf[32];															//中频衰减
//  double attIf[][];

  double rbw10k;                                //10kHz分辨率
  double rbw1k;                                 //1kHz分辨率
  double rbw900;                                 //900Hz分辨率
  double rbw[52];                               //分辨率
  double rbw_fft[52];                           //fft分辨率
  double freqResp[4][FREQRESPCOUNT];                       //频响 3.6G时89   3G时74
};

//直采通道出厂校准数据结构定义
struct zcCalDataDef
{
	bool isCaled;                                 //已校准
	double temperature;                           //温度
	double absoluteAmptValue;                     //绝对幅度值

	double attBase;                               //基准
	double att0;                                  //衰减
	double att9;                                 //衰减
	double att21;                                 //衰减
	double att30;                                 //衰减
	double att39;                                 //衰减

	double if0;                                   //中频增益
	double if10;                                  //中频增益
	double if20;                                  //中频增益
	double if30;                                  //中频增益

	double rbw10k;                                //10kHz分辨率
//	double rbw1k;                                 //1kHz分辨率
//	double rbw900;                                 //900Hz分辨率
	double rbw[13];                               //分辨率
	double rbw_fft[13];                           //fft分辨率
	double freqResp[5][FREQRESPCOUNT_ZC];         //频响
};

//SCPI通信数据结构定义
struct scpiCommDataDef
{
  scpiInterfaceType interface;

  bool stateR;
  bool stateL;
  bool stateT;
  bool stateS;

  bool serialOpened;
  bool gpibOpened;
  bool lanOpened;
  bool usbOpened;

  unsigned char buf[SCPIBUFSIZE];
  unsigned int rcvLength;
};

//网络测量归一化数据
struct sourceNetworkDataDef
{
  double startFreq;
  double stopFreq;
  double refLevel;
  double outputPower;
  unsigned int sweepPoints;
  double value[MAXDATASIZE];
  bool normalized;
  double normalizeData[MAXDATASIZE];
};

//选件结构定义
struct optionDef
{
  bool directChannelOptionOn;   //直采通道选件激活

  bool isTrack36GHzOn;    //3.6GHz跟踪源配置
  bool isFftOn;           //FFT选件配置
  bool preFftOn;          //FFT选件上次配置
  bool isDemodOn;          //解调选件配置
  bool isFft10HzOn;       //FFT 10Hz 配置

  bool amOn;              //AM模式
  bool fmOn;              //FM模式

  double am_carrierfreq;  //AM载波频率
  double am_carrierPower; //AM载波功率
  double am_cicvalue;     //AM抽取系数
  bool am_ifbw_auto;      //AM中频带宽自动
  double am_ifbw;         //AM中频带宽
  double am_depth;        //AM调制深度
  double am_freq;         //AM调制率
  double am_sinad;        //AM信呐比
  double am_thd;          //AM失真度
  double am_time_us;      //AM时间
  bool am_cfgchanged;     //AM配置改变

  double fm_carrierfreq;  //FM载波频率
  double fm_carrierPower; //FM载波功率
  double fm_cicvalue;     //FM抽取系数
  bool fm_ifbw_auto;      //FM中频带宽自动
  double fm_ifbw;         //FM中频带宽
  double fm_freq;         //FM频率
  double fm_deviation;    //FM偏差
  double fm_sinad;        //FM信呐比
  double fm_thd;          //FM失真度
  double fm_time_us;      //FM时间
  bool fm_cfgchanged;     //FM配置改变
  int fm_cIndex;          //FM中心索引

  unsigned int peakSize;                           //峰值长度
  unsigned long iqData[DEMODSIZE];                 //IQ数据
  double mData[DEMODFFTSIZE];                      //模数据
  double mDataFir[DEMODFFTSIZE];                   //滤波后模数据
  double fftDataLine[DEMODFFTSIZE];                //FFT线性结果
  double fftData[DEMODFFTSIZE];                    //FFT对数结果
  double diff[DEMODFFTSIZE];                       //峰值
  struct demodPeakDataRec peakList[DEMODFFTSIZE];  //峰值列表
  unsigned long fDataBuf[DEMODSIZE / 2];           //模数据

  int cicValue;
  bool canExecuteDemod;                            //可以执行
  bool demodExecuting;                             //正在执行
};


//源参数
struct sourceDataDef
{
  bool isSourceOn;

  bool isVswrOn;
  double vswrRef;

  networkMeasType measType;   //网络测量类型

  //bool isTrack36GHz;
  bool isTrackGenOn;
  double trackGenOutputPower;
  double attentionValue;
  bool isTrackGenNetworkOn;
  double trackGenNetworkRefLevel;
  double trackGenNetworkOutputPower;

  bool isSignalGenOn;
  double signalGenOutputFreq;
  double signalGenOutputPower;
  int signalAmptStandardIndex;
  int trackAmptStandardIndex;

  //信号源波段号
  unsigned char BandNumber;

  //信号源送数
  unsigned long R0;
  unsigned long R1;
  unsigned long R2;
  unsigned long R3;
  unsigned long R4;
  unsigned long R5;

  struct signalAmptDataDef signalAmptStandard[23];
  struct trackAmptDataDef trackAmptStandard[5];
  struct sourceNetworkDataDef trackNetworkStandard;
};

//校准运行参数
struct calRunDataDef
{
  int maxIndex;
  int minIndex;
  double maxValue;
  double minValue;
};

//鉴频测试参数
struct discriminatorDataDef
{
  bool isDiscOn;
  double outputPower;
  inputGainType inputGain;
  double scaleDiv;
  double dcOffset;
  double sweepTime;
  int discStandard[5];

  double discValueInit[MAXDATASIZE];
  double discValue[MAXDATASIZE];
};

//用户自定义状态
struct userSelfStateDataDef
{
  bool saved;
  double centerFreq;
};

//直采单段信息定义
struct zcSegDef
{
  double ddcCenter;
};

//直采信息定义
struct zcDef
{
  bool reseted;                           //重控制
  unsigned int segTotal;                  //总段数
  unsigned int cic;                       //cic
  unsigned int execCount;                 //执行次数
  double cf1;                             //czt f1
  double cf2;                             //czt f2
  int bucLen;                             //大BUC
  unsigned int sBucCounter;               //小BUC计数器
  double sBucDetValue;                    //小BUC检波值
  unsigned int curSegIndex;               //当前执行段索引
  double swt;                             //单段扫描时间(ms)
  double idleSwt;                         //单次空余时间(ms)
  unsigned int detIndex[MAXSWEEPPOINTS];  //检波索引值
  unsigned long dataBuf[MAXSWEEPPOINTS];  //检波对数值
  struct zcSegDef segs[MAXZCSEGS];        //直采段信息
  char prvCenterStr[32];                  //上次DDC中心频率字符串
  char nowCenterStr[32];                  //本次DDC中心频率字符串
  unsigned long IQData[FFTSIZE * 2];      //IQ数据
  float iData[FFTSIZE * 2];               //I Data
  float qData[FFTSIZE * 2];               //Q Data
  double iqData[FFTSIZE];                 //IQ Data
  float cicCompensateValue[FFTSIZE];      //CIC补偿值
};

//FFT
struct sFFTDef
{
  double centerFreq;
  double cF1;
  double cF2;
  int detNums;
  int cztM;
  int sIndex;
  int eIndex;
};

struct fftBandDef
{
  int start_Band;
  int stop_Band;
};

struct fftDef
{
  bool isFftOut;
  bool fftOn;
  unsigned long long fftSumCount;
  int fftIndex;
  unsigned long long fftDataIndex;
  unsigned int IQData[FFTSIZE * 2];

  unsigned int IQTestData[FFTSIZE * 2];

  unsigned int IData[FFTSIZE];
  unsigned int QData[FFTSIZE];
  float fiData[FFTSIZE * 2];
  float fqData[FFTSIZE * 2];
  unsigned int data[FFTSIZE];
  double dataVbwInit[FFTSIZE];
  double dataVbw[FFTSIZE];
  double dataVbwFir[FFTSIZE + FIROFFSET];

  unsigned int fftCount;
  bool fftSetted;
  bool fftGetted;

  unsigned long long fftSigleSumPoint[MAXSWEEPPOINTS];
  struct fftBandDef bands[MAXSWEEPPOINTS];

  double prvCenterFreq;
  double nowCenterFreq;
  double cF1;
  double cF2;

  unsigned long fDataBuf[MAXSWEEPPOINTS];

  bool isSweepSingle;
  int sweepCount;
};

//触发
struct trigDataDef
{
  trigMode mode;                                //触发模式
  unsigned char trigDown;                       //触发下发数
  double power;                                 //触发功率
  bool isDisplayVideoLine;                     //视频触发功率线显示
  unsigned long powerDown;
  unsigned char powerDownH;
  unsigned char powerDownLH;
  unsigned char powerDownLL;
};


struct feDef
{
	double ifAtt;                    //中频衰减器
	double freq;                     //频率
//	bool   extRef;              	 //外参考
	double lowbandAtt;               //低波段衰减器
	double highbandAtt;              //高波段衰减器
	double refVolt;                  //内参考电压
};

//系统数据结构定义
struct dataDef
{
  int mkrCount;	                                //EMI峰值列表Markr数目
  struct scpiCommDataDef scpiData;              //SCPI信息

  int canvasNums;                               //CANVAS数目
  int traceSelIndex;                            //选择迹线索引
  int markerSelIndex;                           //选择标记索引
  bool markerTableOn;                           //频标列表
  bool peakTableOn;                             //EMI 峰值列表
  bool isAutoPeakMaxing;                        //自动峰值搜索
  bool isAutoSearching;                         //自动信号搜索
  double temperature;                           //温度

  bool isPreseting;                             //正在复位
  bool isCalibrating;                           //正在校准
  bool isUserCalibrating;                       //用户校准
  bool isFactoryCalibrating;                    //出厂校准
  bool isComCalbration;                         //串口校准
  bool isPreamplifierCalibrating;               //前置放大校准
  bool isFftCalibrating;                        //FFT校准
  bool isZcCalibrating;                         //直采校准
  bool isZcPreamplifierCalibrating;             //直采通道前置放大校准

  bool isImpedanceTransformation;               //阻抗转换

  bool isDrawingCanvas;                         //绘制曲线

  systemMode mode;                              //模式

  double initValue[MAXDATASIZE];                //原始数据
  double prjValue[MAXDATASIZE];                 //工程数据

  unsigned long test[MAXSWEEPPOINTS];
  struct traceDef trace[TRACECOUNT];            //迹线数据
  struct markerDef marker[MARKERCOUNT];         //频标数据
  struct measureDef measure;                    //测量
  struct discriminatorDataDef disc;             //鉴频
  struct measureSetupDef measureSetup;          //测量设置

  struct markerFctnDef markerFctn;              //频标功能
  struct detectorDef detector;                  //检波

  struct zcDef zc;                              //直采

  struct feDef fe;
  freqDef freq;                                 //频率
  spanDef span;                                 //扫宽
  amptDef ampt;                                 //幅度
  bwDef bw;                                     //带宽
  sweepDef sweep;                               //扫描
  sourceDataDef source;                         //源
  displayDef display;                           //显示
  systemDef system;                             //系统
  fileDef file;                                 //文件
  printDef print;                               //打印
  demodDef demod;                               //解调
  emcDef emc;                                   //emc

  factoryCalDataDef factoryCalData;             //出厂校准
  userCalDataDef userCalData;                   //用户校准
  factoryCalDataDef preamplifierCalData;        //前置放大校准
  zcCalDataDef zcCalData;                       //直采通道校准
  zcCalDataDef zcPreamplifierCalData;           //直采通道前置放大校准

  optionDef options;                            //选件参数
  struct fftDef fft;                            //FFT参数

  double avgValue[MAXBWAVERAGE][MAXDATASIZE];   //平均值
  trigDataDef trig;                             //触发模式
 
  struct userSelfStateDataDef userSelfState[USERCOUNT]; //用户状态数据

  fscanDef fscan;                //频率扫描
};

//子键定义
struct subKeyDef
{
  char* tagName;                        //标签

  char* keyValueStr;                    //键值名称
  char* funcCodeStr;                    //功能码名称

  int keyValue;                         //键值
  int funcCode;                         //功能码
  int keyTimes;                         //按键次数

  char* enName;                         //英文名称
  char* chName;                         //中文名称
  char* enHelp;                         //英文帮助
  char* chHelp;                         //中文帮助

  bool isEnabled;                       //使能
  bool isBlank;                         //是否为空白键
  bool isInput;                         //是否为输入
  bool isReverse;                       //是否为反转
  bool isList;                          //是否为列表
  bool isUnit;                          //是否为单位键
  bool isExecute;                       //是否为执行键
  bool isMore;                          //是否直接包含子菜单
  bool isReturn;                        //是否为返回键
  bool isPassword;                      //是否为口令
  bool isDate;                          //是否为日期
  bool isTime;                          //是否为时间
  bool isDateTime;                      //是否为日期时间
  bool isIP;                            //是否为IP地址
  bool isMac;                           //是否为Mac地址

  struct subKeyDef* upNode;             //上节点
  struct subKeyDef* downNode;           //下节点
  struct subKeyDef* leftNode;           //父节点
  struct subKeyDef* rightNode;          //子节点
};

//自检定义
struct selfCheckDef
{
  bool power;                           //电源
  bool control;                         //控制
  bool aif;                             //中频
  bool arf;                             //射频
};

//主键定义
struct mainKeyDef
{
  char* tagName;                        //标签

  char* keyValueStr;                    //键值名称
  char* funcCodeStr;                    //功能码名称

  int keyValue;                         //键值
  int funcCode;                         //功能码

  char* enName;                         //英文名称
  char* chName;                         //中文名称
  char* enHelp;                         //英文帮助
  char* chHelp;                         //中文帮助

  struct subKeyDef* rightNode;          //主键内子键
  struct mainKeyDef* downNode;          //下一个主键
};

#endif
